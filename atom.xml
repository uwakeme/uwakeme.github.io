<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Uwakeme]]></title>
  <subtitle><![CDATA[一起学习，一起进步]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="https://uwakeme.tech/"/>
  <updated>2025-08-11T07:53:23.473Z</updated>
  <id>https://uwakeme.tech/</id>
  
  <author>
    <name><![CDATA[Wake]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[【学习】C语言项目实战：从算法到系统编程]]></title>
    <link href="https://uwakeme.tech/2025/08/11/%E5%AD%A6%E4%B9%A0/%E3%80%90%E5%AD%A6%E4%B9%A0%E3%80%91C%E8%AF%AD%E8%A8%80%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%EF%BC%9A%E4%BB%8E%E7%AE%97%E6%B3%95%E5%88%B0%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/"/>
    <id>https://uwakeme.tech/2025/08/11/学习/【学习】C语言项目实战：从算法到系统编程/</id>
    <published>2025-08-11T09:00:00.000Z</published>
    <updated>2025-08-11T07:53:23.473Z</updated>
    <content type="html"><![CDATA[<div class="note info flat"><p><strong>C语言系统学习系列 - 第8篇（完结篇）</strong><br>通过完整的项目实战，将前面学到的所有知识融会贯通，从算法实现到系统编程，构建真正实用的程序。</p>
</div>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>经过前面七篇文章的系统学习，您已经掌握了C语言的各个方面：从基础语法到高级特性，从内存管理到文件操作。现在是时候将这些知识整合起来，通过实际项目来巩固和提升编程技能。</p>
<p><strong>项目实战的重要性</strong></p>
<p>理论知识只有通过实践才能真正掌握：</p>
<ul>
<li><strong>算法实现</strong>：将经典算法用C语言实现，理解算法的本质</li>
<li><strong>数据结构</strong>：构建高效的数据结构，解决实际问题</li>
<li><strong>系统编程</strong>：编写与操作系统交互的程序</li>
<li><strong>工程实践</strong>：学会项目组织、调试、优化等工程技能</li>
</ul>
<p><strong>本文项目概览：</strong></p>
<ul>
<li>数据结构库：实现常用数据结构</li>
<li>算法集合：经典算法的C语言实现</li>
<li>文本处理工具：实用的命令行工具</li>
<li>简单操作系统内核：系统编程入门</li>
</ul>
<a class="btn-beautify green" href="/2025/08/10/%E5%AD%A6%E4%B9%A0/%E3%80%90%E5%AD%A6%E4%B9%A0%E3%80%91C%E8%AF%AD%E8%A8%80%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7%E4%B8%8E%E7%8E%B0%E4%BB%A3%E7%BC%96%E7%A8%8B%EF%BC%9A%E6%8F%90%E5%8D%87%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F/" title="上一篇：高级特性与现代编程"><i class="far fa-hand-point-left"></i><span>上一篇：高级特性与现代编程</span></a>

<h1 id="一、数据结构库项目"><a href="#一、数据结构库项目" class="headerlink" title="一、数据结构库项目"></a>一、数据结构库项目</h1><h2 id="（一）通用数据结构库设计"><a href="#（一）通用数据结构库设计" class="headerlink" title="（一）通用数据结构库设计"></a>（一）通用数据结构库设计</h2><h3 id="1-动态数组（Vector）实现"><a href="#1-动态数组（Vector）实现" class="headerlink" title="1. 动态数组（Vector）实现"></a>1. 动态数组（Vector）实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vector.h - 动态数组头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> VECTOR_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VECTOR_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">void</span>* data;         <span class="comment">// 数据指针</span></span><br><span class="line">    <span class="type">size_t</span> size;        <span class="comment">// 当前元素数量</span></span><br><span class="line">    <span class="type">size_t</span> capacity;    <span class="comment">// 容量</span></span><br><span class="line">    <span class="type">size_t</span> element_size; <span class="comment">// 元素大小</span></span><br><span class="line">&#125; Vector;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基本操作</span></span><br><span class="line">Vector* <span class="title function_">vector_create</span><span class="params">(<span class="type">size_t</span> element_size)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">vector_destroy</span><span class="params">(Vector* vec)</span>;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">vector_push_back</span><span class="params">(Vector* vec, <span class="type">const</span> <span class="type">void</span>* element)</span>;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">vector_pop_back</span><span class="params">(Vector* vec, <span class="type">void</span>* element)</span>;</span><br><span class="line"><span class="type">void</span>* <span class="title function_">vector_get</span><span class="params">(<span class="type">const</span> Vector* vec, <span class="type">size_t</span> index)</span>;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">vector_set</span><span class="params">(Vector* vec, <span class="type">size_t</span> index, <span class="type">const</span> <span class="type">void</span>* element)</span>;</span><br><span class="line"><span class="type">size_t</span> <span class="title function_">vector_size</span><span class="params">(<span class="type">const</span> Vector* vec)</span>;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">vector_empty</span><span class="params">(<span class="type">const</span> Vector* vec)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">vector_clear</span><span class="params">(Vector* vec)</span>;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">vector_reserve</span><span class="params">(Vector* vec, <span class="type">size_t</span> new_capacity)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// VECTOR_H</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vector.c - 动态数组实现</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;vector.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">Vector* <span class="title function_">vector_create</span><span class="params">(<span class="type">size_t</span> element_size)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (element_size == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    Vector* vec = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Vector));</span><br><span class="line">    <span class="keyword">if</span> (vec == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    vec-&gt;data = <span class="literal">NULL</span>;</span><br><span class="line">    vec-&gt;size = <span class="number">0</span>;</span><br><span class="line">    vec-&gt;capacity = <span class="number">0</span>;</span><br><span class="line">    vec-&gt;element_size = element_size;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> vec;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">vector_destroy</span><span class="params">(Vector* vec)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (vec != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">free</span>(vec-&gt;data);</span><br><span class="line">        <span class="built_in">free</span>(vec);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">bool</span> <span class="title function_">vector_grow</span><span class="params">(Vector* vec)</span> &#123;</span><br><span class="line">    <span class="type">size_t</span> new_capacity = vec-&gt;capacity == <span class="number">0</span> ? <span class="number">4</span> : vec-&gt;capacity * <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> vector_reserve(vec, new_capacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">vector_reserve</span><span class="params">(Vector* vec, <span class="type">size_t</span> new_capacity)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (vec == <span class="literal">NULL</span> || new_capacity &lt;= vec-&gt;capacity) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">void</span>* new_data = <span class="built_in">realloc</span>(vec-&gt;data, new_capacity * vec-&gt;element_size);</span><br><span class="line">    <span class="keyword">if</span> (new_data == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    vec-&gt;data = new_data;</span><br><span class="line">    vec-&gt;capacity = new_capacity;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">vector_push_back</span><span class="params">(Vector* vec, <span class="type">const</span> <span class="type">void</span>* element)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (vec == <span class="literal">NULL</span> || element == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (vec-&gt;size &gt;= vec-&gt;capacity) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!vector_grow(vec)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">char</span>* data_ptr = (<span class="type">char</span>*)vec-&gt;data;</span><br><span class="line">    <span class="built_in">memcpy</span>(data_ptr + vec-&gt;size * vec-&gt;element_size, element, vec-&gt;element_size);</span><br><span class="line">    vec-&gt;size++;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">vector_pop_back</span><span class="params">(Vector* vec, <span class="type">void</span>* element)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (vec == <span class="literal">NULL</span> || vec-&gt;size == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    vec-&gt;size--;</span><br><span class="line">    <span class="keyword">if</span> (element != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="type">char</span>* data_ptr = (<span class="type">char</span>*)vec-&gt;data;</span><br><span class="line">        <span class="built_in">memcpy</span>(element, data_ptr + vec-&gt;size * vec-&gt;element_size, vec-&gt;element_size);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span>* <span class="title function_">vector_get</span><span class="params">(<span class="type">const</span> Vector* vec, <span class="type">size_t</span> index)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (vec == <span class="literal">NULL</span> || index &gt;= vec-&gt;size) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">char</span>* data_ptr = (<span class="type">char</span>*)vec-&gt;data;</span><br><span class="line">    <span class="keyword">return</span> data_ptr + index * vec-&gt;element_size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">vector_set</span><span class="params">(Vector* vec, <span class="type">size_t</span> index, <span class="type">const</span> <span class="type">void</span>* element)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (vec == <span class="literal">NULL</span> || element == <span class="literal">NULL</span> || index &gt;= vec-&gt;size) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">char</span>* data_ptr = (<span class="type">char</span>*)vec-&gt;data;</span><br><span class="line">    <span class="built_in">memcpy</span>(data_ptr + index * vec-&gt;element_size, element, vec-&gt;element_size);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> <span class="title function_">vector_size</span><span class="params">(<span class="type">const</span> Vector* vec)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> vec ? vec-&gt;size : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">vector_empty</span><span class="params">(<span class="type">const</span> Vector* vec)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> vec ? vec-&gt;size == <span class="number">0</span> : <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">vector_clear</span><span class="params">(Vector* vec)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (vec != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        vec-&gt;size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-链表实现"><a href="#2-链表实现" class="headerlink" title="2. 链表实现"></a>2. 链表实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// linked_list.h - 链表头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> LINKED_LIST_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LINKED_LIST_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> &#123;</span></span><br><span class="line">    <span class="type">void</span>* data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125; ListNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    ListNode* head;</span><br><span class="line">    ListNode* tail;</span><br><span class="line">    <span class="type">size_t</span> size;</span><br><span class="line">    <span class="type">size_t</span> element_size;</span><br><span class="line">&#125; LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基本操作</span></span><br><span class="line">LinkedList* <span class="title function_">list_create</span><span class="params">(<span class="type">size_t</span> element_size)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">list_destroy</span><span class="params">(LinkedList* <span class="built_in">list</span>)</span>;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">list_push_front</span><span class="params">(LinkedList* <span class="built_in">list</span>, <span class="type">const</span> <span class="type">void</span>* data)</span>;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">list_push_back</span><span class="params">(LinkedList* <span class="built_in">list</span>, <span class="type">const</span> <span class="type">void</span>* data)</span>;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">list_pop_front</span><span class="params">(LinkedList* <span class="built_in">list</span>, <span class="type">void</span>* data)</span>;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">list_pop_back</span><span class="params">(LinkedList* <span class="built_in">list</span>, <span class="type">void</span>* data)</span>;</span><br><span class="line">ListNode* <span class="title function_">list_find</span><span class="params">(<span class="type">const</span> LinkedList* <span class="built_in">list</span>, <span class="type">const</span> <span class="type">void</span>* data, </span></span><br><span class="line"><span class="params">                   <span class="type">int</span> (*compare)(<span class="type">const</span> <span class="type">void</span>*, <span class="type">const</span> <span class="type">void</span>*))</span>;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">list_remove</span><span class="params">(LinkedList* <span class="built_in">list</span>, <span class="type">const</span> <span class="type">void</span>* data,</span></span><br><span class="line"><span class="params">                <span class="type">int</span> (*compare)(<span class="type">const</span> <span class="type">void</span>*, <span class="type">const</span> <span class="type">void</span>*))</span>;</span><br><span class="line"><span class="type">size_t</span> <span class="title function_">list_size</span><span class="params">(<span class="type">const</span> LinkedList* <span class="built_in">list</span>)</span>;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">list_empty</span><span class="params">(<span class="type">const</span> LinkedList* <span class="built_in">list</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">list_clear</span><span class="params">(LinkedList* <span class="built_in">list</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 迭代器</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    ListNode* current;</span><br><span class="line">&#125; ListIterator;</span><br><span class="line"></span><br><span class="line">ListIterator <span class="title function_">list_begin</span><span class="params">(<span class="type">const</span> LinkedList* <span class="built_in">list</span>)</span>;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">list_iterator_valid</span><span class="params">(<span class="type">const</span> ListIterator* iter)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">list_iterator_next</span><span class="params">(ListIterator* iter)</span>;</span><br><span class="line"><span class="type">void</span>* <span class="title function_">list_iterator_data</span><span class="params">(<span class="type">const</span> ListIterator* iter)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// LINKED_LIST_H</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// linked_list.c - 链表实现</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;linked_list.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> ListNode* <span class="title function_">create_node</span><span class="params">(<span class="type">size_t</span> element_size, <span class="type">const</span> <span class="type">void</span>* data)</span> &#123;</span><br><span class="line">    ListNode* node = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ListNode));</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    node-&gt;data = <span class="built_in">malloc</span>(element_size);</span><br><span class="line">    <span class="keyword">if</span> (node-&gt;data == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">free</span>(node);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">memcpy</span>(node-&gt;data, data, element_size);</span><br><span class="line">    node-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">destroy_node</span><span class="params">(ListNode* node)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">free</span>(node-&gt;data);</span><br><span class="line">        <span class="built_in">free</span>(node);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LinkedList* <span class="title function_">list_create</span><span class="params">(<span class="type">size_t</span> element_size)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (element_size == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    LinkedList* <span class="built_in">list</span> = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkedList));</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">list</span> == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">list</span>-&gt;head = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">list</span>-&gt;tail = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">list</span>-&gt;size = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">list</span>-&gt;element_size = element_size;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">list_destroy</span><span class="params">(LinkedList* <span class="built_in">list</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">list</span> != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        list_clear(<span class="built_in">list</span>);</span><br><span class="line">        <span class="built_in">free</span>(<span class="built_in">list</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">list_push_front</span><span class="params">(LinkedList* <span class="built_in">list</span>, <span class="type">const</span> <span class="type">void</span>* data)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">list</span> == <span class="literal">NULL</span> || data == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    ListNode* new_node = create_node(<span class="built_in">list</span>-&gt;element_size, data);</span><br><span class="line">    <span class="keyword">if</span> (new_node == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    new_node-&gt;next = <span class="built_in">list</span>-&gt;head;</span><br><span class="line">    <span class="built_in">list</span>-&gt;head = new_node;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">list</span>-&gt;tail == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">list</span>-&gt;tail = new_node;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">list</span>-&gt;size++;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">list_push_back</span><span class="params">(LinkedList* <span class="built_in">list</span>, <span class="type">const</span> <span class="type">void</span>* data)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">list</span> == <span class="literal">NULL</span> || data == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    ListNode* new_node = create_node(<span class="built_in">list</span>-&gt;element_size, data);</span><br><span class="line">    <span class="keyword">if</span> (new_node == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">list</span>-&gt;tail == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">list</span>-&gt;head = <span class="built_in">list</span>-&gt;tail = new_node;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">list</span>-&gt;tail-&gt;next = new_node;</span><br><span class="line">        <span class="built_in">list</span>-&gt;tail = new_node;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">list</span>-&gt;size++;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">list_pop_front</span><span class="params">(LinkedList* <span class="built_in">list</span>, <span class="type">void</span>* data)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">list</span> == <span class="literal">NULL</span> || <span class="built_in">list</span>-&gt;head == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    ListNode* to_remove = <span class="built_in">list</span>-&gt;head;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (data != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(data, to_remove-&gt;data, <span class="built_in">list</span>-&gt;element_size);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">list</span>-&gt;head = <span class="built_in">list</span>-&gt;head-&gt;next;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">list</span>-&gt;head == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">list</span>-&gt;tail = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    destroy_node(to_remove);</span><br><span class="line">    <span class="built_in">list</span>-&gt;size--;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">list_clear</span><span class="params">(LinkedList* <span class="built_in">list</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">list</span> == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    ListNode* current = <span class="built_in">list</span>-&gt;head;</span><br><span class="line">    <span class="keyword">while</span> (current != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        ListNode* next = current-&gt;next;</span><br><span class="line">        destroy_node(current);</span><br><span class="line">        current = next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">list</span>-&gt;head = <span class="built_in">list</span>-&gt;tail = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">list</span>-&gt;size = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> <span class="title function_">list_size</span><span class="params">(<span class="type">const</span> LinkedList* <span class="built_in">list</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span> ? <span class="built_in">list</span>-&gt;size : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">list_empty</span><span class="params">(<span class="type">const</span> LinkedList* <span class="built_in">list</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span> ? <span class="built_in">list</span>-&gt;size == <span class="number">0</span> : <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 迭代器实现</span></span><br><span class="line">ListIterator <span class="title function_">list_begin</span><span class="params">(<span class="type">const</span> LinkedList* <span class="built_in">list</span>)</span> &#123;</span><br><span class="line">    ListIterator iter = &#123;<span class="built_in">list</span> ? <span class="built_in">list</span>-&gt;head : <span class="literal">NULL</span>&#125;;</span><br><span class="line">    <span class="keyword">return</span> iter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">list_iterator_valid</span><span class="params">(<span class="type">const</span> ListIterator* iter)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> iter &amp;&amp; iter-&gt;current != <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">list_iterator_next</span><span class="params">(ListIterator* iter)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (iter &amp;&amp; iter-&gt;current) &#123;</span><br><span class="line">        iter-&gt;current = iter-&gt;current-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span>* <span class="title function_">list_iterator_data</span><span class="params">(<span class="type">const</span> ListIterator* iter)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (iter &amp;&amp; iter-&gt;current) ? iter-&gt;current-&gt;data : <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-哈希表实现"><a href="#3-哈希表实现" class="headerlink" title="3. 哈希表实现"></a>3. 哈希表实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hash_table.h - 哈希表头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> HASH_TABLE_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HASH_TABLE_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">HashEntry</span> &#123;</span></span><br><span class="line">    <span class="type">void</span>* key;</span><br><span class="line">    <span class="type">void</span>* value;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">HashEntry</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125; HashEntry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    HashEntry** buckets;</span><br><span class="line">    <span class="type">size_t</span> bucket_count;</span><br><span class="line">    <span class="type">size_t</span> size;</span><br><span class="line">    <span class="type">size_t</span> key_size;</span><br><span class="line">    <span class="type">size_t</span> value_size;</span><br><span class="line">    <span class="type">size_t</span> (*hash_func)(<span class="type">const</span> <span class="type">void</span>* key, <span class="type">size_t</span> key_size);</span><br><span class="line">    <span class="type">int</span> (*compare_func)(<span class="type">const</span> <span class="type">void</span>* key1, <span class="type">const</span> <span class="type">void</span>* key2, <span class="type">size_t</span> key_size);</span><br><span class="line">&#125; HashTable;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基本操作</span></span><br><span class="line">HashTable* <span class="title function_">hash_table_create</span><span class="params">(<span class="type">size_t</span> key_size, <span class="type">size_t</span> value_size,</span></span><br><span class="line"><span class="params">                            <span class="type">size_t</span> (*hash_func)(<span class="type">const</span> <span class="type">void</span>*, <span class="type">size_t</span>),</span></span><br><span class="line"><span class="params">                            <span class="type">int</span> (*compare_func)(<span class="type">const</span> <span class="type">void</span>*, <span class="type">const</span> <span class="type">void</span>*, <span class="type">size_t</span>))</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">hash_table_destroy</span><span class="params">(HashTable* table)</span>;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">hash_table_insert</span><span class="params">(HashTable* table, <span class="type">const</span> <span class="type">void</span>* key, <span class="type">const</span> <span class="type">void</span>* value)</span>;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">hash_table_get</span><span class="params">(<span class="type">const</span> HashTable* table, <span class="type">const</span> <span class="type">void</span>* key, <span class="type">void</span>* value)</span>;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">hash_table_remove</span><span class="params">(HashTable* table, <span class="type">const</span> <span class="type">void</span>* key)</span>;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">hash_table_contains</span><span class="params">(<span class="type">const</span> HashTable* table, <span class="type">const</span> <span class="type">void</span>* key)</span>;</span><br><span class="line"><span class="type">size_t</span> <span class="title function_">hash_table_size</span><span class="params">(<span class="type">const</span> HashTable* table)</span>;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">hash_table_empty</span><span class="params">(<span class="type">const</span> HashTable* table)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认哈希函数</span></span><br><span class="line"><span class="type">size_t</span> <span class="title function_">hash_string</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* key, <span class="type">size_t</span> key_size)</span>;</span><br><span class="line"><span class="type">size_t</span> <span class="title function_">hash_int</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* key, <span class="type">size_t</span> key_size)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认比较函数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">compare_string</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* key1, <span class="type">const</span> <span class="type">void</span>* key2, <span class="type">size_t</span> key_size)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">compare_int</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* key1, <span class="type">const</span> <span class="type">void</span>* key2, <span class="type">size_t</span> key_size)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// HASH_TABLE_H</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hash_table.c - 哈希表实现</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;hash_table.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEFAULT_BUCKET_COUNT 16</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOAD_FACTOR_THRESHOLD 0.75</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> HashEntry* <span class="title function_">create_entry</span><span class="params">(<span class="type">size_t</span> key_size, <span class="type">size_t</span> value_size,</span></span><br><span class="line"><span class="params">                              <span class="type">const</span> <span class="type">void</span>* key, <span class="type">const</span> <span class="type">void</span>* value)</span> &#123;</span><br><span class="line">    HashEntry* entry = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(HashEntry));</span><br><span class="line">    <span class="keyword">if</span> (entry == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    entry-&gt;key = <span class="built_in">malloc</span>(key_size);</span><br><span class="line">    entry-&gt;value = <span class="built_in">malloc</span>(value_size);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (entry-&gt;key == <span class="literal">NULL</span> || entry-&gt;value == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">free</span>(entry-&gt;key);</span><br><span class="line">        <span class="built_in">free</span>(entry-&gt;value);</span><br><span class="line">        <span class="built_in">free</span>(entry);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">memcpy</span>(entry-&gt;key, key, key_size);</span><br><span class="line">    <span class="built_in">memcpy</span>(entry-&gt;value, value, value_size);</span><br><span class="line">    entry-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> entry;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">destroy_entry</span><span class="params">(HashEntry* entry)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (entry != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">free</span>(entry-&gt;key);</span><br><span class="line">        <span class="built_in">free</span>(entry-&gt;value);</span><br><span class="line">        <span class="built_in">free</span>(entry);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">HashTable* <span class="title function_">hash_table_create</span><span class="params">(<span class="type">size_t</span> key_size, <span class="type">size_t</span> value_size,</span></span><br><span class="line"><span class="params">                            <span class="type">size_t</span> (*hash_func)(<span class="type">const</span> <span class="type">void</span>*, <span class="type">size_t</span>),</span></span><br><span class="line"><span class="params">                            <span class="type">int</span> (*compare_func)(<span class="type">const</span> <span class="type">void</span>*, <span class="type">const</span> <span class="type">void</span>*, <span class="type">size_t</span>))</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (key_size == <span class="number">0</span> || value_size == <span class="number">0</span> || hash_func == <span class="literal">NULL</span> || compare_func == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    HashTable* table = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(HashTable));</span><br><span class="line">    <span class="keyword">if</span> (table == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    table-&gt;buckets = <span class="built_in">calloc</span>(DEFAULT_BUCKET_COUNT, <span class="keyword">sizeof</span>(HashEntry*));</span><br><span class="line">    <span class="keyword">if</span> (table-&gt;buckets == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">free</span>(table);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    table-&gt;bucket_count = DEFAULT_BUCKET_COUNT;</span><br><span class="line">    table-&gt;size = <span class="number">0</span>;</span><br><span class="line">    table-&gt;key_size = key_size;</span><br><span class="line">    table-&gt;value_size = value_size;</span><br><span class="line">    table-&gt;hash_func = hash_func;</span><br><span class="line">    table-&gt;compare_func = compare_func;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> table;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">hash_table_destroy</span><span class="params">(HashTable* table)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (table == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; table-&gt;bucket_count; i++) &#123;</span><br><span class="line">        HashEntry* entry = table-&gt;buckets[i];</span><br><span class="line">        <span class="keyword">while</span> (entry != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            HashEntry* next = entry-&gt;next;</span><br><span class="line">            destroy_entry(entry);</span><br><span class="line">            entry = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">free</span>(table-&gt;buckets);</span><br><span class="line">    <span class="built_in">free</span>(table);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">hash_table_insert</span><span class="params">(HashTable* table, <span class="type">const</span> <span class="type">void</span>* key, <span class="type">const</span> <span class="type">void</span>* value)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (table == <span class="literal">NULL</span> || key == <span class="literal">NULL</span> || value == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">size_t</span> hash = table-&gt;hash_func(key, table-&gt;key_size);</span><br><span class="line">    <span class="type">size_t</span> index = hash % table-&gt;bucket_count;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 检查是否已存在</span></span><br><span class="line">    HashEntry* entry = table-&gt;buckets[index];</span><br><span class="line">    <span class="keyword">while</span> (entry != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (table-&gt;compare_func(entry-&gt;key, key, table-&gt;key_size) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 更新现有值</span></span><br><span class="line">            <span class="built_in">memcpy</span>(entry-&gt;value, value, table-&gt;value_size);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        entry = entry-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建新条目</span></span><br><span class="line">    HashEntry* new_entry = create_entry(table-&gt;key_size, table-&gt;value_size, key, value);</span><br><span class="line">    <span class="keyword">if</span> (new_entry == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    new_entry-&gt;next = table-&gt;buckets[index];</span><br><span class="line">    table-&gt;buckets[index] = new_entry;</span><br><span class="line">    table-&gt;size++;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">hash_table_get</span><span class="params">(<span class="type">const</span> HashTable* table, <span class="type">const</span> <span class="type">void</span>* key, <span class="type">void</span>* value)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (table == <span class="literal">NULL</span> || key == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">size_t</span> hash = table-&gt;hash_func(key, table-&gt;key_size);</span><br><span class="line">    <span class="type">size_t</span> index = hash % table-&gt;bucket_count;</span><br><span class="line">    </span><br><span class="line">    HashEntry* entry = table-&gt;buckets[index];</span><br><span class="line">    <span class="keyword">while</span> (entry != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (table-&gt;compare_func(entry-&gt;key, key, table-&gt;key_size) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (value != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                <span class="built_in">memcpy</span>(value, entry-&gt;value, table-&gt;value_size);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        entry = entry-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> <span class="title function_">hash_table_size</span><span class="params">(<span class="type">const</span> HashTable* table)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> table ? table-&gt;size : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">hash_table_empty</span><span class="params">(<span class="type">const</span> HashTable* table)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> table ? table-&gt;size == <span class="number">0</span> : <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认哈希函数实现</span></span><br><span class="line"><span class="type">size_t</span> <span class="title function_">hash_string</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* key, <span class="type">size_t</span> key_size)</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* str = (<span class="type">const</span> <span class="type">char</span>*)key;</span><br><span class="line">    <span class="type">size_t</span> hash = <span class="number">5381</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; key_size &amp;&amp; str[i] != <span class="string">&#x27;\0&#x27;</span>; i++) &#123;</span><br><span class="line">        hash = ((hash &lt;&lt; <span class="number">5</span>) + hash) + str[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> hash;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> <span class="title function_">hash_int</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* key, <span class="type">size_t</span> key_size)</span> &#123;</span><br><span class="line">    (<span class="type">void</span>)key_size;  <span class="comment">// 未使用参数</span></span><br><span class="line">    <span class="type">int</span> value = *(<span class="type">const</span> <span class="type">int</span>*)key;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">size_t</span>)value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认比较函数实现</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">compare_string</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* key1, <span class="type">const</span> <span class="type">void</span>* key2, <span class="type">size_t</span> key_size)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">strncmp</span>((<span class="type">const</span> <span class="type">char</span>*)key1, (<span class="type">const</span> <span class="type">char</span>*)key2, key_size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">compare_int</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* key1, <span class="type">const</span> <span class="type">void</span>* key2, <span class="type">size_t</span> key_size)</span> &#123;</span><br><span class="line">    (<span class="type">void</span>)key_size;  <span class="comment">// 未使用参数</span></span><br><span class="line">    <span class="type">int</span> a = *(<span class="type">const</span> <span class="type">int</span>*)key1;</span><br><span class="line">    <span class="type">int</span> b = *(<span class="type">const</span> <span class="type">int</span>*)key2;</span><br><span class="line">    <span class="keyword">return</span> (a &gt; b) - (a &lt; b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="（二）数据结构测试程序"><a href="#（二）数据结构测试程序" class="headerlink" title="（二）数据结构测试程序"></a>（二）数据结构测试程序</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test_data_structures.c - 数据结构测试</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;vector.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;linked_list.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;hash_table.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test_vector</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;=== 测试动态数组 ===\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    Vector* vec = vector_create(<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    assert(vec != <span class="literal">NULL</span>);</span><br><span class="line">    assert(vector_empty(vec));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 添加元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        assert(vector_push_back(vec, &amp;i));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    assert(vector_size(vec) == <span class="number">10</span>);</span><br><span class="line">    assert(!vector_empty(vec));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 访问元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; vector_size(vec); i++) &#123;</span><br><span class="line">        <span class="type">int</span>* value = (<span class="type">int</span>*)vector_get(vec, i);</span><br><span class="line">        assert(value != <span class="literal">NULL</span>);</span><br><span class="line">        assert(*value == (<span class="type">int</span>)i);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 修改元素</span></span><br><span class="line">    <span class="type">int</span> new_value = <span class="number">99</span>;</span><br><span class="line">    assert(vector_set(vec, <span class="number">5</span>, &amp;new_value));</span><br><span class="line">    <span class="type">int</span>* modified = (<span class="type">int</span>*)vector_get(vec, <span class="number">5</span>);</span><br><span class="line">    assert(*modified == <span class="number">99</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 删除元素</span></span><br><span class="line">    <span class="type">int</span> popped;</span><br><span class="line">    assert(vector_pop_back(vec, &amp;popped));</span><br><span class="line">    assert(popped == <span class="number">9</span>);</span><br><span class="line">    assert(vector_size(vec) == <span class="number">9</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;动态数组测试通过\n&quot;</span>);</span><br><span class="line">    vector_destroy(vec);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test_linked_list</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n=== 测试链表 ===\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    LinkedList* <span class="built_in">list</span> = list_create(<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    assert(<span class="built_in">list</span> != <span class="literal">NULL</span>);</span><br><span class="line">    assert(list_empty(<span class="built_in">list</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 添加元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        assert(list_push_back(<span class="built_in">list</span>, &amp;i));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">5</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        assert(list_push_front(<span class="built_in">list</span>, &amp;i));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    assert(list_size(<span class="built_in">list</span>) == <span class="number">10</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用迭代器遍历</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;链表内容: &quot;</span>);</span><br><span class="line">    ListIterator iter = list_begin(<span class="built_in">list</span>);</span><br><span class="line">    <span class="keyword">while</span> (list_iterator_valid(&amp;iter)) &#123;</span><br><span class="line">        <span class="type">int</span>* value = (<span class="type">int</span>*)list_iterator_data(&amp;iter);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, *value);</span><br><span class="line">        list_iterator_next(&amp;iter);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 删除元素</span></span><br><span class="line">    <span class="type">int</span> front_value, back_value;</span><br><span class="line">    assert(list_pop_front(<span class="built_in">list</span>, &amp;front_value));</span><br><span class="line">    assert(list_pop_back(<span class="built_in">list</span>, &amp;back_value));</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;删除的元素: 前=%d, 后=%d\n&quot;</span>, front_value, back_value);</span><br><span class="line">    assert(list_size(<span class="built_in">list</span>) == <span class="number">8</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;链表测试通过\n&quot;</span>);</span><br><span class="line">    list_destroy(<span class="built_in">list</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test_hash_table</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n=== 测试哈希表 ===\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    HashTable* table = hash_table_create(<span class="keyword">sizeof</span>(<span class="type">char</span>*), <span class="keyword">sizeof</span>(<span class="type">int</span>),</span><br><span class="line">                                        hash_string, compare_string);</span><br><span class="line">    assert(table != <span class="literal">NULL</span>);</span><br><span class="line">    assert(hash_table_empty(table));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 插入键值对</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* keys[] = &#123;<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>, <span class="string">&quot;date&quot;</span>, <span class="string">&quot;elderberry&quot;</span>&#125;;</span><br><span class="line">    <span class="type">int</span> values[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        assert(hash_table_insert(table, &amp;keys[i], &amp;values[i]));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    assert(hash_table_size(table) == <span class="number">5</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 查找值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="type">int</span> retrieved_value;</span><br><span class="line">        assert(hash_table_get(table, &amp;keys[i], &amp;retrieved_value));</span><br><span class="line">        assert(retrieved_value == values[i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;键 &#x27;%s&#x27; -&gt; 值 %d\n&quot;</span>, keys[i], retrieved_value);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 测试不存在的键</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* nonexistent = <span class="string">&quot;grape&quot;</span>;</span><br><span class="line">    assert(!hash_table_contains(table, &amp;nonexistent));</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;哈希表测试通过\n&quot;</span>);</span><br><span class="line">    hash_table_destroy(table);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">performance_test</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n=== 性能测试 ===\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> test_size = <span class="number">100000</span>;</span><br><span class="line">    <span class="type">clock_t</span> start, end;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Vector性能测试</span></span><br><span class="line">    start = clock();</span><br><span class="line">    Vector* vec = vector_create(<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; test_size; i++) &#123;</span><br><span class="line">        vector_push_back(vec, &amp;i);</span><br><span class="line">    &#125;</span><br><span class="line">    end = clock();</span><br><span class="line">    </span><br><span class="line">    <span class="type">double</span> vector_time = ((<span class="type">double</span>)(end - start)) / CLOCKS_PER_SEC;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Vector插入%d个元素耗时: %.4f秒\n&quot;</span>, test_size, vector_time);</span><br><span class="line">    vector_destroy(vec);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// LinkedList性能测试</span></span><br><span class="line">    start = clock();</span><br><span class="line">    LinkedList* <span class="built_in">list</span> = list_create(<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; test_size; i++) &#123;</span><br><span class="line">        list_push_back(<span class="built_in">list</span>, &amp;i);</span><br><span class="line">    &#125;</span><br><span class="line">    end = clock();</span><br><span class="line">    </span><br><span class="line">    <span class="type">double</span> list_time = ((<span class="type">double</span>)(end - start)) / CLOCKS_PER_SEC;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;LinkedList插入%d个元素耗时: %.4f秒\n&quot;</span>, test_size, list_time);</span><br><span class="line">    list_destroy(<span class="built_in">list</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Vector比LinkedList快 %.2f倍\n&quot;</span>, list_time / vector_time);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;数据结构库测试程序\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;==================\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    test_vector();</span><br><span class="line">    test_linked_list();</span><br><span class="line">    test_hash_table();</span><br><span class="line">    performance_test();</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n所有测试通过！\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="二、算法实现项目"><a href="#二、算法实现项目" class="headerlink" title="二、算法实现项目"></a>二、算法实现项目</h1><h2 id="（一）排序算法集合"><a href="#（一）排序算法集合" class="headerlink" title="（一）排序算法集合"></a>（一）排序算法集合</h2><h3 id="1-经典排序算法实现"><a href="#1-经典排序算法实现" class="headerlink" title="1. 经典排序算法实现"></a>1. 经典排序算法实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sorting.h - 排序算法头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> SORTING_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SORTING_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stddef.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 排序算法函数指针类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">void</span> <span class="params">(*<span class="type">sort_func_t</span>)</span><span class="params">(<span class="type">void</span>* <span class="built_in">array</span>, <span class="type">size_t</span> count, <span class="type">size_t</span> element_size,</span></span><br><span class="line"><span class="params">                           <span class="type">int</span> (*compare)(<span class="type">const</span> <span class="type">void</span>*, <span class="type">const</span> <span class="type">void</span>*))</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 排序算法</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">bubble_sort</span><span class="params">(<span class="type">void</span>* <span class="built_in">array</span>, <span class="type">size_t</span> count, <span class="type">size_t</span> element_size,</span></span><br><span class="line"><span class="params">                <span class="type">int</span> (*compare)(<span class="type">const</span> <span class="type">void</span>*, <span class="type">const</span> <span class="type">void</span>*))</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">selection_sort</span><span class="params">(<span class="type">void</span>* <span class="built_in">array</span>, <span class="type">size_t</span> count, <span class="type">size_t</span> element_size,</span></span><br><span class="line"><span class="params">                   <span class="type">int</span> (*compare)(<span class="type">const</span> <span class="type">void</span>*, <span class="type">const</span> <span class="type">void</span>*))</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">insertion_sort</span><span class="params">(<span class="type">void</span>* <span class="built_in">array</span>, <span class="type">size_t</span> count, <span class="type">size_t</span> element_size,</span></span><br><span class="line"><span class="params">                   <span class="type">int</span> (*compare)(<span class="type">const</span> <span class="type">void</span>*, <span class="type">const</span> <span class="type">void</span>*))</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">merge_sort</span><span class="params">(<span class="type">void</span>* <span class="built_in">array</span>, <span class="type">size_t</span> count, <span class="type">size_t</span> element_size,</span></span><br><span class="line"><span class="params">               <span class="type">int</span> (*compare)(<span class="type">const</span> <span class="type">void</span>*, <span class="type">const</span> <span class="type">void</span>*))</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">quick_sort</span><span class="params">(<span class="type">void</span>* <span class="built_in">array</span>, <span class="type">size_t</span> count, <span class="type">size_t</span> element_size,</span></span><br><span class="line"><span class="params">               <span class="type">int</span> (*compare)(<span class="type">const</span> <span class="type">void</span>*, <span class="type">const</span> <span class="type">void</span>*))</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">heap_sort</span><span class="params">(<span class="type">void</span>* <span class="built_in">array</span>, <span class="type">size_t</span> count, <span class="type">size_t</span> element_size,</span></span><br><span class="line"><span class="params">              <span class="type">int</span> (*compare)(<span class="type">const</span> <span class="type">void</span>*, <span class="type">const</span> <span class="type">void</span>*))</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 搜索算法</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">linear_search</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* <span class="built_in">array</span>, <span class="type">size_t</span> count, <span class="type">size_t</span> element_size,</span></span><br><span class="line"><span class="params">                 <span class="type">const</span> <span class="type">void</span>* key, <span class="type">int</span> (*compare)(<span class="type">const</span> <span class="type">void</span>*, <span class="type">const</span> <span class="type">void</span>*))</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">binary_search</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* <span class="built_in">array</span>, <span class="type">size_t</span> count, <span class="type">size_t</span> element_size,</span></span><br><span class="line"><span class="params">                 <span class="type">const</span> <span class="type">void</span>* key, <span class="type">int</span> (*compare)(<span class="type">const</span> <span class="type">void</span>*, <span class="type">const</span> <span class="type">void</span>*))</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 工具函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap_elements</span><span class="params">(<span class="type">void</span>* a, <span class="type">void</span>* b, <span class="type">size_t</span> element_size)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">compare_int</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* a, <span class="type">const</span> <span class="type">void</span>* b)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">compare_double</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* a, <span class="type">const</span> <span class="type">void</span>* b)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">compare_string</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* a, <span class="type">const</span> <span class="type">void</span>* b)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 性能测试</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">benchmark_sorting_algorithms</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// SORTING_H</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sorting.c - 排序算法实现</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;sorting.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap_elements</span><span class="params">(<span class="type">void</span>* a, <span class="type">void</span>* b, <span class="type">size_t</span> element_size)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (a == b) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">char</span>* temp = <span class="built_in">malloc</span>(element_size);</span><br><span class="line">    <span class="keyword">if</span> (temp == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">memcpy</span>(temp, a, element_size);</span><br><span class="line">    <span class="built_in">memcpy</span>(a, b, element_size);</span><br><span class="line">    <span class="built_in">memcpy</span>(b, temp, element_size);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">free</span>(temp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 冒泡排序</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">bubble_sort</span><span class="params">(<span class="type">void</span>* <span class="built_in">array</span>, <span class="type">size_t</span> count, <span class="type">size_t</span> element_size,</span></span><br><span class="line"><span class="params">                <span class="type">int</span> (*compare)(<span class="type">const</span> <span class="type">void</span>*, <span class="type">const</span> <span class="type">void</span>*))</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">array</span> == <span class="literal">NULL</span> || count &lt;= <span class="number">1</span> || compare == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">char</span>* arr = (<span class="type">char</span>*)<span class="built_in">array</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; count - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="type">bool</span> swapped = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">0</span>; j &lt; count - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">            <span class="type">void</span>* elem1 = arr + j * element_size;</span><br><span class="line">            <span class="type">void</span>* elem2 = arr + (j + <span class="number">1</span>) * element_size;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (compare(elem1, elem2) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                swap_elements(elem1, elem2, element_size);</span><br><span class="line">                swapped = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!swapped) <span class="keyword">break</span>;  <span class="comment">// 优化：如果没有交换，数组已排序</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择排序</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">selection_sort</span><span class="params">(<span class="type">void</span>* <span class="built_in">array</span>, <span class="type">size_t</span> count, <span class="type">size_t</span> element_size,</span></span><br><span class="line"><span class="params">                   <span class="type">int</span> (*compare)(<span class="type">const</span> <span class="type">void</span>*, <span class="type">const</span> <span class="type">void</span>*))</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">array</span> == <span class="literal">NULL</span> || count &lt;= <span class="number">1</span> || compare == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">char</span>* arr = (<span class="type">char</span>*)<span class="built_in">array</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; count - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="type">size_t</span> min_idx = i;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> j = i + <span class="number">1</span>; j &lt; count; j++) &#123;</span><br><span class="line">            <span class="type">void</span>* elem_j = arr + j * element_size;</span><br><span class="line">            <span class="type">void</span>* elem_min = arr + min_idx * element_size;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (compare(elem_j, elem_min) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                min_idx = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (min_idx != i) &#123;</span><br><span class="line">            <span class="type">void</span>* elem_i = arr + i * element_size;</span><br><span class="line">            <span class="type">void</span>* elem_min = arr + min_idx * element_size;</span><br><span class="line">            swap_elements(elem_i, elem_min, element_size);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入排序</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">insertion_sort</span><span class="params">(<span class="type">void</span>* <span class="built_in">array</span>, <span class="type">size_t</span> count, <span class="type">size_t</span> element_size,</span></span><br><span class="line"><span class="params">                   <span class="type">int</span> (*compare)(<span class="type">const</span> <span class="type">void</span>*, <span class="type">const</span> <span class="type">void</span>*))</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">array</span> == <span class="literal">NULL</span> || count &lt;= <span class="number">1</span> || compare == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">char</span>* arr = (<span class="type">char</span>*)<span class="built_in">array</span>;</span><br><span class="line">    <span class="type">char</span>* temp = <span class="built_in">malloc</span>(element_size);</span><br><span class="line">    <span class="keyword">if</span> (temp == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">1</span>; i &lt; count; i++) &#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(temp, arr + i * element_size, element_size);</span><br><span class="line">        </span><br><span class="line">        <span class="type">size_t</span> j = i;</span><br><span class="line">        <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; compare(arr + (j - <span class="number">1</span>) * element_size, temp) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">memcpy</span>(arr + j * element_size, arr + (j - <span class="number">1</span>) * element_size, element_size);</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">memcpy</span>(arr + j * element_size, temp, element_size);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">free</span>(temp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 归并排序辅助函数</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">void</span>* <span class="built_in">array</span>, <span class="type">size_t</span> left, <span class="type">size_t</span> mid, <span class="type">size_t</span> right,</span></span><br><span class="line"><span class="params">                 <span class="type">size_t</span> element_size, <span class="type">int</span> (*compare)(<span class="type">const</span> <span class="type">void</span>*, <span class="type">const</span> <span class="type">void</span>*))</span> &#123;</span><br><span class="line">    <span class="type">char</span>* arr = (<span class="type">char</span>*)<span class="built_in">array</span>;</span><br><span class="line">    <span class="type">size_t</span> left_size = mid - left + <span class="number">1</span>;</span><br><span class="line">    <span class="type">size_t</span> right_size = right - mid;</span><br><span class="line">    </span><br><span class="line">    <span class="type">char</span>* left_array = <span class="built_in">malloc</span>(left_size * element_size);</span><br><span class="line">    <span class="type">char</span>* right_array = <span class="built_in">malloc</span>(right_size * element_size);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (left_array == <span class="literal">NULL</span> || right_array == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">free</span>(left_array);</span><br><span class="line">        <span class="built_in">free</span>(right_array);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">memcpy</span>(left_array, arr + left * element_size, left_size * element_size);</span><br><span class="line">    <span class="built_in">memcpy</span>(right_array, arr + (mid + <span class="number">1</span>) * element_size, right_size * element_size);</span><br><span class="line">    </span><br><span class="line">    <span class="type">size_t</span> i = <span class="number">0</span>, j = <span class="number">0</span>, k = left;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (i &lt; left_size &amp;&amp; j &lt; right_size) &#123;</span><br><span class="line">        <span class="type">void</span>* left_elem = left_array + i * element_size;</span><br><span class="line">        <span class="type">void</span>* right_elem = right_array + j * element_size;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (compare(left_elem, right_elem) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">memcpy</span>(arr + k * element_size, left_elem, element_size);</span><br><span class="line">            i++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">memcpy</span>(arr + k * element_size, right_elem, element_size);</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (i &lt; left_size) &#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(arr + k * element_size, left_array + i * element_size, element_size);</span><br><span class="line">        i++;</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (j &lt; right_size) &#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(arr + k * element_size, right_array + j * element_size, element_size);</span><br><span class="line">        j++;</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">free</span>(left_array);</span><br><span class="line">    <span class="built_in">free</span>(right_array);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">merge_sort_recursive</span><span class="params">(<span class="type">void</span>* <span class="built_in">array</span>, <span class="type">size_t</span> left, <span class="type">size_t</span> right,</span></span><br><span class="line"><span class="params">                                <span class="type">size_t</span> element_size, <span class="type">int</span> (*compare)(<span class="type">const</span> <span class="type">void</span>*, <span class="type">const</span> <span class="type">void</span>*))</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="type">size_t</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        </span><br><span class="line">        merge_sort_recursive(<span class="built_in">array</span>, left, mid, element_size, compare);</span><br><span class="line">        merge_sort_recursive(<span class="built_in">array</span>, mid + <span class="number">1</span>, right, element_size, compare);</span><br><span class="line">        merge(<span class="built_in">array</span>, left, mid, right, element_size, compare);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 归并排序</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">merge_sort</span><span class="params">(<span class="type">void</span>* <span class="built_in">array</span>, <span class="type">size_t</span> count, <span class="type">size_t</span> element_size,</span></span><br><span class="line"><span class="params">               <span class="type">int</span> (*compare)(<span class="type">const</span> <span class="type">void</span>*, <span class="type">const</span> <span class="type">void</span>*))</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">array</span> == <span class="literal">NULL</span> || count &lt;= <span class="number">1</span> || compare == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    merge_sort_recursive(<span class="built_in">array</span>, <span class="number">0</span>, count - <span class="number">1</span>, element_size, compare);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 比较函数实现</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">compare_int</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* a, <span class="type">const</span> <span class="type">void</span>* b)</span> &#123;</span><br><span class="line">    <span class="type">int</span> ia = *(<span class="type">const</span> <span class="type">int</span>*)a;</span><br><span class="line">    <span class="type">int</span> ib = *(<span class="type">const</span> <span class="type">int</span>*)b;</span><br><span class="line">    <span class="keyword">return</span> (ia &gt; ib) - (ia &lt; ib);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">compare_double</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* a, <span class="type">const</span> <span class="type">void</span>* b)</span> &#123;</span><br><span class="line">    <span class="type">double</span> da = *(<span class="type">const</span> <span class="type">double</span>*)a;</span><br><span class="line">    <span class="type">double</span> db = *(<span class="type">const</span> <span class="type">double</span>*)b;</span><br><span class="line">    <span class="keyword">return</span> (da &gt; db) - (da &lt; db);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">compare_string</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* a, <span class="type">const</span> <span class="type">void</span>* b)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">strcmp</span>(*(<span class="type">const</span> <span class="type">char</span>**)a, *(<span class="type">const</span> <span class="type">char</span>**)b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 线性搜索</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">linear_search</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* <span class="built_in">array</span>, <span class="type">size_t</span> count, <span class="type">size_t</span> element_size,</span></span><br><span class="line"><span class="params">                 <span class="type">const</span> <span class="type">void</span>* key, <span class="type">int</span> (*compare)(<span class="type">const</span> <span class="type">void</span>*, <span class="type">const</span> <span class="type">void</span>*))</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">array</span> == <span class="literal">NULL</span> || key == <span class="literal">NULL</span> || compare == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* arr = (<span class="type">const</span> <span class="type">char</span>*)<span class="built_in">array</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (compare(arr + i * element_size, key) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="type">int</span>)i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二分搜索</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">binary_search</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* <span class="built_in">array</span>, <span class="type">size_t</span> count, <span class="type">size_t</span> element_size,</span></span><br><span class="line"><span class="params">                 <span class="type">const</span> <span class="type">void</span>* key, <span class="type">int</span> (*compare)(<span class="type">const</span> <span class="type">void</span>*, <span class="type">const</span> <span class="type">void</span>*))</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">array</span> == <span class="literal">NULL</span> || key == <span class="literal">NULL</span> || compare == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* arr = (<span class="type">const</span> <span class="type">char</span>*)<span class="built_in">array</span>;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> right = (<span class="type">int</span>)count - <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="type">const</span> <span class="type">void</span>* mid_elem = arr + mid * element_size;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> cmp = compare(mid_elem, key);</span><br><span class="line">        <span class="keyword">if</span> (cmp == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-算法性能测试"><a href="#2-算法性能测试" class="headerlink" title="2. 算法性能测试"></a>2. 算法性能测试</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// algorithm_benchmark.c - 算法性能测试</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;sorting.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* name;</span><br><span class="line">    <span class="type">sort_func_t</span> function;</span><br><span class="line">&#125; SortAlgorithm;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成测试数据</span></span><br><span class="line"><span class="type">int</span>* <span class="title function_">generate_random_array</span><span class="params">(<span class="type">size_t</span> count, <span class="type">int</span> max_value)</span> &#123;</span><br><span class="line">    <span class="type">int</span>* <span class="built_in">array</span> = <span class="built_in">malloc</span>(count * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">array</span> == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">        <span class="built_in">array</span>[i] = rand() % max_value;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">array</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>* <span class="title function_">generate_sorted_array</span><span class="params">(<span class="type">size_t</span> count)</span> &#123;</span><br><span class="line">    <span class="type">int</span>* <span class="built_in">array</span> = <span class="built_in">malloc</span>(count * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">array</span> == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">        <span class="built_in">array</span>[i] = (<span class="type">int</span>)i;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">array</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>* <span class="title function_">generate_reverse_sorted_array</span><span class="params">(<span class="type">size_t</span> count)</span> &#123;</span><br><span class="line">    <span class="type">int</span>* <span class="built_in">array</span> = <span class="built_in">malloc</span>(count * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">array</span> == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">        <span class="built_in">array</span>[i] = (<span class="type">int</span>)(count - <span class="number">1</span> - i);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">array</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证数组是否已排序</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">is_sorted</span><span class="params">(<span class="type">const</span> <span class="type">int</span>* <span class="built_in">array</span>, <span class="type">size_t</span> count)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">1</span>; i &lt; count; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">array</span>[i] &lt; <span class="built_in">array</span>[i - <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试单个排序算法</span></span><br><span class="line"><span class="type">double</span> <span class="title function_">test_sort_algorithm</span><span class="params">(<span class="type">sort_func_t</span> sort_func, <span class="type">int</span>* <span class="built_in">array</span>, <span class="type">size_t</span> count)</span> &#123;</span><br><span class="line">    <span class="type">clock_t</span> start = clock();</span><br><span class="line">    sort_func(<span class="built_in">array</span>, count, <span class="keyword">sizeof</span>(<span class="type">int</span>), compare_int);</span><br><span class="line">    <span class="type">clock_t</span> end = clock();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> ((<span class="type">double</span>)(end - start)) / CLOCKS_PER_SEC;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">benchmark_sorting_algorithms</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;=== 排序算法性能测试 ===\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    SortAlgorithm algorithms[] = &#123;</span><br><span class="line">        &#123;<span class="string">&quot;冒泡排序&quot;</span>, bubble_sort&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;选择排序&quot;</span>, selection_sort&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;插入排序&quot;</span>, insertion_sort&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;归并排序&quot;</span>, merge_sort&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;快速排序&quot;</span>, quick_sort&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;堆排序&quot;</span>, heap_sort&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="type">size_t</span> algorithm_count = <span class="keyword">sizeof</span>(algorithms) / <span class="keyword">sizeof</span>(algorithms[<span class="number">0</span>]);</span><br><span class="line">    <span class="type">size_t</span> test_sizes[] = &#123;<span class="number">1000</span>, <span class="number">5000</span>, <span class="number">10000</span>&#125;;</span><br><span class="line">    <span class="type">size_t</span> size_count = <span class="keyword">sizeof</span>(test_sizes) / <span class="keyword">sizeof</span>(test_sizes[<span class="number">0</span>]);</span><br><span class="line">    </span><br><span class="line">    srand((<span class="type">unsigned</span> <span class="type">int</span>)time(<span class="literal">NULL</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> s = <span class="number">0</span>; s &lt; size_count; s++) &#123;</span><br><span class="line">        <span class="type">size_t</span> test_size = test_sizes[s];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n测试数据大小: %zu\n&quot;</span>, test_size);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%-12s %-12s %-12s %-12s\n&quot;</span>, <span class="string">&quot;算法&quot;</span>, <span class="string">&quot;随机数据&quot;</span>, <span class="string">&quot;已排序&quot;</span>, <span class="string">&quot;逆序&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;--------------------------------------------------------\n&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> a = <span class="number">0</span>; a &lt; algorithm_count; a++) &#123;</span><br><span class="line">            <span class="comment">// 跳过大数据量的慢速算法</span></span><br><span class="line">            <span class="keyword">if</span> (test_size &gt; <span class="number">5000</span> &amp;&amp; (a == <span class="number">0</span> || a == <span class="number">1</span>)) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%-12s %-12s %-12s %-12s\n&quot;</span>, </span><br><span class="line">                       algorithms[a].name, <span class="string">&quot;跳过&quot;</span>, <span class="string">&quot;跳过&quot;</span>, <span class="string">&quot;跳过&quot;</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="type">double</span> times[<span class="number">3</span>];</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 测试随机数据</span></span><br><span class="line">            <span class="type">int</span>* random_array = generate_random_array(test_size, <span class="number">10000</span>);</span><br><span class="line">            times[<span class="number">0</span>] = test_sort_algorithm(algorithms[a].function, random_array, test_size);</span><br><span class="line">            assert(is_sorted(random_array, test_size));</span><br><span class="line">            <span class="built_in">free</span>(random_array);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 测试已排序数据</span></span><br><span class="line">            <span class="type">int</span>* sorted_array = generate_sorted_array(test_size);</span><br><span class="line">            times[<span class="number">1</span>] = test_sort_algorithm(algorithms[a].function, sorted_array, test_size);</span><br><span class="line">            assert(is_sorted(sorted_array, test_size));</span><br><span class="line">            <span class="built_in">free</span>(sorted_array);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 测试逆序数据</span></span><br><span class="line">            <span class="type">int</span>* reverse_array = generate_reverse_sorted_array(test_size);</span><br><span class="line">            times[<span class="number">2</span>] = test_sort_algorithm(algorithms[a].function, reverse_array, test_size);</span><br><span class="line">            assert(is_sorted(reverse_array, test_size));</span><br><span class="line">            <span class="built_in">free</span>(reverse_array);</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%-12s %-12.4f %-12.4f %-12.4f\n&quot;</span>, </span><br><span class="line">                   algorithms[a].name, times[<span class="number">0</span>], times[<span class="number">1</span>], times[<span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test_search_algorithms</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n=== 搜索算法测试 ===\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">const</span> <span class="type">size_t</span> test_size = <span class="number">100000</span>;</span><br><span class="line">    <span class="type">int</span>* <span class="built_in">array</span> = generate_sorted_array(test_size);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 测试线性搜索</span></span><br><span class="line">    <span class="type">clock_t</span> start = clock();</span><br><span class="line">    <span class="type">int</span> linear_result = linear_search(<span class="built_in">array</span>, test_size, <span class="keyword">sizeof</span>(<span class="type">int</span>), </span><br><span class="line">                                     &amp;(<span class="type">int</span>)&#123;<span class="number">50000</span>&#125;, compare_int);</span><br><span class="line">    <span class="type">clock_t</span> end = clock();</span><br><span class="line">    <span class="type">double</span> linear_time = ((<span class="type">double</span>)(end - start)) / CLOCKS_PER_SEC;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 测试二分搜索</span></span><br><span class="line">    start = clock();</span><br><span class="line">    <span class="type">int</span> binary_result = binary_search(<span class="built_in">array</span>, test_size, <span class="keyword">sizeof</span>(<span class="type">int</span>), </span><br><span class="line">                                     &amp;(<span class="type">int</span>)&#123;<span class="number">50000</span>&#125;, compare_int);</span><br><span class="line">    end = clock();</span><br><span class="line">    <span class="type">double</span> binary_time = ((<span class="type">double</span>)(end - start)) / CLOCKS_PER_SEC;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;搜索目标: 50000\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;线性搜索: 找到位置 %d, 耗时 %.6f 秒\n&quot;</span>, linear_result, linear_time);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;二分搜索: 找到位置 %d, 耗时 %.6f 秒\n&quot;</span>, binary_result, binary_time);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;二分搜索比线性搜索快 %.0f 倍\n&quot;</span>, linear_time / binary_time);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">free</span>(<span class="built_in">array</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;算法性能测试程序\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;================\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    benchmark_sorting_algorithms();</span><br><span class="line">    test_search_algorithms();</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n测试完成！\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="三、文本处理工具项目"><a href="#三、文本处理工具项目" class="headerlink" title="三、文本处理工具项目"></a>三、文本处理工具项目</h1><h2 id="（一）命令行文本分析器"><a href="#（一）命令行文本分析器" class="headerlink" title="（一）命令行文本分析器"></a>（一）命令行文本分析器</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// text_analyzer.c - 文本分析工具</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_WORD_LENGTH 100</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_WORDS 50000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">char</span> word[MAX_WORD_LENGTH];</span><br><span class="line">    <span class="type">int</span> frequency;</span><br><span class="line">&#125; WordFreq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">char</span>* content;</span><br><span class="line">    <span class="type">size_t</span> length;</span><br><span class="line">    <span class="type">int</span> char_count;</span><br><span class="line">    <span class="type">int</span> word_count;</span><br><span class="line">    <span class="type">int</span> line_count;</span><br><span class="line">    <span class="type">int</span> sentence_count;</span><br><span class="line">    WordFreq* words;</span><br><span class="line">    <span class="type">int</span> unique_words;</span><br><span class="line">&#125; TextStats;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取文件内容</span></span><br><span class="line"><span class="type">char</span>* <span class="title function_">read_file</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* filename, <span class="type">size_t</span>* size)</span> &#123;</span><br><span class="line">    FILE* file = fopen(filename, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (file == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;错误: 无法打开文件 &#x27;%s&#x27;\n&quot;</span>, filename);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    fseek(file, <span class="number">0</span>, SEEK_END);</span><br><span class="line">    <span class="type">long</span> file_size = ftell(file);</span><br><span class="line">    fseek(file, <span class="number">0</span>, SEEK_SET);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (file_size &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;错误: 无法获取文件大小\n&quot;</span>);</span><br><span class="line">        fclose(file);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">char</span>* content = <span class="built_in">malloc</span>(file_size + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (content == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;错误: 内存分配失败\n&quot;</span>);</span><br><span class="line">        fclose(file);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">size_t</span> bytes_read = fread(content, <span class="number">1</span>, file_size, file);</span><br><span class="line">    content[bytes_read] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">    fclose(file);</span><br><span class="line">    *size = bytes_read;</span><br><span class="line">    <span class="keyword">return</span> content;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 标准化单词（转小写，去除标点）</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">normalize_word</span><span class="params">(<span class="type">char</span>* word)</span> &#123;</span><br><span class="line">    <span class="type">int</span> write_pos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; word[i] != <span class="string">&#x27;\0&#x27;</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isalnum</span>(word[i])) &#123;</span><br><span class="line">            word[write_pos++] = <span class="built_in">tolower</span>(word[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    word[write_pos] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加或更新词频</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">add_word</span><span class="params">(TextStats* stats, <span class="type">const</span> <span class="type">char</span>* word)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strlen</span>(word) == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 查找是否已存在</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; stats-&gt;unique_words; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(stats-&gt;words[i].word, word) == <span class="number">0</span>) &#123;</span><br><span class="line">            stats-&gt;words[i].frequency++;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 添加新单词</span></span><br><span class="line">    <span class="keyword">if</span> (stats-&gt;unique_words &lt; MAX_WORDS) &#123;</span><br><span class="line">        <span class="built_in">strncpy</span>(stats-&gt;words[stats-&gt;unique_words].word, word, MAX_WORD_LENGTH - <span class="number">1</span>);</span><br><span class="line">        stats-&gt;words[stats-&gt;unique_words].word[MAX_WORD_LENGTH - <span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        stats-&gt;words[stats-&gt;unique_words].frequency = <span class="number">1</span>;</span><br><span class="line">        stats-&gt;unique_words++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分析文本</span></span><br><span class="line">TextStats* <span class="title function_">analyze_text</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* content, <span class="type">size_t</span> length)</span> &#123;</span><br><span class="line">    TextStats* stats = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(TextStats));</span><br><span class="line">    <span class="keyword">if</span> (stats == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    stats-&gt;content = <span class="built_in">malloc</span>(length + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (stats-&gt;content == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">free</span>(stats);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    stats-&gt;words = <span class="built_in">malloc</span>(MAX_WORDS * <span class="keyword">sizeof</span>(WordFreq));</span><br><span class="line">    <span class="keyword">if</span> (stats-&gt;words == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">free</span>(stats-&gt;content);</span><br><span class="line">        <span class="built_in">free</span>(stats);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">strcpy</span>(stats-&gt;content, content);</span><br><span class="line">    stats-&gt;length = length;</span><br><span class="line">    stats-&gt;char_count = <span class="number">0</span>;</span><br><span class="line">    stats-&gt;word_count = <span class="number">0</span>;</span><br><span class="line">    stats-&gt;line_count = <span class="number">0</span>;</span><br><span class="line">    stats-&gt;sentence_count = <span class="number">0</span>;</span><br><span class="line">    stats-&gt;unique_words = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">char</span> current_word[MAX_WORD_LENGTH] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> word_pos = <span class="number">0</span>;</span><br><span class="line">    <span class="type">bool</span> in_word = <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt;= length; i++) &#123;</span><br><span class="line">        <span class="type">char</span> c = (i &lt; length) ? content[i] : <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 字符计数</span></span><br><span class="line">        <span class="keyword">if</span> (i &lt; length &amp;&amp; !<span class="built_in">isspace</span>(c)) &#123;</span><br><span class="line">            stats-&gt;char_count++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 行计数</span></span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;\n&#x27;</span>) &#123;</span><br><span class="line">            stats-&gt;line_count++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 句子计数</span></span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;.&#x27;</span> || c == <span class="string">&#x27;!&#x27;</span> || c == <span class="string">&#x27;?&#x27;</span>) &#123;</span><br><span class="line">            stats-&gt;sentence_count++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 单词处理</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isalnum</span>(c) &amp;&amp; word_pos &lt; MAX_WORD_LENGTH - <span class="number">1</span>) &#123;</span><br><span class="line">            current_word[word_pos++] = c;</span><br><span class="line">            in_word = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (in_word) &#123;</span><br><span class="line">                current_word[word_pos] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">                normalize_word(current_word);</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">strlen</span>(current_word) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    add_word(stats, current_word);</span><br><span class="line">                    stats-&gt;word_count++;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                word_pos = <span class="number">0</span>;</span><br><span class="line">                in_word = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果文本不以换行符结尾，行数加1</span></span><br><span class="line">    <span class="keyword">if</span> (length &gt; <span class="number">0</span> &amp;&amp; content[length - <span class="number">1</span>] != <span class="string">&#x27;\n&#x27;</span>) &#123;</span><br><span class="line">        stats-&gt;line_count++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> stats;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 词频排序比较函数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">compare_word_freq</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* a, <span class="type">const</span> <span class="type">void</span>* b)</span> &#123;</span><br><span class="line">    <span class="type">const</span> WordFreq* wa = (<span class="type">const</span> WordFreq*)a;</span><br><span class="line">    <span class="type">const</span> WordFreq* wb = (<span class="type">const</span> WordFreq*)b;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (wa-&gt;frequency != wb-&gt;frequency) &#123;</span><br><span class="line">        <span class="keyword">return</span> wb-&gt;frequency - wa-&gt;frequency;  <span class="comment">// 降序</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">strcmp</span>(wa-&gt;word, wb-&gt;word);  <span class="comment">// 字母顺序</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印统计结果</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_statistics</span><span class="params">(<span class="type">const</span> TextStats* stats, <span class="type">bool</span> show_words, <span class="type">int</span> top_words)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;=== 文本统计结果 ===\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;字符数: %d\n&quot;</span>, stats-&gt;char_count);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;单词数: %d\n&quot;</span>, stats-&gt;word_count);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;行数: %d\n&quot;</span>, stats-&gt;line_count);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;句子数: %d\n&quot;</span>, stats-&gt;sentence_count);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;唯一单词数: %d\n&quot;</span>, stats-&gt;unique_words);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (stats-&gt;word_count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;平均单词长度: %.2f\n&quot;</span>, </span><br><span class="line">               (<span class="type">double</span>)stats-&gt;char_count / stats-&gt;word_count);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (show_words &amp;&amp; stats-&gt;unique_words &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 复制并排序词频数据</span></span><br><span class="line">        WordFreq* sorted_words = <span class="built_in">malloc</span>(stats-&gt;unique_words * <span class="keyword">sizeof</span>(WordFreq));</span><br><span class="line">        <span class="keyword">if</span> (sorted_words != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">memcpy</span>(sorted_words, stats-&gt;words, stats-&gt;unique_words * <span class="keyword">sizeof</span>(WordFreq));</span><br><span class="line">            qsort(sorted_words, stats-&gt;unique_words, <span class="keyword">sizeof</span>(WordFreq), compare_word_freq);</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n=== 词频统计 (前%d个) ===\n&quot;</span>, top_words);</span><br><span class="line">            <span class="type">int</span> display_count = (stats-&gt;unique_words &lt; top_words) ? </span><br><span class="line">                               stats-&gt;unique_words : top_words;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; display_count; i++) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%3d. %-20s %d次\n&quot;</span>, </span><br><span class="line">                       i + <span class="number">1</span>, sorted_words[i].word, sorted_words[i].frequency);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">free</span>(sorted_words);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放统计数据</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">free_text_stats</span><span class="params">(TextStats* stats)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (stats != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">free</span>(stats-&gt;content);</span><br><span class="line">        <span class="built_in">free</span>(stats-&gt;words);</span><br><span class="line">        <span class="built_in">free</span>(stats);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示帮助信息</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">show_help</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* program_name)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;用法: %s [选项] &lt;文件名&gt;\n&quot;</span>, program_name);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;选项:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  -w, --words     显示词频统计\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  -t, --top N     显示前N个高频词 (默认: 20)\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  -h, --help      显示此帮助信息\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;示例:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  %s document.txt\n&quot;</span>, program_name);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  %s -w -t 10 document.txt\n&quot;</span>, program_name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (argc &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        show_help(argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">bool</span> show_words = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">int</span> top_words = <span class="number">20</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* filename = <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 解析命令行参数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; argc; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(argv[i], <span class="string">&quot;-h&quot;</span>) == <span class="number">0</span> || <span class="built_in">strcmp</span>(argv[i], <span class="string">&quot;--help&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            show_help(argv[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(argv[i], <span class="string">&quot;-w&quot;</span>) == <span class="number">0</span> || <span class="built_in">strcmp</span>(argv[i], <span class="string">&quot;--words&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            show_words = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(argv[i], <span class="string">&quot;-t&quot;</span>) == <span class="number">0</span> || <span class="built_in">strcmp</span>(argv[i], <span class="string">&quot;--top&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i + <span class="number">1</span> &lt; argc) &#123;</span><br><span class="line">                top_words = atoi(argv[++i]);</span><br><span class="line">                <span class="keyword">if</span> (top_words &lt;= <span class="number">0</span>) top_words = <span class="number">20</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (argv[i][<span class="number">0</span>] != <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">            filename = argv[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (filename == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;错误: 请指定要分析的文件\n&quot;</span>);</span><br><span class="line">        show_help(argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 读取和分析文件</span></span><br><span class="line">    <span class="type">size_t</span> file_size;</span><br><span class="line">    <span class="type">char</span>* content = read_file(filename, &amp;file_size);</span><br><span class="line">    <span class="keyword">if</span> (content == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;正在分析文件: %s\n&quot;</span>, filename);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;文件大小: %zu 字节\n\n&quot;</span>, file_size);</span><br><span class="line">    </span><br><span class="line">    TextStats* stats = analyze_text(content, file_size);</span><br><span class="line">    <span class="keyword">if</span> (stats == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;错误: 文本分析失败\n&quot;</span>);</span><br><span class="line">        <span class="built_in">free</span>(content);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    print_statistics(stats, show_words, top_words);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 清理资源</span></span><br><span class="line">    <span class="built_in">free</span>(content);</span><br><span class="line">    free_text_stats(stats);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="四、总结与展望"><a href="#四、总结与展望" class="headerlink" title="四、总结与展望"></a>四、总结与展望</h1><h2 id="（一）系列回顾"><a href="#（一）系列回顾" class="headerlink" title="（一）系列回顾"></a>（一）系列回顾</h2><p>通过这八篇文章的系统学习，我们完成了从C语言入门到项目实战的完整旅程：</p>
<p><strong>基础篇（第1-3篇）：</strong></p>
<ul>
<li>掌握了C语言的基本语法和数据类型</li>
<li>学会了函数设计和模块化编程</li>
<li>深入理解了数组和字符串处理</li>
</ul>
<p><strong>核心篇（第4-6篇）：</strong></p>
<ul>
<li>掌握了指针和内存管理的核心技术</li>
<li>学会了复杂数据类型的组织和使用</li>
<li>掌握了文件操作和数据持久化</li>
</ul>
<p><strong>高级篇（第7-8篇）：</strong></p>
<ul>
<li>探索了C语言的高级特性和现代编程技巧</li>
<li>通过项目实战整合了所有知识点</li>
</ul>
<h2 id="（二）继续学习的方向"><a href="#（二）继续学习的方向" class="headerlink" title="（二）继续学习的方向"></a>（二）继续学习的方向</h2><p><strong>系统编程：</strong></p>
<ul>
<li>操作系统原理和系统调用</li>
<li>网络编程和并发编程</li>
<li>嵌入式系统开发</li>
</ul>
<p><strong>性能优化：</strong></p>
<ul>
<li>算法和数据结构优化</li>
<li>内存管理优化</li>
<li>编译器优化技术</li>
</ul>
<p><strong>工程实践：</strong></p>
<ul>
<li>大型项目的组织和管理</li>
<li>代码质量和测试</li>
<li>跨平台开发</li>
</ul>
<h2 id="（三）实践建议"><a href="#（三）实践建议" class="headerlink" title="（三）实践建议"></a>（三）实践建议</h2><ol>
<li><strong>多写代码</strong>：理论知识需要通过大量实践来巩固</li>
<li><strong>阅读源码</strong>：学习优秀开源项目的代码</li>
<li><strong>参与项目</strong>：加入开源项目或自己发起项目</li>
<li><strong>持续学习</strong>：关注C语言标准的发展和新技术</li>
</ol>
<div class="note success flat"><p><strong>恭喜您完成了C语言系统学习系列！</strong><br>现在您已经具备了扎实的C语言基础，可以开始更高级的编程挑战了。记住，编程是一门实践的艺术，只有不断练习才能真正掌握。</p>
</div>

<hr>
<p><strong>参考资料：</strong></p>
<ul>
<li>《算法导论》- Thomas H. Cormen等</li>
<li>《UNIX环境高级编程》- W. Richard Stevens</li>
<li>《深入理解计算机系统》- Randal E. Bryant</li>
<li>《操作系统概念》- Abraham Silberschatz等</li>
<li>《C语言接口与实现》- David R. Hanson</li>
<li>Linux内核源码：<a href="https://github.com/torvalds/linux">https://github.com/torvalds/linux</a></li>
<li>GNU C库源码：<a href="https://www.gnu.org/software/libc/">https://www.gnu.org/software/libc/</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<div class="note info flat"><p><strong>C语言系统学习系列 - 第8篇（完结篇）</strong><br>通过完整的项目实战，将前面学到的所有知识融会贯通，从算法实现到系统编程，构建真正实用的程序。</p>
</div>

<h1 id="前]]>
    </summary>
    
      <category term="C语言" scheme="https://uwakeme.tech/tags/C%E8%AF%AD%E8%A8%80/"/>
    
      <category term="数据结构" scheme="https://uwakeme.tech/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="项目实战" scheme="https://uwakeme.tech/tags/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/"/>
    
      <category term="算法实现" scheme="https://uwakeme.tech/tags/%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/"/>
    
      <category term="系统编程" scheme="https://uwakeme.tech/tags/%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/"/>
    
      <category term="学习" scheme="https://uwakeme.tech/categories/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[【学习】C语言高级特性与现代编程：提升代码质量]]></title>
    <link href="https://uwakeme.tech/2025/08/11/%E5%AD%A6%E4%B9%A0/%E3%80%90%E5%AD%A6%E4%B9%A0%E3%80%91C%E8%AF%AD%E8%A8%80%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7%E4%B8%8E%E7%8E%B0%E4%BB%A3%E7%BC%96%E7%A8%8B%EF%BC%9A%E6%8F%90%E5%8D%87%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F/"/>
    <id>https://uwakeme.tech/2025/08/11/学习/【学习】C语言高级特性与现代编程：提升代码质量/</id>
    <published>2025-08-11T08:00:00.000Z</published>
    <updated>2025-08-11T07:53:29.592Z</updated>
    <content type="html"><![CDATA[<div class="note info flat"><p><strong>C语言系统学习系列 - 第7篇</strong><br>探索C语言的高级特性和现代编程技巧，学会编写高质量、可维护的专业级代码。</p>
</div>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>经过前面六篇文章的系统学习，您已经掌握了C语言的核心概念和基本技能。现在是时候深入探索C语言的高级特性，学习现代C编程的最佳实践，提升代码质量和开发效率。</p>
<p><strong>现代C语言的发展</strong></p>
<p>C语言并非一成不变，从C89到C99、C11、C18，每个标准都引入了新的特性：</p>
<ul>
<li><strong>C99</strong>：变长数组、内联函数、复数类型、布尔类型</li>
<li><strong>C11</strong>：多线程支持、原子操作、静态断言、匿名结构体</li>
<li><strong>C18</strong>：主要是错误修正和澄清</li>
</ul>
<p><strong>本文学习目标：</strong></p>
<ul>
<li>掌握预处理器的高级用法</li>
<li>学会使用可变参数函数</li>
<li>理解内联函数和编译器优化</li>
<li>掌握现代C语言的新特性</li>
<li>学会代码规范和最佳实践</li>
</ul>
<a class="btn-beautify green" href="/2025/08/10/%E5%AD%A6%E4%B9%A0/%E3%80%90%E5%AD%A6%E4%B9%A0%E3%80%91C%E8%AF%AD%E8%A8%80%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E4%B8%8E%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96%EF%BC%9A%E6%9E%84%E5%BB%BA%E5%AE%9E%E7%94%A8%E7%A8%8B%E5%BA%8F/" title="上一篇：文件操作与数据持久化"><i class="far fa-hand-point-left"></i><span>上一篇：文件操作与数据持久化</span></a>

<h1 id="一、预处理器高级技巧"><a href="#一、预处理器高级技巧" class="headerlink" title="一、预处理器高级技巧"></a>一、预处理器高级技巧</h1><h2 id="（一）宏的高级用法"><a href="#（一）宏的高级用法" class="headerlink" title="（一）宏的高级用法"></a>（一）宏的高级用法</h2><h3 id="1-函数式宏和条件编译"><a href="#1-函数式宏和条件编译" class="headerlink" title="1. 函数式宏和条件编译"></a>1. 函数式宏和条件编译</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调试宏</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> DEBUG</span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> DBG_PRINT(fmt, ...) \</span></span><br><span class="line"><span class="meta">        printf(<span class="string">&quot;[DEBUG] %s:%d: &quot;</span> fmt, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> DBG_PRINT(fmt, ...) ((void)0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 性能测试宏</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BENCHMARK_START(name) \</span></span><br><span class="line"><span class="meta">    do &#123; \</span></span><br><span class="line"><span class="meta">        printf(<span class="string">&quot;开始测试: %s\n&quot;</span>, name); \</span></span><br><span class="line"><span class="meta">        clock_t start_time = clock();</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BENCHMARK_END() \</span></span><br><span class="line"><span class="meta">        clock_t end_time = clock(); \</span></span><br><span class="line"><span class="meta">        double elapsed = ((double)(end_time - start_time)) / CLOCKS_PER_SEC; \</span></span><br><span class="line"><span class="meta">        printf(<span class="string">&quot;测试完成，耗时: %.4f 秒\n&quot;</span>, elapsed); \</span></span><br><span class="line"><span class="meta">    &#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 安全的内存分配宏</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SAFE_MALLOC(ptr, size, type) \</span></span><br><span class="line"><span class="meta">    do &#123; \</span></span><br><span class="line"><span class="meta">        (ptr) = (type*)malloc(size); \</span></span><br><span class="line"><span class="meta">        <span class="keyword">if</span> ((ptr) == NULL) &#123; \</span></span><br><span class="line"><span class="meta">            fprintf(stderr, <span class="string">&quot;内存分配失败: %s:%d\n&quot;</span>, __FILE__, __LINE__); \</span></span><br><span class="line"><span class="meta">            exit(EXIT_FAILURE); \</span></span><br><span class="line"><span class="meta">        &#125; \</span></span><br><span class="line"><span class="meta">        DBG_PRINT(<span class="string">&quot;分配内存: %p, 大小: %zu\n&quot;</span>, (void*)(ptr), (size_t)(size)); \</span></span><br><span class="line"><span class="meta">    &#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SAFE_FREE(ptr) \</span></span><br><span class="line"><span class="meta">    do &#123; \</span></span><br><span class="line"><span class="meta">        <span class="keyword">if</span> ((ptr) != NULL) &#123; \</span></span><br><span class="line"><span class="meta">            DBG_PRINT(<span class="string">&quot;释放内存: %p\n&quot;</span>, (void*)(ptr)); \</span></span><br><span class="line"><span class="meta">            free(ptr); \</span></span><br><span class="line"><span class="meta">            (ptr) = NULL; \</span></span><br><span class="line"><span class="meta">        &#125; \</span></span><br><span class="line"><span class="meta">    &#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组大小宏</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ARRAY_SIZE(arr) (sizeof(arr) / sizeof((arr)[0]))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 最大值和最小值宏（类型安全）</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX(a, b) (&#123; \</span></span><br><span class="line"><span class="meta">    typeof(a) _a = (a); \</span></span><br><span class="line"><span class="meta">    typeof(b) _b = (b); \</span></span><br><span class="line"><span class="meta">    (_a &gt; _b) ? _a : _b; \</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MIN(a, b) (&#123; \</span></span><br><span class="line"><span class="meta">    typeof(a) _a = (a); \</span></span><br><span class="line"><span class="meta">    typeof(b) _b = (b); \</span></span><br><span class="line"><span class="meta">    (_a &lt; _b) ? _a : _b; \</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串化宏</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STRINGIFY(x) #x</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TOSTRING(x) STRINGIFY(x)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接宏</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CONCAT(a, b) a##b</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CONCAT3(a, b, c) a##b##c</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 版本信息宏</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VERSION_MAJOR 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VERSION_MINOR 2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VERSION_PATCH 3</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VERSION_STRING TOSTRING(VERSION_MAJOR) <span class="string">&quot;.&quot;</span> \</span></span><br><span class="line"><span class="meta">                      TOSTRING(VERSION_MINOR) <span class="string">&quot;.&quot;</span> \</span></span><br><span class="line"><span class="meta">                      TOSTRING(VERSION_PATCH)</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">demonstrate_advanced_macros</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;=== 高级宏演示 ===\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 版本信息</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;程序版本: %s\n&quot;</span>, VERSION_STRING);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 调试信息</span></span><br><span class="line">    DBG_PRINT(<span class="string">&quot;这是一条调试信息，数字: %d\n&quot;</span>, <span class="number">42</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 数组大小</span></span><br><span class="line">    <span class="type">int</span> numbers[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;数组大小: %zu\n&quot;</span>, ARRAY_SIZE(numbers));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 类型安全的最大值最小值</span></span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>, b = <span class="number">20</span>;</span><br><span class="line">    <span class="type">float</span> x = <span class="number">3.14f</span>, y = <span class="number">2.71f</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;MAX(%d, %d) = %d\n&quot;</span>, a, b, MAX(a, b));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;MIN(%.2f, %.2f) = %.2f\n&quot;</span>, x, y, MIN(x, y));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 性能测试</span></span><br><span class="line">    BENCHMARK_START(<span class="string">&quot;数组求和&quot;</span>);</span><br><span class="line">    <span class="type">long</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++) &#123;</span><br><span class="line">        sum += i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;求和结果: %ld\n&quot;</span>, sum);</span><br><span class="line">    BENCHMARK_END();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 安全内存分配</span></span><br><span class="line">    <span class="type">int</span>* ptr;</span><br><span class="line">    SAFE_MALLOC(ptr, <span class="number">10</span> * <span class="keyword">sizeof</span>(<span class="type">int</span>), <span class="type">int</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用分配的内存</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        ptr[i] = i * i;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;分配的数组内容: &quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, ptr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    SAFE_FREE(ptr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 条件编译示例</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">demonstrate_conditional_compilation</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n=== 条件编译演示 ===\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 编译器检测</span></span><br><span class="line">    <span class="meta">#<span class="keyword">ifdef</span> __GNUC__</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;使用GCC编译器，版本: %d.%d.%d\n&quot;</span>, </span><br><span class="line">               __GNUC__, __GNUC_MINOR__, __GNUC_PATCHLEVEL__);</span><br><span class="line">    <span class="meta">#<span class="keyword">elif</span> defined(_MSC_VER)</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;使用Microsoft Visual C++编译器\n&quot;</span>);</span><br><span class="line">    <span class="meta">#<span class="keyword">elif</span> defined(__clang__)</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;使用Clang编译器\n&quot;</span>);</span><br><span class="line">    <span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;未知编译器\n&quot;</span>);</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 操作系统检测</span></span><br><span class="line">    <span class="meta">#<span class="keyword">ifdef</span> _WIN32</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;运行在Windows系统\n&quot;</span>);</span><br><span class="line">    <span class="meta">#<span class="keyword">elif</span> defined(__linux__)</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;运行在Linux系统\n&quot;</span>);</span><br><span class="line">    <span class="meta">#<span class="keyword">elif</span> defined(__APPLE__)</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;运行在macOS系统\n&quot;</span>);</span><br><span class="line">    <span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;未知操作系统\n&quot;</span>);</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 架构检测</span></span><br><span class="line">    <span class="meta">#<span class="keyword">ifdef</span> _WIN64</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;64位Windows\n&quot;</span>);</span><br><span class="line">    <span class="meta">#<span class="keyword">elif</span> defined(_WIN32)</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;32位Windows\n&quot;</span>);</span><br><span class="line">    <span class="meta">#<span class="keyword">elif</span> defined(__x86_64__)</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;64位x86架构\n&quot;</span>);</span><br><span class="line">    <span class="meta">#<span class="keyword">elif</span> defined(__i386__)</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;32位x86架构\n&quot;</span>);</span><br><span class="line">    <span class="meta">#<span class="keyword">elif</span> defined(__aarch64__)</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;64位ARM架构\n&quot;</span>);</span><br><span class="line">    <span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;未知架构\n&quot;</span>);</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 编译时间信息</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;编译日期: %s\n&quot;</span>, __DATE__);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;编译时间: %s\n&quot;</span>, __TIME__);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;源文件: %s\n&quot;</span>, __FILE__);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    demonstrate_advanced_macros();</span><br><span class="line">    demonstrate_conditional_compilation();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-X-宏技术"><a href="#2-X-宏技术" class="headerlink" title="2. X-宏技术"></a>2. X-宏技术</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// X-宏定义：错误代码</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR_CODES \</span></span><br><span class="line"><span class="meta">    X(SUCCESS, 0, <span class="string">&quot;操作成功&quot;</span>) \</span></span><br><span class="line"><span class="meta">    X(INVALID_PARAMETER, 1, <span class="string">&quot;无效参数&quot;</span>) \</span></span><br><span class="line"><span class="meta">    X(OUT_OF_MEMORY, 2, <span class="string">&quot;内存不足&quot;</span>) \</span></span><br><span class="line"><span class="meta">    X(FILE_NOT_FOUND, 3, <span class="string">&quot;文件未找到&quot;</span>) \</span></span><br><span class="line"><span class="meta">    X(PERMISSION_DENIED, 4, <span class="string">&quot;权限被拒绝&quot;</span>) \</span></span><br><span class="line"><span class="meta">    X(NETWORK_ERROR, 5, <span class="string">&quot;网络错误&quot;</span>) \</span></span><br><span class="line"><span class="meta">    X(TIMEOUT, 6, <span class="string">&quot;操作超时&quot;</span>) \</span></span><br><span class="line"><span class="meta">    X(UNKNOWN_ERROR, 99, <span class="string">&quot;未知错误&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成枚举</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> X(name, code, desc) ERROR_##name = code,</span></span><br><span class="line">    ERROR_CODES</span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> X</span></span><br><span class="line">&#125; ErrorCode;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成错误描述数组</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">char</span>* error_descriptions[] = &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> X(name, code, desc) [ERROR_##name] = desc,</span></span><br><span class="line">    ERROR_CODES</span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> X</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成错误名称数组</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">char</span>* error_names[] = &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> X(name, code, desc) [ERROR_##name] = #name,</span></span><br><span class="line">    ERROR_CODES</span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> X</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取错误描述</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* <span class="title function_">get_error_description</span><span class="params">(ErrorCode code)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (code &gt;= <span class="number">0</span> &amp;&amp; code &lt; <span class="keyword">sizeof</span>(error_descriptions) / <span class="keyword">sizeof</span>(error_descriptions[<span class="number">0</span>])) &#123;</span><br><span class="line">        <span class="keyword">return</span> error_descriptions[code] ? error_descriptions[code] : <span class="string">&quot;未定义错误&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;无效错误代码&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取错误名称</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* <span class="title function_">get_error_name</span><span class="params">(ErrorCode code)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (code &gt;= <span class="number">0</span> &amp;&amp; code &lt; <span class="keyword">sizeof</span>(error_names) / <span class="keyword">sizeof</span>(error_names[<span class="number">0</span>])) &#123;</span><br><span class="line">        <span class="keyword">return</span> error_names[code] ? error_names[code] : <span class="string">&quot;UNDEFINED&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;INVALID&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// X-宏定义：状态机状态</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STATES \</span></span><br><span class="line"><span class="meta">    X(IDLE, <span class="string">&quot;空闲状态&quot;</span>) \</span></span><br><span class="line"><span class="meta">    X(CONNECTING, <span class="string">&quot;连接中&quot;</span>) \</span></span><br><span class="line"><span class="meta">    X(CONNECTED, <span class="string">&quot;已连接&quot;</span>) \</span></span><br><span class="line"><span class="meta">    X(SENDING, <span class="string">&quot;发送中&quot;</span>) \</span></span><br><span class="line"><span class="meta">    X(RECEIVING, <span class="string">&quot;接收中&quot;</span>) \</span></span><br><span class="line"><span class="meta">    X(DISCONNECTING, <span class="string">&quot;断开连接中&quot;</span>) \</span></span><br><span class="line"><span class="meta">    X(ERROR, <span class="string">&quot;错误状态&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成状态枚举</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> X(name, desc) STATE_##name,</span></span><br><span class="line">    STATES</span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> X</span></span><br><span class="line">    STATE_COUNT</span><br><span class="line">&#125; State;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成状态名称数组</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">char</span>* state_names[] = &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> X(name, desc) #name,</span></span><br><span class="line">    STATES</span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> X</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成状态描述数组</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">char</span>* state_descriptions[] = &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> X(name, desc) desc,</span></span><br><span class="line">    STATES</span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> X</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 状态机结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    State current_state;</span><br><span class="line">    State previous_state;</span><br><span class="line">&#125; StateMachine;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 状态转换</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">state_machine_transition</span><span class="params">(StateMachine* sm, State new_state)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (sm != <span class="literal">NULL</span> &amp;&amp; new_state &lt; STATE_COUNT) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;状态转换: %s -&gt; %s\n&quot;</span>, </span><br><span class="line">               state_names[sm-&gt;current_state], </span><br><span class="line">               state_names[new_state]);</span><br><span class="line">        sm-&gt;previous_state = sm-&gt;current_state;</span><br><span class="line">        sm-&gt;current_state = new_state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印状态信息</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_state_info</span><span class="params">(<span class="type">const</span> StateMachine* sm)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (sm != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;当前状态: %s (%s)\n&quot;</span>, </span><br><span class="line">               state_names[sm-&gt;current_state],</span><br><span class="line">               state_descriptions[sm-&gt;current_state]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;前一状态: %s (%s)\n&quot;</span>, </span><br><span class="line">               state_names[sm-&gt;previous_state],</span><br><span class="line">               state_descriptions[sm-&gt;previous_state]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">demonstrate_x_macros</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;=== X-宏技术演示 ===\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 错误代码演示</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;错误代码演示:\n&quot;</span>);</span><br><span class="line">    ErrorCode errors[] = &#123;ERROR_SUCCESS, ERROR_INVALID_PARAMETER, </span><br><span class="line">                         ERROR_OUT_OF_MEMORY, ERROR_FILE_NOT_FOUND&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;错误 %s (%d): %s\n&quot;</span>, </span><br><span class="line">               get_error_name(errors[i]), </span><br><span class="line">               errors[i], </span><br><span class="line">               get_error_description(errors[i]));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 状态机演示</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n状态机演示:\n&quot;</span>);</span><br><span class="line">    StateMachine sm = &#123;STATE_IDLE, STATE_IDLE&#125;;</span><br><span class="line">    </span><br><span class="line">    print_state_info(&amp;sm);</span><br><span class="line">    </span><br><span class="line">    state_machine_transition(&amp;sm, STATE_CONNECTING);</span><br><span class="line">    state_machine_transition(&amp;sm, STATE_CONNECTED);</span><br><span class="line">    state_machine_transition(&amp;sm, STATE_SENDING);</span><br><span class="line">    state_machine_transition(&amp;sm, STATE_ERROR);</span><br><span class="line">    </span><br><span class="line">    print_state_info(&amp;sm);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 显示所有状态</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n所有可用状态:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; STATE_COUNT; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d: %s - %s\n&quot;</span>, i, state_names[i], state_descriptions[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    demonstrate_x_macros();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="（二）可变参数函数"><a href="#（二）可变参数函数" class="headerlink" title="（二）可变参数函数"></a>（二）可变参数函数</h2><h3 id="1-标准可变参数函数"><a href="#1-标准可变参数函数" class="headerlink" title="1. 标准可变参数函数"></a>1. 标准可变参数函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算多个整数的和</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sum_integers</span><span class="params">(<span class="type">int</span> count, ...)</span> &#123;</span><br><span class="line">    va_list args;</span><br><span class="line">    va_start(args, count);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> total = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">        total += va_arg(args, <span class="type">int</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    va_end(args);</span><br><span class="line">    <span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算多个浮点数的平均值</span></span><br><span class="line"><span class="type">double</span> <span class="title function_">average_doubles</span><span class="params">(<span class="type">int</span> count, ...)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (count &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0.0</span>;</span><br><span class="line">    </span><br><span class="line">    va_list args;</span><br><span class="line">    va_start(args, count);</span><br><span class="line">    </span><br><span class="line">    <span class="type">double</span> total = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">        total += va_arg(args, <span class="type">double</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    va_end(args);</span><br><span class="line">    <span class="keyword">return</span> total / count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找多个字符串中的最长字符串</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* <span class="title function_">find_longest_string</span><span class="params">(<span class="type">int</span> count, ...)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (count &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    va_list args;</span><br><span class="line">    va_start(args, count);</span><br><span class="line">    </span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* longest = va_arg(args, <span class="type">const</span> <span class="type">char</span>*);</span><br><span class="line">    <span class="type">size_t</span> max_length = <span class="built_in">strlen</span>(longest);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; count; i++) &#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">char</span>* current = va_arg(args, <span class="type">const</span> <span class="type">char</span>*);</span><br><span class="line">        <span class="type">size_t</span> current_length = <span class="built_in">strlen</span>(current);</span><br><span class="line">        <span class="keyword">if</span> (current_length &gt; max_length) &#123;</span><br><span class="line">            longest = current;</span><br><span class="line">            max_length = current_length;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    va_end(args);</span><br><span class="line">    <span class="keyword">return</span> longest;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义printf函数（简化版）</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">my_printf</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* format, ...)</span> &#123;</span><br><span class="line">    va_list args;</span><br><span class="line">    va_start(args, format);</span><br><span class="line">    </span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* p = format;</span><br><span class="line">    <span class="keyword">while</span> (*p != <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (*p == <span class="string">&#x27;%&#x27;</span> &amp;&amp; *(p + <span class="number">1</span>) != <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">            p++;  <span class="comment">// 跳过%</span></span><br><span class="line">            <span class="keyword">switch</span> (*p) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>: &#123;</span><br><span class="line">                    <span class="type">int</span> value = va_arg(args, <span class="type">int</span>);</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, value);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;f&#x27;</span>: &#123;</span><br><span class="line">                    <span class="type">double</span> value = va_arg(args, <span class="type">double</span>);</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%.2f&quot;</span>, value);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>: &#123;</span><br><span class="line">                    <span class="type">const</span> <span class="type">char</span>* value = va_arg(args, <span class="type">const</span> <span class="type">char</span>*);</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, value);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;c&#x27;</span>: &#123;</span><br><span class="line">                    <span class="type">int</span> value = va_arg(args, <span class="type">int</span>);  <span class="comment">// char被提升为int</span></span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, value);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;%&#x27;</span>: &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%%&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%%%c&quot;</span>, *p);  <span class="comment">// 未知格式符</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, *p);</span><br><span class="line">        &#125;</span><br><span class="line">        p++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    va_end(args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 日志函数</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">    LOG_DEBUG,</span><br><span class="line">    LOG_INFO,</span><br><span class="line">    LOG_WARNING,</span><br><span class="line">    LOG_ERROR</span><br><span class="line">&#125; LogLevel;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">log_message</span><span class="params">(LogLevel level, <span class="type">const</span> <span class="type">char</span>* format, ...)</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* level_names[] = &#123;<span class="string">&quot;DEBUG&quot;</span>, <span class="string">&quot;INFO&quot;</span>, <span class="string">&quot;WARNING&quot;</span>, <span class="string">&quot;ERROR&quot;</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 打印日志级别</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[%s] &quot;</span>, level_names[level]);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 处理可变参数</span></span><br><span class="line">    va_list args;</span><br><span class="line">    va_start(args, format);</span><br><span class="line">    <span class="built_in">vprintf</span>(format, args);  <span class="comment">// 使用vprintf处理可变参数</span></span><br><span class="line">    va_end(args);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">demonstrate_variadic_functions</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;=== 可变参数函数演示 ===\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 整数求和</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;整数求和:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sum(3, 1, 2, 3) = %d\n&quot;</span>, sum_integers(<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sum(5, 10, 20, 30, 40, 50) = %d\n&quot;</span>, sum_integers(<span class="number">5</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 浮点数平均值</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n浮点数平均值:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;average(3, 1.5, 2.5, 3.0) = %.2f\n&quot;</span>, </span><br><span class="line">           average_doubles(<span class="number">3</span>, <span class="number">1.5</span>, <span class="number">2.5</span>, <span class="number">3.0</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;average(4, 10.0, 20.0, 30.0, 40.0) = %.2f\n&quot;</span>, </span><br><span class="line">           average_doubles(<span class="number">4</span>, <span class="number">10.0</span>, <span class="number">20.0</span>, <span class="number">30.0</span>, <span class="number">40.0</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 最长字符串</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n最长字符串:\n&quot;</span>);</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* longest = find_longest_string(<span class="number">4</span>, <span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>, <span class="string">&quot;programming&quot;</span>, <span class="string">&quot;C&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;最长字符串: \&quot;%s\&quot;\n&quot;</span>, longest);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 自定义printf</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n自定义printf演示:\n&quot;</span>);</span><br><span class="line">    my_printf(<span class="string">&quot;整数: %d, 浮点数: %f, 字符串: %s, 字符: %c\n&quot;</span>, </span><br><span class="line">              <span class="number">42</span>, <span class="number">3.14159</span>, <span class="string">&quot;Hello&quot;</span>, <span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 日志函数</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n日志函数演示:\n&quot;</span>);</span><br><span class="line">    log_message(LOG_INFO, <span class="string">&quot;程序启动成功&quot;</span>);</span><br><span class="line">    log_message(LOG_WARNING, <span class="string">&quot;内存使用率达到 %d%%&quot;</span>, <span class="number">85</span>);</span><br><span class="line">    log_message(LOG_ERROR, <span class="string">&quot;文件 %s 打开失败，错误代码: %d&quot;</span>, <span class="string">&quot;config.txt&quot;</span>, <span class="number">404</span>);</span><br><span class="line">    log_message(LOG_DEBUG, <span class="string">&quot;变量值: x=%d, y=%.2f&quot;</span>, <span class="number">10</span>, <span class="number">3.14</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    demonstrate_variadic_functions();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-类型安全的可变参数"><a href="#2-类型安全的可变参数" class="headerlink" title="2. 类型安全的可变参数"></a>2. 类型安全的可变参数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数类型枚举</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">    ARG_INT,</span><br><span class="line">    ARG_DOUBLE,</span><br><span class="line">    ARG_STRING,</span><br><span class="line">    ARG_CHAR,</span><br><span class="line">    ARG_END</span><br><span class="line">&#125; ArgType;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数值联合体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">double</span> d;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* s;</span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line">&#125; ArgValue;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类型化参数结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    ArgType type;</span><br><span class="line">    ArgValue value;</span><br><span class="line">&#125; TypedArg;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类型安全的打印函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">safe_print</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* format, ...)</span> &#123;</span><br><span class="line">    va_list args;</span><br><span class="line">    va_start(args, format);</span><br><span class="line">    </span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* p = format;</span><br><span class="line">    <span class="keyword">while</span> (*p != <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (*p == <span class="string">&#x27;%&#x27;</span> &amp;&amp; *(p + <span class="number">1</span>) != <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">            p++;  <span class="comment">// 跳过%</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 获取类型信息</span></span><br><span class="line">            ArgType expected_type = va_arg(args, ArgType);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (expected_type == ARG_END) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;[错误: 参数不足]&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">switch</span> (*p) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line">                    <span class="keyword">if</span> (expected_type == ARG_INT) &#123;</span><br><span class="line">                        <span class="type">int</span> value = va_arg(args, <span class="type">int</span>);</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, value);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;[类型错误: 期望int]&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                    </span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;f&#x27;</span>:</span><br><span class="line">                    <span class="keyword">if</span> (expected_type == ARG_DOUBLE) &#123;</span><br><span class="line">                        <span class="type">double</span> value = va_arg(args, <span class="type">double</span>);</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;%.2f&quot;</span>, value);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;[类型错误: 期望double]&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                    </span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line">                    <span class="keyword">if</span> (expected_type == ARG_STRING) &#123;</span><br><span class="line">                        <span class="type">const</span> <span class="type">char</span>* value = va_arg(args, <span class="type">const</span> <span class="type">char</span>*);</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, value);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;[类型错误: 期望string]&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                    </span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;c&#x27;</span>:</span><br><span class="line">                    <span class="keyword">if</span> (expected_type == ARG_CHAR) &#123;</span><br><span class="line">                        <span class="type">int</span> value = va_arg(args, <span class="type">int</span>);</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, value);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;[类型错误: 期望char]&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                    </span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%%%c&quot;</span>, *p);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, *p);</span><br><span class="line">        &#125;</span><br><span class="line">        p++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    va_end(args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 宏简化类型安全调用</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SAFE_PRINT(format, ...) \</span></span><br><span class="line"><span class="meta">    safe_print(format, ##__VA_ARGS__, ARG_END)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INT_ARG(x) ARG_INT, (x)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DOUBLE_ARG(x) ARG_DOUBLE, (x)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STRING_ARG(x) ARG_STRING, (x)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHAR_ARG(x) ARG_CHAR, (x)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态参数数组</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    TypedArg* args;</span><br><span class="line">    <span class="type">int</span> count;</span><br><span class="line">    <span class="type">int</span> capacity;</span><br><span class="line">&#125; ArgArray;</span><br><span class="line"></span><br><span class="line">ArgArray* <span class="title function_">arg_array_create</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    ArgArray* arr = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ArgArray));</span><br><span class="line">    <span class="keyword">if</span> (arr == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    arr-&gt;args = <span class="literal">NULL</span>;</span><br><span class="line">    arr-&gt;count = <span class="number">0</span>;</span><br><span class="line">    arr-&gt;capacity = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">arg_array_add_int</span><span class="params">(ArgArray* arr, <span class="type">int</span> value)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (arr-&gt;count &gt;= arr-&gt;capacity) &#123;</span><br><span class="line">        <span class="type">int</span> new_capacity = arr-&gt;capacity == <span class="number">0</span> ? <span class="number">4</span> : arr-&gt;capacity * <span class="number">2</span>;</span><br><span class="line">        TypedArg* new_args = <span class="built_in">realloc</span>(arr-&gt;args, new_capacity * <span class="keyword">sizeof</span>(TypedArg));</span><br><span class="line">        <span class="keyword">if</span> (new_args == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        arr-&gt;args = new_args;</span><br><span class="line">        arr-&gt;capacity = new_capacity;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    arr-&gt;args[arr-&gt;count].type = ARG_INT;</span><br><span class="line">    arr-&gt;args[arr-&gt;count].value.i = value;</span><br><span class="line">    arr-&gt;count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">arg_array_add_double</span><span class="params">(ArgArray* arr, <span class="type">double</span> value)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (arr-&gt;count &gt;= arr-&gt;capacity) &#123;</span><br><span class="line">        <span class="type">int</span> new_capacity = arr-&gt;capacity == <span class="number">0</span> ? <span class="number">4</span> : arr-&gt;capacity * <span class="number">2</span>;</span><br><span class="line">        TypedArg* new_args = <span class="built_in">realloc</span>(arr-&gt;args, new_capacity * <span class="keyword">sizeof</span>(TypedArg));</span><br><span class="line">        <span class="keyword">if</span> (new_args == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        arr-&gt;args = new_args;</span><br><span class="line">        arr-&gt;capacity = new_capacity;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    arr-&gt;args[arr-&gt;count].type = ARG_DOUBLE;</span><br><span class="line">    arr-&gt;args[arr-&gt;count].value.d = value;</span><br><span class="line">    arr-&gt;count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">arg_array_add_string</span><span class="params">(ArgArray* arr, <span class="type">const</span> <span class="type">char</span>* value)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (arr-&gt;count &gt;= arr-&gt;capacity) &#123;</span><br><span class="line">        <span class="type">int</span> new_capacity = arr-&gt;capacity == <span class="number">0</span> ? <span class="number">4</span> : arr-&gt;capacity * <span class="number">2</span>;</span><br><span class="line">        TypedArg* new_args = <span class="built_in">realloc</span>(arr-&gt;args, new_capacity * <span class="keyword">sizeof</span>(TypedArg));</span><br><span class="line">        <span class="keyword">if</span> (new_args == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        arr-&gt;args = new_args;</span><br><span class="line">        arr-&gt;capacity = new_capacity;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    arr-&gt;args[arr-&gt;count].type = ARG_STRING;</span><br><span class="line">    arr-&gt;args[arr-&gt;count].value.s = value;</span><br><span class="line">    arr-&gt;count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">arg_array_print</span><span class="params">(<span class="type">const</span> ArgArray* arr)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;参数数组 (%d个参数):\n&quot;</span>, arr-&gt;count);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; arr-&gt;count; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;  [%d] &quot;</span>, i);</span><br><span class="line">        <span class="keyword">switch</span> (arr-&gt;args[i].type) &#123;</span><br><span class="line">            <span class="keyword">case</span> ARG_INT:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;int: %d\n&quot;</span>, arr-&gt;args[i].value.i);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ARG_DOUBLE:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;double: %.2f\n&quot;</span>, arr-&gt;args[i].value.d);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ARG_STRING:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;string: \&quot;%s\&quot;\n&quot;</span>, arr-&gt;args[i].value.s);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ARG_CHAR:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;char: &#x27;%c&#x27;\n&quot;</span>, arr-&gt;args[i].value.c);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;unknown type\n&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">arg_array_free</span><span class="params">(ArgArray* arr)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">free</span>(arr-&gt;args);</span><br><span class="line">        <span class="built_in">free</span>(arr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">demonstrate_type_safe_variadic</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;=== 类型安全可变参数演示 ===\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 类型安全的打印函数</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;类型安全打印:\n&quot;</span>);</span><br><span class="line">    safe_print(<span class="string">&quot;整数: %d, 浮点数: %f, 字符串: %s\n&quot;</span>, </span><br><span class="line">               INT_ARG(<span class="number">42</span>), DOUBLE_ARG(<span class="number">3.14</span>), STRING_ARG(<span class="string">&quot;Hello&quot;</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 类型错误演示</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n类型错误演示:\n&quot;</span>);</span><br><span class="line">    safe_print(<span class="string">&quot;整数: %d, 浮点数: %f\n&quot;</span>, </span><br><span class="line">               DOUBLE_ARG(<span class="number">3.14</span>), INT_ARG(<span class="number">42</span>));  <span class="comment">// 故意颠倒类型</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 动态参数数组</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n动态参数数组演示:\n&quot;</span>);</span><br><span class="line">    ArgArray* arr = arg_array_create();</span><br><span class="line">    </span><br><span class="line">    arg_array_add_int(arr, <span class="number">100</span>);</span><br><span class="line">    arg_array_add_double(arr, <span class="number">2.718</span>);</span><br><span class="line">    arg_array_add_string(arr, <span class="string">&quot;动态参数&quot;</span>);</span><br><span class="line">    arg_array_add_int(arr, <span class="number">200</span>);</span><br><span class="line">    </span><br><span class="line">    arg_array_print(arr);</span><br><span class="line">    </span><br><span class="line">    arg_array_free(arr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    demonstrate_type_safe_variadic();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="二、现代C语言特性"><a href="#二、现代C语言特性" class="headerlink" title="二、现代C语言特性"></a>二、现代C语言特性</h1><h2 id="（一）C99和C11新特性"><a href="#（一）C99和C11新特性" class="headerlink" title="（一）C99和C11新特性"></a>（一）C99和C11新特性</h2><h3 id="1-变长数组和复合字面量"><a href="#1-变长数组和复合字面量" class="headerlink" title="1. 变长数组和复合字面量"></a>1. 变长数组和复合字面量</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;complex.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// C99特性：变长数组</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">demonstrate_vla</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;=== 变长数组演示 ===\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入数组大小: &quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">0</span> || n &gt; <span class="number">1000</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;无效的数组大小\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 变长数组声明</span></span><br><span class="line">    <span class="type">int</span> vla[n];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        vla[i] = i * i;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;变长数组内容 (大小: %d):\n&quot;</span>, n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, vla[i]);</span><br><span class="line">        <span class="keyword">if</span> ((i + <span class="number">1</span>) % <span class="number">10</span> == <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n % <span class="number">10</span> != <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 二维变长数组</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n二维变长数组演示:\n&quot;</span>);</span><br><span class="line">    <span class="type">int</span> rows = <span class="number">3</span>, cols = <span class="number">4</span>;</span><br><span class="line">    <span class="type">int</span> matrix[rows][cols];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化矩阵</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; rows; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; cols; j++) &#123;</span><br><span class="line">            matrix[i][j] = i * cols + j + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 打印矩阵</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;矩阵 %dx%d:\n&quot;</span>, rows, cols);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; rows; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; cols; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%3d &quot;</span>, matrix[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用变长数组的函数</span></span><br><span class="line"><span class="type">double</span> <span class="title function_">calculate_average</span><span class="params">(<span class="type">int</span> n, <span class="type">double</span> arr[n])</span> &#123;</span><br><span class="line">    <span class="type">double</span> sum = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        sum += arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum / n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">matrix_multiply</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> m, <span class="type">int</span> p,</span></span><br><span class="line"><span class="params">                    <span class="type">double</span> a[n][m], <span class="type">double</span> b[m][p], <span class="type">double</span> result[n][p])</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; p; j++) &#123;</span><br><span class="line">            result[i][j] = <span class="number">0.0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; m; k++) &#123;</span><br><span class="line">                result[i][j] += a[i][k] * b[k][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// C99特性：复合字面量</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">demonstrate_compound_literals</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n=== 复合字面量演示 ===\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 数组复合字面量</span></span><br><span class="line">    <span class="type">int</span>* ptr = (<span class="type">int</span>[])&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;数组复合字面量: &quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, ptr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 结构体复合字面量</span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">        <span class="type">int</span> x, y;</span><br><span class="line">        <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">    &#125; Point;</span><br><span class="line">    </span><br><span class="line">    Point p = (Point)&#123;.x = <span class="number">10</span>, .y = <span class="number">20</span>, .name = <span class="string">&quot;原点&quot;</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;结构体复合字面量: (%d, %d) - %s\n&quot;</span>, p.x, p.y, p.name);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 函数参数中使用复合字面量</span></span><br><span class="line">    <span class="type">double</span> avg = calculate_average(<span class="number">5</span>, (<span class="type">double</span>[])&#123;<span class="number">1.5</span>, <span class="number">2.5</span>, <span class="number">3.5</span>, <span class="number">4.5</span>, <span class="number">5.5</span>&#125;);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;平均值: %.2f\n&quot;</span>, avg);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 矩阵乘法演示</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n矩阵乘法演示:\n&quot;</span>);</span><br><span class="line">    <span class="type">double</span> a[<span class="number">2</span>][<span class="number">3</span>] = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;&#125;;</span><br><span class="line">    <span class="type">double</span> b[<span class="number">3</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>&#125;, &#123;<span class="number">3</span>, <span class="number">4</span>&#125;, &#123;<span class="number">5</span>, <span class="number">6</span>&#125;&#125;;</span><br><span class="line">    <span class="type">double</span> result[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line">    </span><br><span class="line">    matrix_multiply(<span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, a, b, result);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;矩阵A (2x3):\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%.0f &quot;</span>, a[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;矩阵B (3x2):\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%.0f &quot;</span>, b[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;结果矩阵 (2x2):\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%.0f &quot;</span>, result[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// C99特性：复数类型</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">demonstrate_complex_numbers</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n=== 复数类型演示 ===\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 复数声明和初始化</span></span><br><span class="line">    <span class="type">double</span> <span class="type">complex</span> z1 = <span class="number">3.0</span> + <span class="number">4.0</span> * I;</span><br><span class="line">    <span class="type">double</span> <span class="type">complex</span> z2 = <span class="number">1.0</span> - <span class="number">2.0</span> * I;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;z1 = %.1f + %.1fi\n&quot;</span>, creal(z1), cimag(z1));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;z2 = %.1f + %.1fi\n&quot;</span>, creal(z2), cimag(z2));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 复数运算</span></span><br><span class="line">    <span class="type">double</span> <span class="type">complex</span> sum = z1 + z2;</span><br><span class="line">    <span class="type">double</span> <span class="type">complex</span> diff = z1 - z2;</span><br><span class="line">    <span class="type">double</span> <span class="type">complex</span> product = z1 * z2;</span><br><span class="line">    <span class="type">double</span> <span class="type">complex</span> quotient = z1 / z2;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n复数运算:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;z1 + z2 = %.1f + %.1fi\n&quot;</span>, creal(sum), cimag(sum));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;z1 - z2 = %.1f + %.1fi\n&quot;</span>, creal(diff), cimag(diff));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;z1 * z2 = %.1f + %.1fi\n&quot;</span>, creal(product), cimag(product));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;z1 / z2 = %.2f + %.2fi\n&quot;</span>, creal(quotient), cimag(quotient));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 复数函数</span></span><br><span class="line">    <span class="type">double</span> magnitude = cabs(z1);</span><br><span class="line">    <span class="type">double</span> phase = carg(z1);</span><br><span class="line">    <span class="type">double</span> <span class="type">complex</span> conjugate = conj(z1);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n复数函数:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;|z1| = %.2f\n&quot;</span>, magnitude);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;arg(z1) = %.2f 弧度\n&quot;</span>, phase);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;conj(z1) = %.1f + %.1fi\n&quot;</span>, creal(conjugate), cimag(conjugate));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    demonstrate_vla();</span><br><span class="line">    demonstrate_compound_literals();</span><br><span class="line">    demonstrate_complex_numbers();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-内联函数和静态断言"><a href="#2-内联函数和静态断言" class="headerlink" title="2. 内联函数和静态断言"></a>2. 内联函数和静态断言</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// C99特性：内联函数</span></span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (a &gt; b) ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">int</span> <span class="title function_">min</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (a &lt; b) ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">double</span> <span class="title function_">square</span><span class="params">(<span class="type">double</span> x)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">bool</span> <span class="title function_">is_power_of_two</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> n != <span class="number">0</span> &amp;&amp; (n &amp; (n - <span class="number">1</span>)) == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 内联函数用于位操作</span></span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">set_bit</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> value, <span class="type">int</span> bit)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value | (<span class="number">1U</span> &lt;&lt; bit);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">clear_bit</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> value, <span class="type">int</span> bit)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value &amp; ~(<span class="number">1U</span> &lt;&lt; bit);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">bool</span> <span class="title function_">test_bit</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> value, <span class="type">int</span> bit)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (value &amp; (<span class="number">1U</span> &lt;&lt; bit)) != <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">toggle_bit</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> value, <span class="type">int</span> bit)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value ^ (<span class="number">1U</span> &lt;&lt; bit);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// C11特性：静态断言</span></span><br><span class="line"><span class="keyword">_Static_assert</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) &gt;= <span class="number">4</span>, <span class="string">&quot;int类型必须至少4字节&quot;</span>);</span><br><span class="line"><span class="keyword">_Static_assert</span>(<span class="keyword">sizeof</span>(<span class="type">void</span>*) == <span class="keyword">sizeof</span>(<span class="type">size_t</span>), <span class="string">&quot;指针大小必须等于size_t&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结构体对齐检查</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TestStruct</span> &#123;</span></span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">double</span> d;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">_Static_assert</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> TestStruct) &gt;= <span class="keyword">sizeof</span>(<span class="type">char</span>) + <span class="keyword">sizeof</span>(<span class="type">int</span>) + <span class="keyword">sizeof</span>(<span class="type">double</span>),</span><br><span class="line">               <span class="string">&quot;结构体大小异常&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组大小检查</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFFER_SIZE 1024</span></span><br><span class="line"><span class="type">char</span> buffer[BUFFER_SIZE];</span><br><span class="line"><span class="keyword">_Static_assert</span>(BUFFER_SIZE &gt;= <span class="number">512</span>, <span class="string">&quot;缓冲区大小必须至少512字节&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">demonstrate_inline_functions</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;=== 内联函数演示 ===\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 基本内联函数</span></span><br><span class="line">    <span class="type">int</span> a = <span class="number">15</span>, b = <span class="number">23</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;max(%d, %d) = %d\n&quot;</span>, a, b, max(a, b));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;min(%d, %d) = %d\n&quot;</span>, a, b, min(a, b));</span><br><span class="line">    </span><br><span class="line">    <span class="type">double</span> x = <span class="number">3.5</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;square(%.1f) = %.2f\n&quot;</span>, x, square(x));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2的幂检查</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n2的幂检查:\n&quot;</span>);</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> numbers[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">64</span>&#125;;</span><br><span class="line">    <span class="type">int</span> count = <span class="keyword">sizeof</span>(numbers) / <span class="keyword">sizeof</span>(numbers[<span class="number">0</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%u %s 2的幂\n&quot;</span>, numbers[i], </span><br><span class="line">               is_power_of_two(numbers[i]) ? <span class="string">&quot;是&quot;</span> : <span class="string">&quot;不是&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 位操作演示</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n位操作演示:\n&quot;</span>);</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> value = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;初始值: 0x%08X (%u)\n&quot;</span>, value, value);</span><br><span class="line">    </span><br><span class="line">    value = set_bit(value, <span class="number">3</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;设置第3位: 0x%08X (%u)\n&quot;</span>, value, value);</span><br><span class="line">    </span><br><span class="line">    value = set_bit(value, <span class="number">7</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;设置第7位: 0x%08X (%u)\n&quot;</span>, value, value);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;测试第3位: %s\n&quot;</span>, test_bit(value, <span class="number">3</span>) ? <span class="string">&quot;已设置&quot;</span> : <span class="string">&quot;未设置&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;测试第5位: %s\n&quot;</span>, test_bit(value, <span class="number">5</span>) ? <span class="string">&quot;已设置&quot;</span> : <span class="string">&quot;未设置&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    value = toggle_bit(value, <span class="number">3</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;切换第3位: 0x%08X (%u)\n&quot;</span>, value, value);</span><br><span class="line">    </span><br><span class="line">    value = clear_bit(value, <span class="number">7</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;清除第7位: 0x%08X (%u)\n&quot;</span>, value, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行时断言演示</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">demonstrate_assertions</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n=== 断言演示 ===\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="built_in">array</span>[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    <span class="type">int</span> size = <span class="keyword">sizeof</span>(<span class="built_in">array</span>) / <span class="keyword">sizeof</span>(<span class="built_in">array</span>[<span class="number">0</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 运行时断言</span></span><br><span class="line">    assert(size &gt; <span class="number">0</span>);  <span class="comment">// 确保数组不为空</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;数组大小: %d (断言通过)\n&quot;</span>, size);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 函数参数检查</span></span><br><span class="line">    <span class="type">int</span> index = <span class="number">2</span>;</span><br><span class="line">    assert(index &gt;= <span class="number">0</span> &amp;&amp; index &lt; size);  <span class="comment">// 边界检查</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;array[%d] = %d (边界检查通过)\n&quot;</span>, index, <span class="built_in">array</span>[index]);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 指针检查</span></span><br><span class="line">    <span class="type">int</span>* ptr = <span class="built_in">array</span>;</span><br><span class="line">    assert(ptr != <span class="literal">NULL</span>);  <span class="comment">// 空指针检查</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;指针有效，值: %d\n&quot;</span>, *ptr);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;所有断言检查通过\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 注意：以下断言会导致程序终止（已注释）</span></span><br><span class="line">    <span class="comment">// assert(size == 10);  // 这会失败并终止程序</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译时计算（使用内联函数）</span></span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">int</span> <span class="title function_">factorial_compile_time</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (n &lt;= <span class="number">1</span>) ? <span class="number">1</span> : n * factorial_compile_time(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用宏进行编译时计算</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FACTORIAL_5 (5 * 4 * 3 * 2 * 1)</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">demonstrate_compile_time_computation</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n=== 编译时计算演示 ===\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 编译时常量</span></span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> fact5_macro = FACTORIAL_5;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;5! (宏计算) = %d\n&quot;</span>, fact5_macro);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 内联函数（可能在编译时优化）</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;5! (内联函数) = %d\n&quot;</span>, factorial_compile_time(<span class="number">5</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 静态断言验证编译时计算</span></span><br><span class="line">    <span class="keyword">_Static_assert</span>(FACTORIAL_5 == <span class="number">120</span>, <span class="string">&quot;5!应该等于120&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;编译时计算验证通过\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;静态断言检查通过，程序开始执行\n\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    demonstrate_inline_functions();</span><br><span class="line">    demonstrate_assertions();</span><br><span class="line">    demonstrate_compile_time_computation();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="三、代码质量与最佳实践"><a href="#三、代码质量与最佳实践" class="headerlink" title="三、代码质量与最佳实践"></a>三、代码质量与最佳实践</h1><h2 id="（一）错误处理和防御性编程"><a href="#（一）错误处理和防御性编程" class="headerlink" title="（一）错误处理和防御性编程"></a>（一）错误处理和防御性编程</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误代码定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">    RESULT_SUCCESS = <span class="number">0</span>,</span><br><span class="line">    RESULT_NULL_POINTER,</span><br><span class="line">    RESULT_INVALID_PARAMETER,</span><br><span class="line">    RESULT_OUT_OF_MEMORY,</span><br><span class="line">    RESULT_BUFFER_TOO_SMALL,</span><br><span class="line">    RESULT_FILE_ERROR,</span><br><span class="line">    RESULT_UNKNOWN_ERROR</span><br><span class="line">&#125; ResultCode;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    ResultCode code;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* message;</span><br><span class="line">    <span class="type">int</span> line;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* file;</span><br><span class="line">&#125; Result;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建结果的宏</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RESULT_OK() \</span></span><br><span class="line"><span class="meta">    ((Result)&#123;RESULT_SUCCESS, <span class="string">&quot;操作成功&quot;</span>, __LINE__, __FILE__&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RESULT_ERROR(code, msg) \</span></span><br><span class="line"><span class="meta">    ((Result)&#123;code, msg, __LINE__, __FILE__&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查结果的宏</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK_RESULT(result) \</span></span><br><span class="line"><span class="meta">    do &#123; \</span></span><br><span class="line"><span class="meta">        <span class="keyword">if</span> ((result).code != RESULT_SUCCESS) &#123; \</span></span><br><span class="line"><span class="meta">            fprintf(stderr, <span class="string">&quot;错误 [%s:%d]: %s\n&quot;</span>, \</span></span><br><span class="line"><span class="meta">                    (result).file, (result).<span class="keyword">line</span>, (result).message); \</span></span><br><span class="line"><span class="meta">            return result; \</span></span><br><span class="line"><span class="meta">        &#125; \</span></span><br><span class="line"><span class="meta">    &#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 安全的字符串复制函数</span></span><br><span class="line">Result <span class="title function_">safe_strcpy</span><span class="params">(<span class="type">char</span>* dest, <span class="type">size_t</span> dest_size, <span class="type">const</span> <span class="type">char</span>* src)</span> &#123;</span><br><span class="line">    <span class="comment">// 参数验证</span></span><br><span class="line">    <span class="keyword">if</span> (dest == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> RESULT_ERROR(RESULT_NULL_POINTER, <span class="string">&quot;目标指针为空&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (src == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> RESULT_ERROR(RESULT_NULL_POINTER, <span class="string">&quot;源指针为空&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (dest_size == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> RESULT_ERROR(RESULT_INVALID_PARAMETER, <span class="string">&quot;目标缓冲区大小为0&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">size_t</span> src_len = <span class="built_in">strlen</span>(src);</span><br><span class="line">    <span class="keyword">if</span> (src_len &gt;= dest_size) &#123;</span><br><span class="line">        <span class="keyword">return</span> RESULT_ERROR(RESULT_BUFFER_TOO_SMALL, <span class="string">&quot;目标缓冲区太小&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">strcpy</span>(dest, src);</span><br><span class="line">    <span class="keyword">return</span> RESULT_OK();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 安全的整数除法</span></span><br><span class="line">Result <span class="title function_">safe_divide</span><span class="params">(<span class="type">int</span> dividend, <span class="type">int</span> divisor, <span class="type">int</span>* result)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (result == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> RESULT_ERROR(RESULT_NULL_POINTER, <span class="string">&quot;结果指针为空&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (divisor == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> RESULT_ERROR(RESULT_INVALID_PARAMETER, <span class="string">&quot;除数不能为零&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 检查整数溢出</span></span><br><span class="line">    <span class="keyword">if</span> (dividend == INT_MIN &amp;&amp; divisor == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> RESULT_ERROR(RESULT_INVALID_PARAMETER, <span class="string">&quot;整数溢出&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    *result = dividend / divisor;</span><br><span class="line">    <span class="keyword">return</span> RESULT_OK();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 安全的内存分配</span></span><br><span class="line">Result <span class="title function_">safe_malloc</span><span class="params">(<span class="type">void</span>** ptr, <span class="type">size_t</span> size)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (ptr == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> RESULT_ERROR(RESULT_NULL_POINTER, <span class="string">&quot;指针参数为空&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> RESULT_ERROR(RESULT_INVALID_PARAMETER, <span class="string">&quot;分配大小为0&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    *ptr = <span class="built_in">malloc</span>(size);</span><br><span class="line">    <span class="keyword">if</span> (*ptr == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> RESULT_ERROR(RESULT_OUT_OF_MEMORY, <span class="string">&quot;内存分配失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> RESULT_OK();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 安全的文件读取</span></span><br><span class="line">Result <span class="title function_">safe_read_file</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* filename, <span class="type">char</span>** content, <span class="type">size_t</span>* size)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (filename == <span class="literal">NULL</span> || content == <span class="literal">NULL</span> || size == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> RESULT_ERROR(RESULT_NULL_POINTER, <span class="string">&quot;参数指针为空&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    FILE* file = fopen(filename, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (file == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="type">char</span> error_msg[<span class="number">256</span>];</span><br><span class="line">        <span class="built_in">snprintf</span>(error_msg, <span class="keyword">sizeof</span>(error_msg), <span class="string">&quot;无法打开文件: %s&quot;</span>, strerror(errno));</span><br><span class="line">        <span class="keyword">return</span> RESULT_ERROR(RESULT_FILE_ERROR, error_msg);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取文件大小</span></span><br><span class="line">    fseek(file, <span class="number">0</span>, SEEK_END);</span><br><span class="line">    <span class="type">long</span> file_size = ftell(file);</span><br><span class="line">    fseek(file, <span class="number">0</span>, SEEK_SET);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (file_size &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        fclose(file);</span><br><span class="line">        <span class="keyword">return</span> RESULT_ERROR(RESULT_FILE_ERROR, <span class="string">&quot;无法获取文件大小&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 分配内存</span></span><br><span class="line">    <span class="type">char</span>* buffer = <span class="built_in">malloc</span>(file_size + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (buffer == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        fclose(file);</span><br><span class="line">        <span class="keyword">return</span> RESULT_ERROR(RESULT_OUT_OF_MEMORY, <span class="string">&quot;内存分配失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 读取文件</span></span><br><span class="line">    <span class="type">size_t</span> bytes_read = fread(buffer, <span class="number">1</span>, file_size, file);</span><br><span class="line">    <span class="keyword">if</span> (bytes_read != (<span class="type">size_t</span>)file_size) &#123;</span><br><span class="line">        <span class="built_in">free</span>(buffer);</span><br><span class="line">        fclose(file);</span><br><span class="line">        <span class="keyword">return</span> RESULT_ERROR(RESULT_FILE_ERROR, <span class="string">&quot;文件读取失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    buffer[file_size] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    fclose(file);</span><br><span class="line">    </span><br><span class="line">    *content = buffer;</span><br><span class="line">    *size = file_size;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> RESULT_OK();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组处理函数</span></span><br><span class="line">Result <span class="title function_">process_array</span><span class="params">(<span class="type">int</span>* <span class="built_in">array</span>, <span class="type">size_t</span> size, <span class="type">int</span> (*processor)(<span class="type">int</span>))</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">array</span> == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> RESULT_ERROR(RESULT_NULL_POINTER, <span class="string">&quot;数组指针为空&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (processor == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> RESULT_ERROR(RESULT_NULL_POINTER, <span class="string">&quot;处理函数指针为空&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> RESULT_ERROR(RESULT_INVALID_PARAMETER, <span class="string">&quot;数组大小为0&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        <span class="built_in">array</span>[i] = processor(<span class="built_in">array</span>[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> RESULT_OK();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例处理函数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">double_value</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">square_value</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">demonstrate_error_handling</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;=== 错误处理演示 ===\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 字符串复制测试</span></span><br><span class="line">    <span class="type">char</span> buffer[<span class="number">20</span>];</span><br><span class="line">    Result result;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;1. 安全字符串复制测试:\n&quot;</span>);</span><br><span class="line">    result = safe_strcpy(buffer, <span class="keyword">sizeof</span>(buffer), <span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (result.code == RESULT_SUCCESS) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;复制成功: %s\n&quot;</span>, buffer);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;复制失败: %s\n&quot;</span>, result.message);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 缓冲区太小的情况</span></span><br><span class="line">    result = safe_strcpy(buffer, <span class="keyword">sizeof</span>(buffer), <span class="string">&quot;这是一个非常长的字符串，超过了缓冲区的大小&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (result.code != RESULT_SUCCESS) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;预期错误: %s\n&quot;</span>, result.message);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 除法测试</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n2. 安全除法测试:\n&quot;</span>);</span><br><span class="line">    <span class="type">int</span> div_result;</span><br><span class="line">    result = safe_divide(<span class="number">10</span>, <span class="number">3</span>, &amp;div_result);</span><br><span class="line">    <span class="keyword">if</span> (result.code == RESULT_SUCCESS) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;10 / 3 = %d\n&quot;</span>, div_result);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    result = safe_divide(<span class="number">10</span>, <span class="number">0</span>, &amp;div_result);</span><br><span class="line">    <span class="keyword">if</span> (result.code != RESULT_SUCCESS) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;预期错误: %s\n&quot;</span>, result.message);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 内存分配测试</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n3. 安全内存分配测试:\n&quot;</span>);</span><br><span class="line">    <span class="type">void</span>* ptr;</span><br><span class="line">    result = safe_malloc(&amp;ptr, <span class="number">100</span>);</span><br><span class="line">    <span class="keyword">if</span> (result.code == RESULT_SUCCESS) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;内存分配成功: %p\n&quot;</span>, ptr);</span><br><span class="line">        <span class="built_in">free</span>(ptr);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 数组处理测试</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n4. 数组处理测试:\n&quot;</span>);</span><br><span class="line">    <span class="type">int</span> numbers[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    <span class="type">size_t</span> count = <span class="keyword">sizeof</span>(numbers) / <span class="keyword">sizeof</span>(numbers[<span class="number">0</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;原始数组: &quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, numbers[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    result = process_array(numbers, count, double_value);</span><br><span class="line">    <span class="keyword">if</span> (result.code == RESULT_SUCCESS) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;翻倍后: &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, numbers[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    demonstrate_error_handling();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="四、总结与下一步"><a href="#四、总结与下一步" class="headerlink" title="四、总结与下一步"></a>四、总结与下一步</h1><h2 id="（一）本文重点回顾"><a href="#（一）本文重点回顾" class="headerlink" title="（一）本文重点回顾"></a>（一）本文重点回顾</h2><p>通过本文的深入学习，您已经掌握了：</p>
<p><strong>预处理器高级技巧：</strong></p>
<ul>
<li>复杂宏的编写和调试技巧</li>
<li>X-宏技术的应用</li>
<li>条件编译和平台适配</li>
</ul>
<p><strong>可变参数函数：</strong></p>
<ul>
<li>标准可变参数的使用</li>
<li>类型安全的可变参数设计</li>
<li>动态参数处理技术</li>
</ul>
<p><strong>现代C语言特性：</strong></p>
<ul>
<li>C99&#x2F;C11新特性的应用</li>
<li>内联函数和编译器优化</li>
<li>静态断言和编译时检查</li>
</ul>
<p><strong>代码质量提升：</strong></p>
<ul>
<li>错误处理的最佳实践</li>
<li>防御性编程技巧</li>
<li>代码规范和可维护性</li>
</ul>
<h2 id="（二）编程最佳实践"><a href="#（二）编程最佳实践" class="headerlink" title="（二）编程最佳实践"></a>（二）编程最佳实践</h2><ol>
<li><strong>错误处理</strong>：始终检查函数返回值和边界条件</li>
<li><strong>内存管理</strong>：合理使用动态内存，避免泄漏</li>
<li><strong>代码规范</strong>：保持一致的命名和格式风格</li>
<li><strong>文档注释</strong>：为复杂函数和数据结构添加详细注释</li>
<li><strong>测试驱动</strong>：编写测试用例验证代码正确性</li>
</ol>
<a class="btn-beautify blue" href="/2025/08/10/%E5%AD%A6%E4%B9%A0/%E3%80%90%E5%AD%A6%E4%B9%A0%E3%80%91C%E8%AF%AD%E8%A8%80%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%EF%BC%9A%E4%BB%8E%E7%AE%97%E6%B3%95%E5%88%B0%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B/" title="下一篇：项目实战"><i class="far fa-hand-point-right"></i><span>下一篇：项目实战</span></a>

<hr>
<p><strong>参考资料：</strong></p>
<ul>
<li>《C程序设计语言》（第2版）- Brian W. Kernighan &amp; Dennis M. Ritchie</li>
<li>《C专家编程》- Peter van der Linden</li>
<li>《高质量C&#x2F;C++编程指南》- 林锐</li>
<li>《现代C语言程序设计》- K. N. King</li>
<li>ISO&#x2F;IEC 9899:2018 - C语言国际标准</li>
<li>GCC手册：<a href="https://gcc.gnu.org/onlinedocs/">https://gcc.gnu.org/onlinedocs/</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<div class="note info flat"><p><strong>C语言系统学习系列 - 第7篇</strong><br>探索C语言的高级特性和现代编程技巧，学会编写高质量、可维护的专业级代码。</p>
</div>

<h1 id="前言"><a href="#前言]]>
    </summary>
    
      <category term="最佳实践" scheme="https://uwakeme.tech/tags/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    
      <category term="代码质量" scheme="https://uwakeme.tech/tags/%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F/"/>
    
      <category term="C语言" scheme="https://uwakeme.tech/tags/C%E8%AF%AD%E8%A8%80/"/>
    
      <category term="现代C语言" scheme="https://uwakeme.tech/tags/%E7%8E%B0%E4%BB%A3C%E8%AF%AD%E8%A8%80/"/>
    
      <category term="高级特性" scheme="https://uwakeme.tech/tags/%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/"/>
    
      <category term="学习" scheme="https://uwakeme.tech/categories/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[【学习】C语言文件操作与数据持久化：构建实用程序]]></title>
    <link href="https://uwakeme.tech/2025/08/11/%E5%AD%A6%E4%B9%A0/%E3%80%90%E5%AD%A6%E4%B9%A0%E3%80%91C%E8%AF%AD%E8%A8%80%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E4%B8%8E%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96%EF%BC%9A%E6%9E%84%E5%BB%BA%E5%AE%9E%E7%94%A8%E7%A8%8B%E5%BA%8F/"/>
    <id>https://uwakeme.tech/2025/08/11/学习/【学习】C语言文件操作与数据持久化：构建实用程序/</id>
    <published>2025-08-11T07:00:00.000Z</published>
    <updated>2025-08-11T07:53:03.485Z</updated>
    <content type="html"><![CDATA[<div class="note info flat"><p><strong>C语言系统学习系列 - 第6篇</strong><br>深入探讨C语言文件操作和数据持久化技术，学会构建能够保存和读取数据的实用程序。</p>
</div>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>到目前为止，我们编写的程序在运行结束后，所有数据都会丢失。在实际应用中，我们经常需要将数据保存到文件中，以便程序重新启动时能够恢复之前的状态。文件操作是构建实用程序的基础技能，也是数据持久化的核心技术。</p>
<p><strong>为什么需要文件操作？</strong></p>
<p>在现实应用中，文件操作无处不在：</p>
<ul>
<li><strong>配置管理</strong>：保存程序设置和用户偏好</li>
<li><strong>数据存储</strong>：保存用户数据、日志记录</li>
<li><strong>数据交换</strong>：与其他程序或系统交换数据</li>
<li><strong>备份恢复</strong>：数据备份和灾难恢复</li>
</ul>
<p><strong>本文学习目标：</strong></p>
<ul>
<li>掌握文本文件和二进制文件的操作</li>
<li>学会错误处理和异常情况的处理</li>
<li>理解文件指针和随机访问</li>
<li>掌握CSV、JSON等常见格式的处理</li>
<li>学会构建完整的数据持久化系统</li>
</ul>
<a class="btn-beautify green" href="/2025/08/10/%E5%AD%A6%E4%B9%A0/%E3%80%90%E5%AD%A6%E4%B9%A0%E3%80%91C%E8%AF%AD%E8%A8%80%E7%BB%93%E6%9E%84%E4%BD%93%E4%B8%8E%E8%81%94%E5%90%88%E4%BD%93%EF%BC%9A%E5%A4%8D%E6%9D%82%E6%95%B0%E6%8D%AE%E7%9A%84%E7%BB%84%E7%BB%87%E8%89%BA%E6%9C%AF/" title="上一篇：结构体与联合体"><i class="far fa-hand-point-left"></i><span>上一篇：结构体与联合体</span></a>

<h1 id="一、文件操作基础"><a href="#一、文件操作基础" class="headerlink" title="一、文件操作基础"></a>一、文件操作基础</h1><h2 id="（一）文本文件操作"><a href="#（一）文本文件操作" class="headerlink" title="（一）文本文件操作"></a>（一）文本文件操作</h2><h3 id="1-基本文件操作函数"><a href="#1-基本文件操作函数" class="headerlink" title="1. 基本文件操作函数"></a>1. 基本文件操作函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">demonstrate_basic_file_operations</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;=== 基本文件操作演示 ===\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* filename = <span class="string">&quot;test_output.txt&quot;</span>;</span><br><span class="line">    FILE* file;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 写入文件</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;1. 写入文件:\n&quot;</span>);</span><br><span class="line">    file = fopen(filename, <span class="string">&quot;w&quot;</span>);  <span class="comment">// 以写入模式打开文件</span></span><br><span class="line">    <span class="keyword">if</span> (file == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;无法创建文件: %s\n&quot;</span>, strerror(errno));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用fprintf写入格式化数据</span></span><br><span class="line">    <span class="built_in">fprintf</span>(file, <span class="string">&quot;这是第一行文本\n&quot;</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(file, <span class="string">&quot;数字: %d, 浮点数: %.2f\n&quot;</span>, <span class="number">42</span>, <span class="number">3.14159</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(file, <span class="string">&quot;字符串: %s\n&quot;</span>, <span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用fputs写入字符串</span></span><br><span class="line">    <span class="built_in">fputs</span>(<span class="string">&quot;这是使用fputs写入的行\n&quot;</span>, file);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用fputc写入单个字符</span></span><br><span class="line">    fputc(<span class="string">&#x27;A&#x27;</span>, file);</span><br><span class="line">    fputc(<span class="string">&#x27;\n&#x27;</span>, file);</span><br><span class="line">    </span><br><span class="line">    fclose(file);  <span class="comment">// 关闭文件</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;文件写入完成\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 读取文件</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n2. 读取文件:\n&quot;</span>);</span><br><span class="line">    file = fopen(filename, <span class="string">&quot;r&quot;</span>);  <span class="comment">// 以读取模式打开文件</span></span><br><span class="line">    <span class="keyword">if</span> (file == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;无法打开文件: %s\n&quot;</span>, strerror(errno));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">char</span> buffer[<span class="number">256</span>];</span><br><span class="line">    <span class="type">int</span> line_number = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 逐行读取文件</span></span><br><span class="line">    <span class="keyword">while</span> (fgets(buffer, <span class="keyword">sizeof</span>(buffer), file) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;第%d行: %s&quot;</span>, line_number++, buffer);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    fclose(file);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 追加到文件</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n3. 追加到文件:\n&quot;</span>);</span><br><span class="line">    file = fopen(filename, <span class="string">&quot;a&quot;</span>);  <span class="comment">// 以追加模式打开文件</span></span><br><span class="line">    <span class="keyword">if</span> (file != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(file, <span class="string">&quot;这是追加的内容\n&quot;</span>);</span><br><span class="line">        <span class="built_in">fprintf</span>(file, <span class="string">&quot;当前时间戳: %ld\n&quot;</span>, time(<span class="literal">NULL</span>));</span><br><span class="line">        fclose(file);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;内容追加完成\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 再次读取文件查看追加结果</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n4. 追加后的文件内容:\n&quot;</span>);</span><br><span class="line">    file = fopen(filename, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (file != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        line_number = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (fgets(buffer, <span class="keyword">sizeof</span>(buffer), file) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;第%d行: %s&quot;</span>, line_number++, buffer);</span><br><span class="line">        &#125;</span><br><span class="line">        fclose(file);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 删除测试文件</span></span><br><span class="line">    <span class="keyword">if</span> (remove(filename) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n测试文件已删除\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n删除文件失败: %s\n&quot;</span>, strerror(errno));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 安全的文件操作函数</span></span><br><span class="line">FILE* <span class="title function_">safe_fopen</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* filename, <span class="type">const</span> <span class="type">char</span>* mode)</span> &#123;</span><br><span class="line">    FILE* file = fopen(filename, mode);</span><br><span class="line">    <span class="keyword">if</span> (file == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;错误: 无法打开文件 &#x27;%s&#x27; (模式: %s): %s\n&quot;</span>, </span><br><span class="line">                filename, mode, strerror(errno));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> file;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">safe_fclose</span><span class="params">(FILE* file)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (file != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (fclose(file) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;警告: 关闭文件时出错: %s\n&quot;</span>, strerror(errno));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件复制函数</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">copy_file</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* source, <span class="type">const</span> <span class="type">char</span>* destination)</span> &#123;</span><br><span class="line">    FILE* src = safe_fopen(source, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (src == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    FILE* dst = safe_fopen(destination, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (dst == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        safe_fclose(src);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">char</span> buffer[<span class="number">4096</span>];</span><br><span class="line">    <span class="type">size_t</span> bytes_read;</span><br><span class="line">    <span class="type">bool</span> success = <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> ((bytes_read = fread(buffer, <span class="number">1</span>, <span class="keyword">sizeof</span>(buffer), src)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (fwrite(buffer, <span class="number">1</span>, bytes_read, dst) != bytes_read) &#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;写入文件时出错: %s\n&quot;</span>, strerror(errno));</span><br><span class="line">            success = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (ferror(src)) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;读取文件时出错: %s\n&quot;</span>, strerror(errno));</span><br><span class="line">        success = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    safe_fclose(src);</span><br><span class="line">    safe_fclose(dst);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> success;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">demonstrate_file_utilities</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n=== 文件工具函数演示 ===\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建源文件</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* source_file = <span class="string">&quot;source.txt&quot;</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* dest_file = <span class="string">&quot;destination.txt&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    FILE* file = safe_fopen(source_file, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (file != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(file, <span class="string">&quot;这是要复制的文件内容\n&quot;</span>);</span><br><span class="line">        <span class="built_in">fprintf</span>(file, <span class="string">&quot;包含多行文本\n&quot;</span>);</span><br><span class="line">        <span class="built_in">fprintf</span>(file, <span class="string">&quot;用于测试文件复制功能\n&quot;</span>);</span><br><span class="line">        safe_fclose(file);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 复制文件</span></span><br><span class="line">    <span class="keyword">if</span> (copy_file(source_file, dest_file)) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;文件复制成功\n&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 验证复制结果</span></span><br><span class="line">        FILE* copied = safe_fopen(dest_file, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (copied != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;复制的文件内容:\n&quot;</span>);</span><br><span class="line">            <span class="type">char</span> buffer[<span class="number">256</span>];</span><br><span class="line">            <span class="keyword">while</span> (fgets(buffer, <span class="keyword">sizeof</span>(buffer), copied) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;  %s&quot;</span>, buffer);</span><br><span class="line">            &#125;</span><br><span class="line">            safe_fclose(copied);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;文件复制失败\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 清理测试文件</span></span><br><span class="line">    remove(source_file);</span><br><span class="line">    remove(dest_file);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    demonstrate_basic_file_operations();</span><br><span class="line">    demonstrate_file_utilities();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-文件指针和随机访问"><a href="#2-文件指针和随机访问" class="headerlink" title="2. 文件指针和随机访问"></a>2. 文件指针和随机访问</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 学生记录结构（用于演示随机访问）</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">50</span>];</span><br><span class="line">    <span class="type">float</span> gpa;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125; StudentRecord;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">demonstrate_file_positioning</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;=== 文件定位和随机访问演示 ===\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* filename = <span class="string">&quot;students.dat&quot;</span>;</span><br><span class="line">    FILE* file;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建测试数据</span></span><br><span class="line">    StudentRecord students[] = &#123;</span><br><span class="line">        &#123;<span class="number">1001</span>, <span class="string">&quot;张三&quot;</span>, <span class="number">3.8f</span>, <span class="number">20</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1002</span>, <span class="string">&quot;李四&quot;</span>, <span class="number">3.6f</span>, <span class="number">21</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1003</span>, <span class="string">&quot;王五&quot;</span>, <span class="number">3.9f</span>, <span class="number">19</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1004</span>, <span class="string">&quot;赵六&quot;</span>, <span class="number">3.7f</span>, <span class="number">22</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1005</span>, <span class="string">&quot;钱七&quot;</span>, <span class="number">3.5f</span>, <span class="number">20</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">int</span> student_count = <span class="keyword">sizeof</span>(students) / <span class="keyword">sizeof</span>(students[<span class="number">0</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 写入学生记录</span></span><br><span class="line">    file = fopen(filename, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (file == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;无法创建文件\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    fwrite(students, <span class="keyword">sizeof</span>(StudentRecord), student_count, file);</span><br><span class="line">    fclose(file);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;已写入 %d 条学生记录\n&quot;</span>, student_count);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 随机访问演示</span></span><br><span class="line">    file = fopen(filename, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (file == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;无法打开文件\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取文件大小</span></span><br><span class="line">    fseek(file, <span class="number">0</span>, SEEK_END);</span><br><span class="line">    <span class="type">long</span> file_size = ftell(file);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;文件大小: %ld 字节\n&quot;</span>, file_size);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;记录数量: %ld\n&quot;</span>, file_size / <span class="keyword">sizeof</span>(StudentRecord));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 读取第3条记录（索引为2）</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n读取第3条记录:\n&quot;</span>);</span><br><span class="line">    fseek(file, <span class="number">2</span> * <span class="keyword">sizeof</span>(StudentRecord), SEEK_SET);</span><br><span class="line">    StudentRecord record;</span><br><span class="line">    <span class="keyword">if</span> (fread(&amp;record, <span class="keyword">sizeof</span>(StudentRecord), <span class="number">1</span>, file) == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ID: %d, 姓名: %s, GPA: %.1f, 年龄: %d\n&quot;</span>,</span><br><span class="line">               record.id, record.name, record.gpa, record.age);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 读取最后一条记录</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n读取最后一条记录:\n&quot;</span>);</span><br><span class="line">    fseek(file, -<span class="keyword">sizeof</span>(StudentRecord), SEEK_END);</span><br><span class="line">    <span class="keyword">if</span> (fread(&amp;record, <span class="keyword">sizeof</span>(StudentRecord), <span class="number">1</span>, file) == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ID: %d, 姓名: %s, GPA: %.1f, 年龄: %d\n&quot;</span>,</span><br><span class="line">               record.id, record.name, record.gpa, record.age);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 从当前位置向前移动</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n从当前位置向前读取:\n&quot;</span>);</span><br><span class="line">    fseek(file, <span class="number">-2</span> * <span class="keyword">sizeof</span>(StudentRecord), SEEK_CUR);</span><br><span class="line">    <span class="keyword">if</span> (fread(&amp;record, <span class="keyword">sizeof</span>(StudentRecord), <span class="number">1</span>, file) == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ID: %d, 姓名: %s, GPA: %.1f, 年龄: %d\n&quot;</span>,</span><br><span class="line">               record.id, record.name, record.gpa, record.age);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 显示当前文件位置</span></span><br><span class="line">    <span class="type">long</span> current_pos = ftell(file);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;当前文件位置: %ld 字节\n&quot;</span>, current_pos);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;当前记录索引: %ld\n&quot;</span>, current_pos / <span class="keyword">sizeof</span>(StudentRecord));</span><br><span class="line">    </span><br><span class="line">    fclose(file);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 修改特定记录</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n修改第2条记录的GPA:\n&quot;</span>);</span><br><span class="line">    file = fopen(filename, <span class="string">&quot;r+b&quot;</span>);  <span class="comment">// 读写模式</span></span><br><span class="line">    <span class="keyword">if</span> (file != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="comment">// 定位到第2条记录</span></span><br><span class="line">        fseek(file, <span class="number">1</span> * <span class="keyword">sizeof</span>(StudentRecord), SEEK_SET);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 读取记录</span></span><br><span class="line">        <span class="keyword">if</span> (fread(&amp;record, <span class="keyword">sizeof</span>(StudentRecord), <span class="number">1</span>, file) == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;修改前: ID: %d, GPA: %.1f\n&quot;</span>, record.id, record.gpa);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 修改GPA</span></span><br><span class="line">            record.gpa = <span class="number">4.0f</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 回到记录开始位置</span></span><br><span class="line">            fseek(file, -<span class="keyword">sizeof</span>(StudentRecord), SEEK_CUR);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 写回修改后的记录</span></span><br><span class="line">            fwrite(&amp;record, <span class="keyword">sizeof</span>(StudentRecord), <span class="number">1</span>, file);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;修改后: ID: %d, GPA: %.1f\n&quot;</span>, record.id, record.gpa);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        fclose(file);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 验证修改结果</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n验证修改结果 - 所有记录:\n&quot;</span>);</span><br><span class="line">    file = fopen(filename, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (file != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (fread(&amp;record, <span class="keyword">sizeof</span>(StudentRecord), <span class="number">1</span>, file) == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;记录%d: ID=%d, 姓名=%s, GPA=%.1f, 年龄=%d\n&quot;</span>,</span><br><span class="line">                   index++, record.id, record.name, record.gpa, record.age);</span><br><span class="line">        &#125;</span><br><span class="line">        fclose(file);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 清理测试文件</span></span><br><span class="line">    remove(filename);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    demonstrate_file_positioning();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="（二）二进制文件操作"><a href="#（二）二进制文件操作" class="headerlink" title="（二）二进制文件操作"></a>（二）二进制文件操作</h2><h3 id="1-结构体的序列化和反序列化"><a href="#1-结构体的序列化和反序列化" class="headerlink" title="1. 结构体的序列化和反序列化"></a>1. 结构体的序列化和反序列化</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 复杂的数据结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> year, month, day;</span><br><span class="line">    <span class="type">int</span> hour, minute, second;</span><br><span class="line">&#125; DateTime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">100</span>];</span><br><span class="line">    <span class="type">char</span> email[<span class="number">100</span>];</span><br><span class="line">    DateTime created_at;</span><br><span class="line">    DateTime last_login;</span><br><span class="line">    <span class="type">float</span> balance;</span><br><span class="line">    <span class="type">int</span> transaction_count;</span><br><span class="line">    <span class="type">bool</span> is_active;</span><br><span class="line">&#125; UserAccount;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件头结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">char</span> signature[<span class="number">8</span>];      <span class="comment">// 文件签名</span></span><br><span class="line">    <span class="type">int</span> version;           <span class="comment">// 文件格式版本</span></span><br><span class="line">    <span class="type">int</span> record_count;      <span class="comment">// 记录数量</span></span><br><span class="line">    DateTime created_at;   <span class="comment">// 文件创建时间</span></span><br><span class="line">    <span class="type">char</span> description[<span class="number">64</span>];  <span class="comment">// 文件描述</span></span><br><span class="line">&#125; FileHeader;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取当前时间</span></span><br><span class="line">DateTime <span class="title function_">get_current_time</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="type">time_t</span> now = time(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tm</span>* <span class="title">tm_info</span> =</span> localtime(&amp;now);</span><br><span class="line">    </span><br><span class="line">    DateTime dt = &#123;</span><br><span class="line">        .year = tm_info-&gt;tm_year + <span class="number">1900</span>,</span><br><span class="line">        .month = tm_info-&gt;tm_mon + <span class="number">1</span>,</span><br><span class="line">        .day = tm_info-&gt;tm_mday,</span><br><span class="line">        .hour = tm_info-&gt;tm_hour,</span><br><span class="line">        .minute = tm_info-&gt;tm_min,</span><br><span class="line">        .second = tm_info-&gt;tm_sec</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> dt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存用户账户到二进制文件</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">save_user_accounts</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* filename, UserAccount accounts[], <span class="type">int</span> count)</span> &#123;</span><br><span class="line">    FILE* file = fopen(filename, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (file == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;无法创建文件: %s\n&quot;</span>, filename);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 写入文件头</span></span><br><span class="line">    FileHeader header = &#123;</span><br><span class="line">        .signature = <span class="string">&quot;USRDATA&quot;</span>,</span><br><span class="line">        .version = <span class="number">1</span>,</span><br><span class="line">        .record_count = count,</span><br><span class="line">        .created_at = get_current_time()</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">strcpy</span>(header.description, <span class="string">&quot;User Account Database&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (fwrite(&amp;header, <span class="keyword">sizeof</span>(FileHeader), <span class="number">1</span>, file) != <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;写入文件头失败\n&quot;</span>);</span><br><span class="line">        fclose(file);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 写入用户账户数据</span></span><br><span class="line">    <span class="keyword">if</span> (fwrite(accounts, <span class="keyword">sizeof</span>(UserAccount), count, file) != count) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;写入用户数据失败\n&quot;</span>);</span><br><span class="line">        fclose(file);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    fclose(file);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;成功保存 %d 个用户账户到 %s\n&quot;</span>, count, filename);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从二进制文件加载用户账户</span></span><br><span class="line">UserAccount* <span class="title function_">load_user_accounts</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* filename, <span class="type">int</span>* count)</span> &#123;</span><br><span class="line">    FILE* file = fopen(filename, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (file == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;无法打开文件: %s\n&quot;</span>, filename);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 读取文件头</span></span><br><span class="line">    FileHeader header;</span><br><span class="line">    <span class="keyword">if</span> (fread(&amp;header, <span class="keyword">sizeof</span>(FileHeader), <span class="number">1</span>, file) != <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;读取文件头失败\n&quot;</span>);</span><br><span class="line">        fclose(file);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 验证文件签名</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(header.signature, <span class="string">&quot;USRDATA&quot;</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;无效的文件格式\n&quot;</span>);</span><br><span class="line">        fclose(file);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;文件信息:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  签名: %s\n&quot;</span>, header.signature);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  版本: %d\n&quot;</span>, header.version);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  记录数: %d\n&quot;</span>, header.record_count);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  创建时间: %d-%02d-%02d %02d:%02d:%02d\n&quot;</span>,</span><br><span class="line">           header.created_at.year, header.created_at.month, header.created_at.day,</span><br><span class="line">           header.created_at.hour, header.created_at.minute, header.created_at.second);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  描述: %s\n&quot;</span>, header.description);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 分配内存</span></span><br><span class="line">    UserAccount* accounts = <span class="built_in">malloc</span>(header.record_count * <span class="keyword">sizeof</span>(UserAccount));</span><br><span class="line">    <span class="keyword">if</span> (accounts == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;内存分配失败\n&quot;</span>);</span><br><span class="line">        fclose(file);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 读取用户数据</span></span><br><span class="line">    <span class="keyword">if</span> (fread(accounts, <span class="keyword">sizeof</span>(UserAccount), header.record_count, file) != header.record_count) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;读取用户数据失败\n&quot;</span>);</span><br><span class="line">        <span class="built_in">free</span>(accounts);</span><br><span class="line">        fclose(file);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    fclose(file);</span><br><span class="line">    *count = header.record_count;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;成功加载 %d 个用户账户\n&quot;</span>, *count);</span><br><span class="line">    <span class="keyword">return</span> accounts;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印用户账户信息</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_user_account</span><span class="params">(<span class="type">const</span> UserAccount* account)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;用户账户:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  ID: %d\n&quot;</span>, account-&gt;id);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  姓名: %s\n&quot;</span>, account-&gt;name);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  邮箱: %s\n&quot;</span>, account-&gt;email);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  余额: %.2f\n&quot;</span>, account-&gt;balance);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  交易次数: %d\n&quot;</span>, account-&gt;transaction_count);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  状态: %s\n&quot;</span>, account-&gt;is_active ? <span class="string">&quot;活跃&quot;</span> : <span class="string">&quot;非活跃&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  创建时间: %d-%02d-%02d %02d:%02d:%02d\n&quot;</span>,</span><br><span class="line">           account-&gt;created_at.year, account-&gt;created_at.month, account-&gt;created_at.day,</span><br><span class="line">           account-&gt;created_at.hour, account-&gt;created_at.minute, account-&gt;created_at.second);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  最后登录: %d-%02d-%02d %02d:%02d:%02d\n&quot;</span>,</span><br><span class="line">           account-&gt;last_login.year, account-&gt;last_login.month, account-&gt;last_login.day,</span><br><span class="line">           account-&gt;last_login.hour, account-&gt;last_login.minute, account-&gt;last_login.second);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">demonstrate_binary_serialization</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;=== 二进制序列化演示 ===\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建测试用户账户</span></span><br><span class="line">    UserAccount accounts[] = &#123;</span><br><span class="line">        &#123;</span><br><span class="line">            .id = <span class="number">1001</span>,</span><br><span class="line">            .name = <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">            .email = <span class="string">&quot;zhangsan@example.com&quot;</span>,</span><br><span class="line">            .created_at = &#123;<span class="number">2023</span>, <span class="number">1</span>, <span class="number">15</span>, <span class="number">10</span>, <span class="number">30</span>, <span class="number">0</span>&#125;,</span><br><span class="line">            .last_login = &#123;<span class="number">2024</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">25</span>, <span class="number">30</span>&#125;,</span><br><span class="line">            .balance = <span class="number">1250.75f</span>,</span><br><span class="line">            .transaction_count = <span class="number">45</span>,</span><br><span class="line">            .is_active = <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            .id = <span class="number">1002</span>,</span><br><span class="line">            .name = <span class="string">&quot;李四&quot;</span>,</span><br><span class="line">            .email = <span class="string">&quot;lisi@example.com&quot;</span>,</span><br><span class="line">            .created_at = &#123;<span class="number">2023</span>, <span class="number">3</span>, <span class="number">22</span>, <span class="number">16</span>, <span class="number">45</span>, <span class="number">0</span>&#125;,</span><br><span class="line">            .last_login = &#123;<span class="number">2024</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">9</span>, <span class="number">15</span>, <span class="number">20</span>&#125;,</span><br><span class="line">            .balance = <span class="number">890.50f</span>,</span><br><span class="line">            .transaction_count = <span class="number">23</span>,</span><br><span class="line">            .is_active = <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            .id = <span class="number">1003</span>,</span><br><span class="line">            .name = <span class="string">&quot;王五&quot;</span>,</span><br><span class="line">            .email = <span class="string">&quot;wangwu@example.com&quot;</span>,</span><br><span class="line">            .created_at = &#123;<span class="number">2023</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">20</span>, <span class="number">0</span>&#125;,</span><br><span class="line">            .last_login = &#123;<span class="number">2024</span>, <span class="number">7</span>, <span class="number">28</span>, <span class="number">20</span>, <span class="number">10</span>, <span class="number">45</span>&#125;,</span><br><span class="line">            .balance = <span class="number">0.00f</span>,</span><br><span class="line">            .transaction_count = <span class="number">12</span>,</span><br><span class="line">            .is_active = <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> account_count = <span class="keyword">sizeof</span>(accounts) / <span class="keyword">sizeof</span>(accounts[<span class="number">0</span>]);</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* filename = <span class="string">&quot;user_accounts.dat&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 保存到文件</span></span><br><span class="line">    <span class="keyword">if</span> (save_user_accounts(filename, accounts, account_count)) &#123;</span><br><span class="line">        <span class="comment">// 从文件加载</span></span><br><span class="line">        <span class="type">int</span> loaded_count;</span><br><span class="line">        UserAccount* loaded_accounts = load_user_accounts(filename, &amp;loaded_count);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (loaded_accounts != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n加载的用户账户:\n&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; loaded_count; i++) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;--- 用户 %d ---\n&quot;</span>, i + <span class="number">1</span>);</span><br><span class="line">                print_user_account(&amp;loaded_accounts[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">free</span>(loaded_accounts);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 清理测试文件</span></span><br><span class="line">    remove(filename);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    demonstrate_binary_serialization();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="二、高级文件操作"><a href="#二、高级文件操作" class="headerlink" title="二、高级文件操作"></a>二、高级文件操作</h1><h2 id="（一）CSV文件处理"><a href="#（一）CSV文件处理" class="headerlink" title="（一）CSV文件处理"></a>（一）CSV文件处理</h2><h3 id="1-CSV读写实现"><a href="#1-CSV读写实现" class="headerlink" title="1. CSV读写实现"></a>1. CSV读写实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_FIELD_LENGTH 256</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_FIELDS 20</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// CSV记录结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">char</span>** fields;</span><br><span class="line">    <span class="type">int</span> field_count;</span><br><span class="line">&#125; CSVRecord;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CSV文件结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    CSVRecord* records;</span><br><span class="line">    <span class="type">int</span> record_count;</span><br><span class="line">    <span class="type">int</span> capacity;</span><br><span class="line">    <span class="type">char</span>** headers;</span><br><span class="line">    <span class="type">int</span> header_count;</span><br><span class="line">&#125; CSVFile;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建CSV文件对象</span></span><br><span class="line">CSVFile* <span class="title function_">csv_create</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    CSVFile* csv = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(CSVFile));</span><br><span class="line">    <span class="keyword">if</span> (csv == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    csv-&gt;records = <span class="literal">NULL</span>;</span><br><span class="line">    csv-&gt;record_count = <span class="number">0</span>;</span><br><span class="line">    csv-&gt;capacity = <span class="number">0</span>;</span><br><span class="line">    csv-&gt;headers = <span class="literal">NULL</span>;</span><br><span class="line">    csv-&gt;header_count = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> csv;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析CSV行</span></span><br><span class="line">CSVRecord <span class="title function_">parse_csv_line</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* line)</span> &#123;</span><br><span class="line">    CSVRecord record = &#123;<span class="literal">NULL</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="type">char</span>* fields[MAX_FIELDS];</span><br><span class="line">    <span class="type">int</span> field_count = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">char</span>* line_copy = <span class="built_in">malloc</span>(<span class="built_in">strlen</span>(line) + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(line_copy, line);</span><br><span class="line">    </span><br><span class="line">    <span class="type">char</span>* token = strtok(line_copy, <span class="string">&quot;,&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (token != <span class="literal">NULL</span> &amp;&amp; field_count &lt; MAX_FIELDS) &#123;</span><br><span class="line">        <span class="comment">// 去除前后空格</span></span><br><span class="line">        <span class="keyword">while</span> (*token == <span class="string">&#x27; &#x27;</span>) token++;</span><br><span class="line">        <span class="type">char</span>* end = token + <span class="built_in">strlen</span>(token) - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (end &gt; token &amp;&amp; *end == <span class="string">&#x27; &#x27;</span>) *end-- = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 处理引号</span></span><br><span class="line">        <span class="keyword">if</span> (*token == <span class="string">&#x27;&quot;&#x27;</span> &amp;&amp; *end == <span class="string">&#x27;&quot;&#x27;</span>) &#123;</span><br><span class="line">            token++;</span><br><span class="line">            *end = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        fields[field_count] = <span class="built_in">malloc</span>(<span class="built_in">strlen</span>(token) + <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">strcpy</span>(fields[field_count], token);</span><br><span class="line">        field_count++;</span><br><span class="line">        </span><br><span class="line">        token = strtok(<span class="literal">NULL</span>, <span class="string">&quot;,&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (field_count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        record.fields = <span class="built_in">malloc</span>(field_count * <span class="keyword">sizeof</span>(<span class="type">char</span>*));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; field_count; i++) &#123;</span><br><span class="line">            record.fields[i] = fields[i];</span><br><span class="line">        &#125;</span><br><span class="line">        record.field_count = field_count;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">free</span>(line_copy);</span><br><span class="line">    <span class="keyword">return</span> record;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取CSV文件</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">csv_read_file</span><span class="params">(CSVFile* csv, <span class="type">const</span> <span class="type">char</span>* filename)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (csv == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    FILE* file = fopen(filename, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (file == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;无法打开CSV文件: %s\n&quot;</span>, filename);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">char</span> line[<span class="number">1024</span>];</span><br><span class="line">    <span class="type">bool</span> first_line = <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (fgets(line, <span class="keyword">sizeof</span>(line), file) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="comment">// 移除换行符</span></span><br><span class="line">        <span class="type">char</span>* newline = <span class="built_in">strchr</span>(line, <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (newline) *newline = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        </span><br><span class="line">        CSVRecord record = parse_csv_line(line);</span><br><span class="line">        <span class="keyword">if</span> (record.field_count == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (first_line) &#123;</span><br><span class="line">            <span class="comment">// 第一行作为标题</span></span><br><span class="line">            csv-&gt;headers = record.fields;</span><br><span class="line">            csv-&gt;header_count = record.field_count;</span><br><span class="line">            first_line = <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 扩展记录数组</span></span><br><span class="line">            <span class="keyword">if</span> (csv-&gt;record_count &gt;= csv-&gt;capacity) &#123;</span><br><span class="line">                <span class="type">int</span> new_capacity = csv-&gt;capacity == <span class="number">0</span> ? <span class="number">10</span> : csv-&gt;capacity * <span class="number">2</span>;</span><br><span class="line">                CSVRecord* new_records = <span class="built_in">realloc</span>(csv-&gt;records, </span><br><span class="line">                                                new_capacity * <span class="keyword">sizeof</span>(CSVRecord));</span><br><span class="line">                <span class="keyword">if</span> (new_records == <span class="literal">NULL</span>) &#123;</span><br><span class="line">                    fclose(file);</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                csv-&gt;records = new_records;</span><br><span class="line">                csv-&gt;capacity = new_capacity;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            csv-&gt;records[csv-&gt;record_count] = record;</span><br><span class="line">            csv-&gt;record_count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    fclose(file);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;成功读取CSV文件: %d条记录\n&quot;</span>, csv-&gt;record_count);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写入CSV文件</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">csv_write_file</span><span class="params">(<span class="type">const</span> CSVFile* csv, <span class="type">const</span> <span class="type">char</span>* filename)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (csv == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    FILE* file = fopen(filename, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (file == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;无法创建CSV文件: %s\n&quot;</span>, filename);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 写入标题行</span></span><br><span class="line">    <span class="keyword">if</span> (csv-&gt;headers != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; csv-&gt;header_count; i++) &#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(file, <span class="string">&quot;%s&quot;</span>, csv-&gt;headers[i]);</span><br><span class="line">            <span class="keyword">if</span> (i &lt; csv-&gt;header_count - <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="built_in">fprintf</span>(file, <span class="string">&quot;,&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">fprintf</span>(file, <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 写入数据行</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; csv-&gt;record_count; i++) &#123;</span><br><span class="line">        <span class="type">const</span> CSVRecord* record = &amp;csv-&gt;records[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; record-&gt;field_count; j++) &#123;</span><br><span class="line">            <span class="comment">// 如果字段包含逗号或空格，用引号包围</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">strchr</span>(record-&gt;fields[j], <span class="string">&#x27;,&#x27;</span>) != <span class="literal">NULL</span> || </span><br><span class="line">                <span class="built_in">strchr</span>(record-&gt;fields[j], <span class="string">&#x27; &#x27;</span>) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                <span class="built_in">fprintf</span>(file, <span class="string">&quot;\&quot;%s\&quot;&quot;</span>, record-&gt;fields[j]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">fprintf</span>(file, <span class="string">&quot;%s&quot;</span>, record-&gt;fields[j]);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (j &lt; record-&gt;field_count - <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="built_in">fprintf</span>(file, <span class="string">&quot;,&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">fprintf</span>(file, <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    fclose(file);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;成功写入CSV文件: %d条记录\n&quot;</span>, csv-&gt;record_count);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印CSV内容</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">csv_print</span><span class="params">(<span class="type">const</span> CSVFile* csv)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (csv == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 打印标题</span></span><br><span class="line">    <span class="keyword">if</span> (csv-&gt;headers != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;标题: &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; csv-&gt;header_count; i++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%-15s&quot;</span>, csv-&gt;headers[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; csv-&gt;header_count * <span class="number">15</span>; i++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 打印数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; csv-&gt;record_count; i++) &#123;</span><br><span class="line">        <span class="type">const</span> CSVRecord* record = &amp;csv-&gt;records[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; record-&gt;field_count; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%-15s&quot;</span>, record-&gt;fields[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放CSV内存</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">csv_free</span><span class="params">(CSVFile* csv)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (csv == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 释放标题</span></span><br><span class="line">    <span class="keyword">if</span> (csv-&gt;headers != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; csv-&gt;header_count; i++) &#123;</span><br><span class="line">            <span class="built_in">free</span>(csv-&gt;headers[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">free</span>(csv-&gt;headers);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 释放记录</span></span><br><span class="line">    <span class="keyword">if</span> (csv-&gt;records != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; csv-&gt;record_count; i++) &#123;</span><br><span class="line">            CSVRecord* record = &amp;csv-&gt;records[i];</span><br><span class="line">            <span class="keyword">if</span> (record-&gt;fields != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; record-&gt;field_count; j++) &#123;</span><br><span class="line">                    <span class="built_in">free</span>(record-&gt;fields[j]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">free</span>(record-&gt;fields);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">free</span>(csv-&gt;records);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">free</span>(csv);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">demonstrate_csv_processing</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;=== CSV文件处理演示 ===\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* filename = <span class="string">&quot;students.csv&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建示例CSV文件</span></span><br><span class="line">    FILE* file = fopen(filename, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (file != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(file, <span class="string">&quot;学号,姓名,专业,年龄,GPA\n&quot;</span>);</span><br><span class="line">        <span class="built_in">fprintf</span>(file, <span class="string">&quot;2021001,张三,计算机科学,20,3.8\n&quot;</span>);</span><br><span class="line">        <span class="built_in">fprintf</span>(file, <span class="string">&quot;2021002,李四,电子工程,21,3.6\n&quot;</span>);</span><br><span class="line">        <span class="built_in">fprintf</span>(file, <span class="string">&quot;2021003,王五,数学,19,3.9\n&quot;</span>);</span><br><span class="line">        <span class="built_in">fprintf</span>(file, <span class="string">&quot;2021004,赵六,物理,22,3.7\n&quot;</span>);</span><br><span class="line">        <span class="built_in">fprintf</span>(file, <span class="string">&quot;2021005,\&quot;钱七, Jr.\&quot;,化学,20,3.5\n&quot;</span>);</span><br><span class="line">        fclose(file);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;创建示例CSV文件\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 读取CSV文件</span></span><br><span class="line">    CSVFile* csv = csv_create();</span><br><span class="line">    <span class="keyword">if</span> (csv_read_file(csv, filename)) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\nCSV文件内容:\n&quot;</span>);</span><br><span class="line">        csv_print(csv);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 修改数据并保存</span></span><br><span class="line">        <span class="keyword">if</span> (csv-&gt;record_count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 修改第一条记录的GPA</span></span><br><span class="line">            <span class="built_in">free</span>(csv-&gt;records[<span class="number">0</span>].fields[<span class="number">4</span>]);</span><br><span class="line">            csv-&gt;records[<span class="number">0</span>].fields[<span class="number">4</span>] = <span class="built_in">malloc</span>(<span class="number">10</span>);</span><br><span class="line">            <span class="built_in">strcpy</span>(csv-&gt;records[<span class="number">0</span>].fields[<span class="number">4</span>], <span class="string">&quot;4.0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">const</span> <span class="type">char</span>* output_file = <span class="string">&quot;students_modified.csv&quot;</span>;</span><br><span class="line">        csv_write_file(csv, output_file);</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n修改后的CSV文件已保存到: %s\n&quot;</span>, output_file);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 清理</span></span><br><span class="line">        remove(output_file);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    csv_free(csv);</span><br><span class="line">    remove(filename);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    demonstrate_csv_processing();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="三、实践项目：个人财务管理系统"><a href="#三、实践项目：个人财务管理系统" class="headerlink" title="三、实践项目：个人财务管理系统"></a>三、实践项目：个人财务管理系统</h1><p>让我们创建一个完整的个人财务管理系统，展示文件操作的综合应用：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_DESCRIPTION 100</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_CATEGORY 50</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DATA_FILE <span class="string">&quot;finance.dat&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BACKUP_FILE <span class="string">&quot;finance_backup.dat&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 交易类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">    TRANSACTION_INCOME,</span><br><span class="line">    TRANSACTION_EXPENSE</span><br><span class="line">&#125; TransactionType;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 交易记录</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    TransactionType type;</span><br><span class="line">    <span class="type">double</span> amount;</span><br><span class="line">    <span class="type">char</span> description[MAX_DESCRIPTION];</span><br><span class="line">    <span class="type">char</span> category[MAX_CATEGORY];</span><br><span class="line">    <span class="type">time_t</span> timestamp;</span><br><span class="line">&#125; Transaction;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 财务系统</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    Transaction* transactions;</span><br><span class="line">    <span class="type">int</span> count;</span><br><span class="line">    <span class="type">int</span> capacity;</span><br><span class="line">    <span class="type">double</span> balance;</span><br><span class="line">&#125; FinanceSystem;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建财务系统</span></span><br><span class="line">FinanceSystem* <span class="title function_">finance_create</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    FinanceSystem* fs = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(FinanceSystem));</span><br><span class="line">    <span class="keyword">if</span> (fs == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    fs-&gt;transactions = <span class="literal">NULL</span>;</span><br><span class="line">    fs-&gt;count = <span class="number">0</span>;</span><br><span class="line">    fs-&gt;capacity = <span class="number">0</span>;</span><br><span class="line">    fs-&gt;balance = <span class="number">0.0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> fs;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加交易</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">finance_add_transaction</span><span class="params">(FinanceSystem* fs, TransactionType type, </span></span><br><span class="line"><span class="params">                           <span class="type">double</span> amount, <span class="type">const</span> <span class="type">char</span>* description, </span></span><br><span class="line"><span class="params">                           <span class="type">const</span> <span class="type">char</span>* category)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (fs == <span class="literal">NULL</span> || amount &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 扩展容量</span></span><br><span class="line">    <span class="keyword">if</span> (fs-&gt;count &gt;= fs-&gt;capacity) &#123;</span><br><span class="line">        <span class="type">int</span> new_capacity = fs-&gt;capacity == <span class="number">0</span> ? <span class="number">10</span> : fs-&gt;capacity * <span class="number">2</span>;</span><br><span class="line">        Transaction* new_transactions = <span class="built_in">realloc</span>(fs-&gt;transactions, </span><br><span class="line">                                              new_capacity * <span class="keyword">sizeof</span>(Transaction));</span><br><span class="line">        <span class="keyword">if</span> (new_transactions == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">        fs-&gt;transactions = new_transactions;</span><br><span class="line">        fs-&gt;capacity = new_capacity;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建新交易</span></span><br><span class="line">    Transaction* t = &amp;fs-&gt;transactions[fs-&gt;count];</span><br><span class="line">    t-&gt;id = fs-&gt;count + <span class="number">1</span>;</span><br><span class="line">    t-&gt;type = type;</span><br><span class="line">    t-&gt;amount = amount;</span><br><span class="line">    <span class="built_in">strncpy</span>(t-&gt;description, description, MAX_DESCRIPTION - <span class="number">1</span>);</span><br><span class="line">    t-&gt;description[MAX_DESCRIPTION - <span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="built_in">strncpy</span>(t-&gt;category, category, MAX_CATEGORY - <span class="number">1</span>);</span><br><span class="line">    t-&gt;category[MAX_CATEGORY - <span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    t-&gt;timestamp = time(<span class="literal">NULL</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 更新余额</span></span><br><span class="line">    <span class="keyword">if</span> (type == TRANSACTION_INCOME) &#123;</span><br><span class="line">        fs-&gt;balance += amount;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fs-&gt;balance -= amount;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    fs-&gt;count++;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存到文件</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">finance_save</span><span class="params">(<span class="type">const</span> FinanceSystem* fs, <span class="type">const</span> <span class="type">char</span>* filename)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (fs == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    FILE* file = fopen(filename, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (file == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;无法创建文件: %s\n&quot;</span>, filename);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 写入文件头</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> signature[] = <span class="string">&quot;FINANCE1&quot;</span>;</span><br><span class="line">    fwrite(signature, <span class="keyword">sizeof</span>(signature), <span class="number">1</span>, file);</span><br><span class="line">    fwrite(&amp;fs-&gt;count, <span class="keyword">sizeof</span>(<span class="type">int</span>), <span class="number">1</span>, file);</span><br><span class="line">    fwrite(&amp;fs-&gt;balance, <span class="keyword">sizeof</span>(<span class="type">double</span>), <span class="number">1</span>, file);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 写入交易记录</span></span><br><span class="line">    <span class="keyword">if</span> (fs-&gt;count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        fwrite(fs-&gt;transactions, <span class="keyword">sizeof</span>(Transaction), fs-&gt;count, file);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    fclose(file);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;财务数据已保存到: %s\n&quot;</span>, filename);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从文件加载</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">finance_load</span><span class="params">(FinanceSystem* fs, <span class="type">const</span> <span class="type">char</span>* filename)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (fs == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    FILE* file = fopen(filename, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (file == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;文件不存在，将创建新的财务记录\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;  <span class="comment">// 不是错误，只是文件不存在</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 读取文件头</span></span><br><span class="line">    <span class="type">char</span> signature[<span class="number">9</span>];</span><br><span class="line">    <span class="keyword">if</span> (fread(signature, <span class="keyword">sizeof</span>(signature), <span class="number">1</span>, file) != <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;读取文件签名失败\n&quot;</span>);</span><br><span class="line">        fclose(file);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(signature, <span class="string">&quot;FINANCE1&quot;</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;无效的文件格式\n&quot;</span>);</span><br><span class="line">        fclose(file);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> count;</span><br><span class="line">    <span class="type">double</span> balance;</span><br><span class="line">    <span class="keyword">if</span> (fread(&amp;count, <span class="keyword">sizeof</span>(<span class="type">int</span>), <span class="number">1</span>, file) != <span class="number">1</span> ||</span><br><span class="line">        fread(&amp;balance, <span class="keyword">sizeof</span>(<span class="type">double</span>), <span class="number">1</span>, file) != <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;读取文件头失败\n&quot;</span>);</span><br><span class="line">        fclose(file);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 分配内存</span></span><br><span class="line">    <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        fs-&gt;transactions = <span class="built_in">malloc</span>(count * <span class="keyword">sizeof</span>(Transaction));</span><br><span class="line">        <span class="keyword">if</span> (fs-&gt;transactions == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;内存分配失败\n&quot;</span>);</span><br><span class="line">            fclose(file);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 读取交易记录</span></span><br><span class="line">        <span class="keyword">if</span> (fread(fs-&gt;transactions, <span class="keyword">sizeof</span>(Transaction), count, file) != count) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;读取交易记录失败\n&quot;</span>);</span><br><span class="line">            <span class="built_in">free</span>(fs-&gt;transactions);</span><br><span class="line">            fs-&gt;transactions = <span class="literal">NULL</span>;</span><br><span class="line">            fclose(file);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    fs-&gt;count = count;</span><br><span class="line">    fs-&gt;capacity = count;</span><br><span class="line">    fs-&gt;balance = balance;</span><br><span class="line">    </span><br><span class="line">    fclose(file);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;成功加载 %d 条交易记录，当前余额: %.2f\n&quot;</span>, count, balance);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出为CSV</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">finance_export_csv</span><span class="params">(<span class="type">const</span> FinanceSystem* fs, <span class="type">const</span> <span class="type">char</span>* filename)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (fs == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    FILE* file = fopen(filename, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (file == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;无法创建CSV文件: %s\n&quot;</span>, filename);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 写入CSV头</span></span><br><span class="line">    <span class="built_in">fprintf</span>(file, <span class="string">&quot;ID,类型,金额,描述,类别,时间\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 写入交易记录</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; fs-&gt;count; i++) &#123;</span><br><span class="line">        <span class="type">const</span> Transaction* t = &amp;fs-&gt;transactions[i];</span><br><span class="line">        <span class="type">char</span> time_str[<span class="number">64</span>];</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">tm</span>* <span class="title">tm_info</span> =</span> localtime(&amp;t-&gt;timestamp);</span><br><span class="line">        strftime(time_str, <span class="keyword">sizeof</span>(time_str), <span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, tm_info);</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">fprintf</span>(file, <span class="string">&quot;%d,%s,%.2f,\&quot;%s\&quot;,\&quot;%s\&quot;,%s\n&quot;</span>,</span><br><span class="line">                t-&gt;id,</span><br><span class="line">                t-&gt;type == TRANSACTION_INCOME ? <span class="string">&quot;收入&quot;</span> : <span class="string">&quot;支出&quot;</span>,</span><br><span class="line">                t-&gt;amount,</span><br><span class="line">                t-&gt;description,</span><br><span class="line">                t-&gt;category,</span><br><span class="line">                time_str);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    fclose(file);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;交易记录已导出到CSV文件: %s\n&quot;</span>, filename);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示统计信息</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">finance_show_statistics</span><span class="params">(<span class="type">const</span> FinanceSystem* fs)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (fs == <span class="literal">NULL</span> || fs-&gt;count == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;暂无交易记录\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">double</span> total_income = <span class="number">0.0</span>;</span><br><span class="line">    <span class="type">double</span> total_expense = <span class="number">0.0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; fs-&gt;count; i++) &#123;</span><br><span class="line">        <span class="type">const</span> Transaction* t = &amp;fs-&gt;transactions[i];</span><br><span class="line">        <span class="keyword">if</span> (t-&gt;type == TRANSACTION_INCOME) &#123;</span><br><span class="line">            total_income += t-&gt;amount;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            total_expense += t-&gt;amount;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n=== 财务统计 ===\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;总收入: %.2f\n&quot;</span>, total_income);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;总支出: %.2f\n&quot;</span>, total_expense);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;净收入: %.2f\n&quot;</span>, total_income - total_expense);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;当前余额: %.2f\n&quot;</span>, fs-&gt;balance);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;交易笔数: %d\n&quot;</span>, fs-&gt;count);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示最近交易</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">finance_show_recent_transactions</span><span class="params">(<span class="type">const</span> FinanceSystem* fs, <span class="type">int</span> limit)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (fs == <span class="literal">NULL</span> || fs-&gt;count == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;暂无交易记录\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n=== 最近 %d 笔交易 ===\n&quot;</span>, limit);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%-4s %-8s %-10s %-20s %-15s %-20s\n&quot;</span>, </span><br><span class="line">           <span class="string">&quot;ID&quot;</span>, <span class="string">&quot;类型&quot;</span>, <span class="string">&quot;金额&quot;</span>, <span class="string">&quot;描述&quot;</span>, <span class="string">&quot;类别&quot;</span>, <span class="string">&quot;时间&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;--------------------------------------------------------------------------------\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> start = (fs-&gt;count &gt; limit) ? fs-&gt;count - limit : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = start; i &lt; fs-&gt;count; i++) &#123;</span><br><span class="line">        <span class="type">const</span> Transaction* t = &amp;fs-&gt;transactions[i];</span><br><span class="line">        <span class="type">char</span> time_str[<span class="number">64</span>];</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">tm</span>* <span class="title">tm_info</span> =</span> localtime(&amp;t-&gt;timestamp);</span><br><span class="line">        strftime(time_str, <span class="keyword">sizeof</span>(time_str), <span class="string">&quot;%m-%d %H:%M&quot;</span>, tm_info);</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%-4d %-8s %-10.2f %-20s %-15s %-20s\n&quot;</span>,</span><br><span class="line">               t-&gt;id,</span><br><span class="line">               t-&gt;type == TRANSACTION_INCOME ? <span class="string">&quot;收入&quot;</span> : <span class="string">&quot;支出&quot;</span>,</span><br><span class="line">               t-&gt;amount,</span><br><span class="line">               t-&gt;description,</span><br><span class="line">               t-&gt;category,</span><br><span class="line">               time_str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放内存</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">finance_free</span><span class="params">(FinanceSystem* fs)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (fs != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">free</span>(fs-&gt;transactions);</span><br><span class="line">        <span class="built_in">free</span>(fs);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主程序演示</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">demonstrate_finance_system</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;=== 个人财务管理系统演示 ===\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    FinanceSystem* fs = finance_create();</span><br><span class="line">    <span class="keyword">if</span> (fs == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;系统创建失败\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 加载现有数据</span></span><br><span class="line">    finance_load(fs, DATA_FILE);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 添加一些示例交易</span></span><br><span class="line">    finance_add_transaction(fs, TRANSACTION_INCOME, <span class="number">5000.00</span>, <span class="string">&quot;工资&quot;</span>, <span class="string">&quot;薪资&quot;</span>);</span><br><span class="line">    finance_add_transaction(fs, TRANSACTION_EXPENSE, <span class="number">1200.00</span>, <span class="string">&quot;房租&quot;</span>, <span class="string">&quot;住房&quot;</span>);</span><br><span class="line">    finance_add_transaction(fs, TRANSACTION_EXPENSE, <span class="number">300.00</span>, <span class="string">&quot;超市购物&quot;</span>, <span class="string">&quot;食品&quot;</span>);</span><br><span class="line">    finance_add_transaction(fs, TRANSACTION_EXPENSE, <span class="number">150.00</span>, <span class="string">&quot;加油&quot;</span>, <span class="string">&quot;交通&quot;</span>);</span><br><span class="line">    finance_add_transaction(fs, TRANSACTION_INCOME, <span class="number">200.00</span>, <span class="string">&quot;兼职收入&quot;</span>, <span class="string">&quot;其他&quot;</span>);</span><br><span class="line">    finance_add_transaction(fs, TRANSACTION_EXPENSE, <span class="number">80.00</span>, <span class="string">&quot;电话费&quot;</span>, <span class="string">&quot;通讯&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 显示统计信息</span></span><br><span class="line">    finance_show_statistics(fs);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 显示最近交易</span></span><br><span class="line">    finance_show_recent_transactions(fs, <span class="number">5</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 保存数据</span></span><br><span class="line">    finance_save(fs, DATA_FILE);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建备份</span></span><br><span class="line">    finance_save(fs, BACKUP_FILE);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 导出CSV</span></span><br><span class="line">    finance_export_csv(fs, <span class="string">&quot;finance_export.csv&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 清理</span></span><br><span class="line">    finance_free(fs);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n演示完成！\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;数据文件: %s\n&quot;</span>, DATA_FILE);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;备份文件: %s\n&quot;</span>, BACKUP_FILE);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;CSV导出: finance_export.csv\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    demonstrate_finance_system();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="四、总结与下一步"><a href="#四、总结与下一步" class="headerlink" title="四、总结与下一步"></a>四、总结与下一步</h1><h2 id="（一）本文重点回顾"><a href="#（一）本文重点回顾" class="headerlink" title="（一）本文重点回顾"></a>（一）本文重点回顾</h2><p>通过本文的深入学习，您已经掌握了：</p>
<p><strong>文件操作基础：</strong></p>
<ul>
<li>文本文件和二进制文件的读写</li>
<li>文件指针和随机访问技术</li>
<li>错误处理和异常情况处理</li>
</ul>
<p><strong>高级文件技术：</strong></p>
<ul>
<li>结构体的序列化和反序列化</li>
<li>CSV文件的解析和生成</li>
<li>文件格式设计和版本控制</li>
</ul>
<p><strong>实践应用：</strong></p>
<ul>
<li>个人财务管理系统的完整实现</li>
<li>数据持久化的最佳实践</li>
<li>文件备份和数据导出功能</li>
</ul>
<h2 id="（二）最佳实践"><a href="#（二）最佳实践" class="headerlink" title="（二）最佳实践"></a>（二）最佳实践</h2><ol>
<li><strong>错误处理</strong>：始终检查文件操作的返回值</li>
<li><strong>资源管理</strong>：及时关闭文件句柄，避免资源泄漏</li>
<li><strong>数据完整性</strong>：使用文件头和校验和保证数据完整性</li>
<li><strong>版本兼容</strong>：设计可扩展的文件格式</li>
<li><strong>备份策略</strong>：定期备份重要数据</li>
</ol>
<a class="btn-beautify blue" href="/2025/08/10/%E5%AD%A6%E4%B9%A0/%E3%80%90%E5%AD%A6%E4%B9%A0%E3%80%91C%E8%AF%AD%E8%A8%80%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7%E4%B8%8E%E7%8E%B0%E4%BB%A3%E7%BC%96%E7%A8%8B%EF%BC%9A%E6%8F%90%E5%8D%87%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F/" title="下一篇：高级特性与现代编程"><i class="far fa-hand-point-right"></i><span>下一篇：高级特性与现代编程</span></a>

<hr>
<p><strong>参考资料：</strong></p>
<ul>
<li>《C程序设计语言》- Brian W. Kernighan &amp; Dennis M. Ritchie</li>
<li>《UNIX环境高级编程》- W. Richard Stevens</li>
<li>《C语言接口与实现》- David R. Hanson</li>
<li>《文件系统设计与实现》- Marshall Kirk McKusick</li>
<li>C语言文件I&#x2F;O参考：<a href="https://en.cppreference.com/w/c/io">https://en.cppreference.com/w/c/io</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<div class="note info flat"><p><strong>C语言系统学习系列 - 第6篇</strong><br>深入探讨C语言文件操作和数据持久化技术，学会构建能够保存和读取数据的实用程序。</p>
</div>

<h1 id="前言"><a href="]]>
    </summary>
    
      <category term="C语言" scheme="https://uwakeme.tech/tags/C%E8%AF%AD%E8%A8%80/"/>
    
      <category term="文件操作" scheme="https://uwakeme.tech/tags/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    
      <category term="数据持久化" scheme="https://uwakeme.tech/tags/%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    
      <category term="I/O编程" scheme="https://uwakeme.tech/tags/I-O%E7%BC%96%E7%A8%8B/"/>
    
      <category term="文件系统" scheme="https://uwakeme.tech/tags/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="学习" scheme="https://uwakeme.tech/categories/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[【学习】C语言结构体与联合体：复杂数据的组织艺术]]></title>
    <link href="https://uwakeme.tech/2025/08/11/%E5%AD%A6%E4%B9%A0/%E3%80%90%E5%AD%A6%E4%B9%A0%E3%80%91C%E8%AF%AD%E8%A8%80%E7%BB%93%E6%9E%84%E4%BD%93%E4%B8%8E%E8%81%94%E5%90%88%E4%BD%93%EF%BC%9A%E5%A4%8D%E6%9D%82%E6%95%B0%E6%8D%AE%E7%9A%84%E7%BB%84%E7%BB%87%E8%89%BA%E6%9C%AF/"/>
    <id>https://uwakeme.tech/2025/08/11/学习/【学习】C语言结构体与联合体：复杂数据的组织艺术/</id>
    <published>2025-08-11T06:00:00.000Z</published>
    <updated>2025-08-11T07:52:53.343Z</updated>
    <content type="html"><![CDATA[<div class="note info flat"><p><strong>C语言系统学习系列 - 第5篇</strong><br>深入探讨C语言中复杂数据类型的组织方式，掌握结构体、联合体和位域的高级用法。</p>
</div>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在前面的学习中，我们掌握了基本数据类型、数组和指针。但在实际编程中，我们经常需要处理更复杂的数据结构。结构体（struct）和联合体（union）是C语言提供的强大工具，让我们能够将相关的数据组织在一起，形成逻辑上的整体。</p>
<p><strong>为什么需要复杂数据类型？</strong></p>
<p>现实世界中的对象往往具有多个属性：</p>
<ul>
<li><strong>学生信息</strong>：姓名、学号、年龄、成绩等</li>
<li><strong>图形对象</strong>：坐标、颜色、大小、形状等</li>
<li><strong>网络数据包</strong>：源地址、目标地址、数据长度、校验和等</li>
<li><strong>文件信息</strong>：文件名、大小、创建时间、权限等</li>
</ul>
<p><strong>本文学习目标：</strong></p>
<ul>
<li>深入理解结构体的定义和使用</li>
<li>掌握联合体的特性和应用场景</li>
<li>学会位域的使用和内存优化</li>
<li>理解内存对齐和填充机制</li>
<li>掌握复杂数据结构的设计模式</li>
</ul>
<a class="btn-beautify green" href="/2025/08/10/%E5%AD%A6%E4%B9%A0/%E3%80%90%E5%AD%A6%E4%B9%A0%E3%80%91C%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88%E4%B8%8E%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%EF%BC%9A%E6%8E%8C%E6%8F%A1%E5%BA%95%E5%B1%82%E7%BC%96%E7%A8%8B%E7%9A%84%E6%A0%B8%E5%BF%83/" title="上一篇：指针与内存管理"><i class="far fa-hand-point-left"></i><span>上一篇：指针与内存管理</span></a>

<h1 id="一、结构体深度解析"><a href="#一、结构体深度解析" class="headerlink" title="一、结构体深度解析"></a>一、结构体深度解析</h1><h2 id="（一）结构体基础与高级特性"><a href="#（一）结构体基础与高级特性" class="headerlink" title="（一）结构体基础与高级特性"></a>（一）结构体基础与高级特性</h2><h3 id="1-结构体的定义和初始化"><a href="#1-结构体的定义和初始化" class="headerlink" title="1. 结构体的定义和初始化"></a>1. 结构体的定义和初始化</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 基本结构体定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> id;                 <span class="comment">// 学号</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">50</span>];          <span class="comment">// 姓名</span></span><br><span class="line">    <span class="type">int</span> age;                <span class="comment">// 年龄</span></span><br><span class="line">    <span class="type">float</span> gpa;              <span class="comment">// 平均绩点</span></span><br><span class="line">    <span class="type">bool</span> is_graduate;       <span class="comment">// 是否毕业</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用typedef简化结构体名称</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">double</span> x, y;            <span class="comment">// 坐标</span></span><br><span class="line">    <span class="type">char</span> color[<span class="number">20</span>];         <span class="comment">// 颜色</span></span><br><span class="line">    <span class="type">float</span> radius;           <span class="comment">// 半径</span></span><br><span class="line">&#125; Circle;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 嵌套结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> year;</span><br><span class="line">    <span class="type">int</span> month;</span><br><span class="line">    <span class="type">int</span> day;</span><br><span class="line">&#125; Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">char</span> title[<span class="number">100</span>];</span><br><span class="line">    <span class="type">char</span> author[<span class="number">50</span>];</span><br><span class="line">    Date publish_date;      <span class="comment">// 嵌套结构体</span></span><br><span class="line">    <span class="type">float</span> price;</span><br><span class="line">    <span class="type">int</span> pages;</span><br><span class="line">&#125; Book;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">demonstrate_struct_basics</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;=== 结构体基础演示 ===\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 结构体初始化的不同方式</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 方式1：声明后逐个赋值</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">student1</span>;</span></span><br><span class="line">    student1.id = <span class="number">1001</span>;</span><br><span class="line">    <span class="built_in">strcpy</span>(student1.name, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    student1.age = <span class="number">20</span>;</span><br><span class="line">    student1.gpa = <span class="number">3.8f</span>;</span><br><span class="line">    student1.is_graduate = <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 方式2：初始化列表</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">student2</span> =</span> &#123;<span class="number">1002</span>, <span class="string">&quot;李四&quot;</span>, <span class="number">21</span>, <span class="number">3.6f</span>, <span class="literal">false</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 方式3：指定成员初始化（C99特性）</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">student3</span> =</span> &#123;</span><br><span class="line">        .id = <span class="number">1003</span>,</span><br><span class="line">        .name = <span class="string">&quot;王五&quot;</span>,</span><br><span class="line">        .age = <span class="number">22</span>,</span><br><span class="line">        .gpa = <span class="number">3.9f</span>,</span><br><span class="line">        .is_graduate = <span class="literal">true</span></span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 方式4：部分初始化</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">student4</span> =</span> &#123;<span class="number">1004</span>, <span class="string">&quot;赵六&quot;</span>&#125;;  <span class="comment">// 其他成员自动初始化为0</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;学生信息:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;学生1: ID=%d, 姓名=%s, 年龄=%d, GPA=%.1f, 毕业=%s\n&quot;</span>,</span><br><span class="line">           student1.id, student1.name, student1.age, student1.gpa,</span><br><span class="line">           student1.is_graduate ? <span class="string">&quot;是&quot;</span> : <span class="string">&quot;否&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;学生2: ID=%d, 姓名=%s, 年龄=%d, GPA=%.1f, 毕业=%s\n&quot;</span>,</span><br><span class="line">           student2.id, student2.name, student2.age, student2.gpa,</span><br><span class="line">           student2.is_graduate ? <span class="string">&quot;是&quot;</span> : <span class="string">&quot;否&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;学生3: ID=%d, 姓名=%s, 年龄=%d, GPA=%.1f, 毕业=%s\n&quot;</span>,</span><br><span class="line">           student3.id, student3.name, student3.age, student3.gpa,</span><br><span class="line">           student3.is_graduate ? <span class="string">&quot;是&quot;</span> : <span class="string">&quot;否&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;学生4: ID=%d, 姓名=%s, 年龄=%d, GPA=%.1f, 毕业=%s\n&quot;</span>,</span><br><span class="line">           student4.id, student4.name, student4.age, student4.gpa,</span><br><span class="line">           student4.is_graduate ? <span class="string">&quot;是&quot;</span> : <span class="string">&quot;否&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 嵌套结构体演示</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n嵌套结构体演示:\n&quot;</span>);</span><br><span class="line">    Book book = &#123;</span><br><span class="line">        .title = <span class="string">&quot;C语言程序设计&quot;</span>,</span><br><span class="line">        .author = <span class="string">&quot;谭浩强&quot;</span>,</span><br><span class="line">        .publish_date = &#123;<span class="number">2020</span>, <span class="number">3</span>, <span class="number">15</span>&#125;,  <span class="comment">// 嵌套结构体初始化</span></span><br><span class="line">        .price = <span class="number">45.50f</span>,</span><br><span class="line">        .pages = <span class="number">380</span></span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;书籍信息:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;书名: %s\n&quot;</span>, book.title);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;作者: %s\n&quot;</span>, book.author);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;出版日期: %d年%d月%d日\n&quot;</span>, </span><br><span class="line">           book.publish_date.year, book.publish_date.month, book.publish_date.day);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;价格: %.2f元\n&quot;</span>, book.price);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;页数: %d页\n&quot;</span>, book.pages);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结构体作为函数参数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_student_by_value</span><span class="params">(<span class="keyword">struct</span> Student s)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;按值传递 - 学生信息: ID=%d, 姓名=%s\n&quot;</span>, s.id, s.name);</span><br><span class="line">    s.id = <span class="number">9999</span>;  <span class="comment">// 修改不会影响原结构体</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_student_by_pointer</span><span class="params">(<span class="type">const</span> <span class="keyword">struct</span> Student* s)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (s == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;按指针传递 - 学生信息: ID=%d, 姓名=%s\n&quot;</span>, s-&gt;id, s-&gt;name);</span><br><span class="line">    <span class="comment">// s-&gt;id = 9999;  // 由于const限制，不能修改</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">update_student_gpa</span><span class="params">(<span class="keyword">struct</span> Student* s, <span class="type">float</span> new_gpa)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (s != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        s-&gt;gpa = new_gpa;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">demonstrate_struct_parameters</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n=== 结构体参数传递 ===\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">student</span> =</span> &#123;<span class="number">1001</span>, <span class="string">&quot;测试学生&quot;</span>, <span class="number">20</span>, <span class="number">3.5f</span>, <span class="literal">false</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;原始学生信息: ID=%d, GPA=%.1f\n&quot;</span>, student.id, student.gpa);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 按值传递</span></span><br><span class="line">    print_student_by_value(student);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;按值传递后: ID=%d (未改变)\n&quot;</span>, student.id);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 按指针传递</span></span><br><span class="line">    print_student_by_pointer(&amp;student);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 通过指针修改</span></span><br><span class="line">    update_student_gpa(&amp;student, <span class="number">3.8f</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;更新GPA后: GPA=%.1f\n&quot;</span>, student.gpa);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    demonstrate_struct_basics();</span><br><span class="line">    demonstrate_struct_parameters();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-内存对齐和填充"><a href="#2-内存对齐和填充" class="headerlink" title="2. 内存对齐和填充"></a>2. 内存对齐和填充</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stddef.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 演示内存对齐的结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">UnalignedStruct</span> &#123;</span></span><br><span class="line">    <span class="type">char</span> c1;        <span class="comment">// 1字节</span></span><br><span class="line">    <span class="type">int</span> i;          <span class="comment">// 4字节</span></span><br><span class="line">    <span class="type">char</span> c2;        <span class="comment">// 1字节</span></span><br><span class="line">    <span class="type">double</span> d;       <span class="comment">// 8字节</span></span><br><span class="line">    <span class="type">short</span> s;        <span class="comment">// 2字节</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">AlignedStruct</span> &#123;</span></span><br><span class="line">    <span class="type">double</span> d;       <span class="comment">// 8字节，最大对齐要求</span></span><br><span class="line">    <span class="type">int</span> i;          <span class="comment">// 4字节</span></span><br><span class="line">    <span class="type">short</span> s;        <span class="comment">// 2字节</span></span><br><span class="line">    <span class="type">char</span> c1;        <span class="comment">// 1字节</span></span><br><span class="line">    <span class="type">char</span> c2;        <span class="comment">// 1字节</span></span><br><span class="line">    <span class="comment">// 编译器会在末尾添加填充以满足对齐要求</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用#pragma pack控制对齐</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> pack(1)  <span class="comment">// 1字节对齐</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PackedStruct</span> &#123;</span></span><br><span class="line">    <span class="type">char</span> c1;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">char</span> c2;</span><br><span class="line">    <span class="type">double</span> d;</span><br><span class="line">    <span class="type">short</span> s;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> pack()   <span class="comment">// 恢复默认对齐</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">demonstrate_memory_alignment</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;=== 内存对齐演示 ===\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;基本类型对齐要求:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;char:   大小=%zu, 对齐=%zu\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">char</span>), <span class="keyword">_Alignof</span>(<span class="type">char</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;short:  大小=%zu, 对齐=%zu\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">short</span>), <span class="keyword">_Alignof</span>(<span class="type">short</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;int:    大小=%zu, 对齐=%zu\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">int</span>), <span class="keyword">_Alignof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;double: 大小=%zu, 对齐=%zu\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">double</span>), <span class="keyword">_Alignof</span>(<span class="type">double</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n结构体大小比较:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;UnalignedStruct: %zu 字节\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> UnalignedStruct));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;AlignedStruct:   %zu 字节\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> AlignedStruct));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;PackedStruct:    %zu 字节\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> PackedStruct));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 分析UnalignedStruct的内存布局</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nUnalignedStruct成员偏移:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;c1 偏移: %zu\n&quot;</span>, offsetof(<span class="keyword">struct</span> UnalignedStruct, c1));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;i  偏移: %zu\n&quot;</span>, offsetof(<span class="keyword">struct</span> UnalignedStruct, i));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;c2 偏移: %zu\n&quot;</span>, offsetof(<span class="keyword">struct</span> UnalignedStruct, c2));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;d  偏移: %zu\n&quot;</span>, offsetof(<span class="keyword">struct</span> UnalignedStruct, d));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s  偏移: %zu\n&quot;</span>, offsetof(<span class="keyword">struct</span> UnalignedStruct, s));</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nAlignedStruct成员偏移:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;d  偏移: %zu\n&quot;</span>, offsetof(<span class="keyword">struct</span> AlignedStruct, d));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;i  偏移: %zu\n&quot;</span>, offsetof(<span class="keyword">struct</span> AlignedStruct, i));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s  偏移: %zu\n&quot;</span>, offsetof(<span class="keyword">struct</span> AlignedStruct, s));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;c1 偏移: %zu\n&quot;</span>, offsetof(<span class="keyword">struct</span> AlignedStruct, c1));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;c2 偏移: %zu\n&quot;</span>, offsetof(<span class="keyword">struct</span> AlignedStruct, c2));</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nPackedStruct成员偏移:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;c1 偏移: %zu\n&quot;</span>, offsetof(<span class="keyword">struct</span> PackedStruct, c1));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;i  偏移: %zu\n&quot;</span>, offsetof(<span class="keyword">struct</span> PackedStruct, i));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;c2 偏移: %zu\n&quot;</span>, offsetof(<span class="keyword">struct</span> PackedStruct, c2));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;d  偏移: %zu\n&quot;</span>, offsetof(<span class="keyword">struct</span> PackedStruct, d));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s  偏移: %zu\n&quot;</span>, offsetof(<span class="keyword">struct</span> PackedStruct, s));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    demonstrate_memory_alignment();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="（二）结构体数组和指针"><a href="#（二）结构体数组和指针" class="headerlink" title="（二）结构体数组和指针"></a>（二）结构体数组和指针</h2><h3 id="1-结构体数组的使用"><a href="#1-结构体数组的使用" class="headerlink" title="1. 结构体数组的使用"></a>1. 结构体数组的使用</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">30</span>];</span><br><span class="line">    <span class="type">float</span> salary;</span><br><span class="line">    <span class="type">int</span> department_id;</span><br><span class="line">&#125; Employee;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 比较函数，用于排序</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">compare_by_salary</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* a, <span class="type">const</span> <span class="type">void</span>* b)</span> &#123;</span><br><span class="line">    <span class="type">const</span> Employee* emp_a = (<span class="type">const</span> Employee*)a;</span><br><span class="line">    <span class="type">const</span> Employee* emp_b = (<span class="type">const</span> Employee*)b;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (emp_a-&gt;salary &lt; emp_b-&gt;salary) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span> (emp_a-&gt;salary &gt; emp_b-&gt;salary) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">compare_by_name</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* a, <span class="type">const</span> <span class="type">void</span>* b)</span> &#123;</span><br><span class="line">    <span class="type">const</span> Employee* emp_a = (<span class="type">const</span> Employee*)a;</span><br><span class="line">    <span class="type">const</span> Employee* emp_b = (<span class="type">const</span> Employee*)b;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">strcmp</span>(emp_a-&gt;name, emp_b-&gt;name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_employees</span><span class="params">(<span class="type">const</span> Employee employees[], <span class="type">int</span> count)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;员工列表:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%-4s %-15s %-10s %-6s\n&quot;</span>, <span class="string">&quot;ID&quot;</span>, <span class="string">&quot;姓名&quot;</span>, <span class="string">&quot;薪资&quot;</span>, <span class="string">&quot;部门&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;----------------------------------------\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%-4d %-15s %-10.2f %-6d\n&quot;</span>,</span><br><span class="line">               employees[i].id, employees[i].name,</span><br><span class="line">               employees[i].salary, employees[i].department_id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">demonstrate_struct_arrays</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;=== 结构体数组演示 ===\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化员工数组</span></span><br><span class="line">    Employee employees[] = &#123;</span><br><span class="line">        &#123;<span class="number">1001</span>, <span class="string">&quot;张三&quot;</span>, <span class="number">8500.0f</span>, <span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1002</span>, <span class="string">&quot;李四&quot;</span>, <span class="number">9200.0f</span>, <span class="number">2</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1003</span>, <span class="string">&quot;王五&quot;</span>, <span class="number">7800.0f</span>, <span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1004</span>, <span class="string">&quot;赵六&quot;</span>, <span class="number">10500.0f</span>, <span class="number">3</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1005</span>, <span class="string">&quot;钱七&quot;</span>, <span class="number">8900.0f</span>, <span class="number">2</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> emp_count = <span class="keyword">sizeof</span>(employees) / <span class="keyword">sizeof</span>(employees[<span class="number">0</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;原始员工数据:\n&quot;</span>);</span><br><span class="line">    print_employees(employees, emp_count);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 按薪资排序</span></span><br><span class="line">    qsort(employees, emp_count, <span class="keyword">sizeof</span>(Employee), compare_by_salary);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;按薪资排序后:\n&quot;</span>);</span><br><span class="line">    print_employees(employees, emp_count);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 按姓名排序</span></span><br><span class="line">    qsort(employees, emp_count, <span class="keyword">sizeof</span>(Employee), compare_by_name);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;按姓名排序后:\n&quot;</span>);</span><br><span class="line">    print_employees(employees, emp_count);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 查找特定员工</span></span><br><span class="line">    Employee key = &#123;<span class="number">0</span>, <span class="string">&quot;李四&quot;</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    Employee* found = bsearch(&amp;key, employees, emp_count, </span><br><span class="line">                             <span class="keyword">sizeof</span>(Employee), compare_by_name);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (found != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;找到员工: ID=%d, 姓名=%s, 薪资=%.2f\n&quot;</span>,</span><br><span class="line">               found-&gt;id, found-&gt;name, found-&gt;salary);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;未找到指定员工\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    demonstrate_struct_arrays();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="二、联合体详解"><a href="#二、联合体详解" class="headerlink" title="二、联合体详解"></a>二、联合体详解</h1><h2 id="（一）联合体的特性和应用"><a href="#（一）联合体的特性和应用" class="headerlink" title="（一）联合体的特性和应用"></a>（一）联合体的特性和应用</h2><h3 id="1-联合体基础概念"><a href="#1-联合体基础概念" class="headerlink" title="1. 联合体基础概念"></a>1. 联合体基础概念</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 基本联合体定义</span></span><br><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">Data</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">float</span> f;</span><br><span class="line">    <span class="type">char</span> str[<span class="number">20</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带标签的联合体（变体记录）</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">    TYPE_INT,</span><br><span class="line">    TYPE_FLOAT,</span><br><span class="line">    TYPE_STRING</span><br><span class="line">&#125; DataType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    DataType type;      <span class="comment">// 标签，指示当前存储的数据类型</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        <span class="type">float</span> f;</span><br><span class="line">        <span class="type">char</span> str[<span class="number">20</span>];</span><br><span class="line">    &#125; value;</span><br><span class="line">&#125; TaggedUnion;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">demonstrate_union_basics</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;=== 联合体基础演示 ===\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">union</span> <span class="title">Data</span> <span class="title">data</span>;</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;联合体大小: %zu 字节\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">union</span> Data));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;各成员地址:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;data.i   地址: %p\n&quot;</span>, (<span class="type">void</span>*)&amp;data.i);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;data.f   地址: %p\n&quot;</span>, (<span class="type">void</span>*)&amp;data.f);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;data.str 地址: %p\n&quot;</span>, (<span class="type">void</span>*)data.str);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 存储整数</span></span><br><span class="line">    data.i = <span class="number">42</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n存储整数 42:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;data.i = %d\n&quot;</span>, data.i);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;data.f = %f (垃圾值)\n&quot;</span>, data.f);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;data.str = \&quot;%s\&quot; (垃圾值)\n&quot;</span>, data.str);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 存储浮点数</span></span><br><span class="line">    data.f = <span class="number">3.14159f</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n存储浮点数 3.14159:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;data.i = %d (垃圾值)\n&quot;</span>, data.i);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;data.f = %f\n&quot;</span>, data.f);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;data.str = \&quot;%s\&quot; (垃圾值)\n&quot;</span>, data.str);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 存储字符串</span></span><br><span class="line">    <span class="built_in">strcpy</span>(data.str, <span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n存储字符串 \&quot;Hello\&quot;:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;data.i = %d (垃圾值)\n&quot;</span>, data.i);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;data.f = %f (垃圾值)\n&quot;</span>, data.f);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;data.str = \&quot;%s\&quot;\n&quot;</span>, data.str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 安全使用联合体的函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">set_tagged_union_int</span><span class="params">(TaggedUnion* tu, <span class="type">int</span> value)</span> &#123;</span><br><span class="line">    tu-&gt;type = TYPE_INT;</span><br><span class="line">    tu-&gt;value.i = value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">set_tagged_union_float</span><span class="params">(TaggedUnion* tu, <span class="type">float</span> value)</span> &#123;</span><br><span class="line">    tu-&gt;type = TYPE_FLOAT;</span><br><span class="line">    tu-&gt;value.f = value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">set_tagged_union_string</span><span class="params">(TaggedUnion* tu, <span class="type">const</span> <span class="type">char</span>* value)</span> &#123;</span><br><span class="line">    tu-&gt;type = TYPE_STRING;</span><br><span class="line">    <span class="built_in">strncpy</span>(tu-&gt;value.str, value, <span class="keyword">sizeof</span>(tu-&gt;value.str) - <span class="number">1</span>);</span><br><span class="line">    tu-&gt;value.str[<span class="keyword">sizeof</span>(tu-&gt;value.str) - <span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_tagged_union</span><span class="params">(<span class="type">const</span> TaggedUnion* tu)</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (tu-&gt;type) &#123;</span><br><span class="line">        <span class="keyword">case</span> TYPE_INT:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;整数: %d\n&quot;</span>, tu-&gt;value.i);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> TYPE_FLOAT:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;浮点数: %.2f\n&quot;</span>, tu-&gt;value.f);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> TYPE_STRING:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;字符串: \&quot;%s\&quot;\n&quot;</span>, tu-&gt;value.str);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;未知类型\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">demonstrate_tagged_union</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n=== 带标签联合体演示 ===\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    TaggedUnion tu;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 安全地使用联合体</span></span><br><span class="line">    set_tagged_union_int(&amp;tu, <span class="number">100</span>);</span><br><span class="line">    print_tagged_union(&amp;tu);</span><br><span class="line">    </span><br><span class="line">    set_tagged_union_float(&amp;tu, <span class="number">2.718f</span>);</span><br><span class="line">    print_tagged_union(&amp;tu);</span><br><span class="line">    </span><br><span class="line">    set_tagged_union_string(&amp;tu, <span class="string">&quot;C语言&quot;</span>);</span><br><span class="line">    print_tagged_union(&amp;tu);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    demonstrate_union_basics();</span><br><span class="line">    demonstrate_tagged_union();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-联合体的实际应用"><a href="#2-联合体的实际应用" class="headerlink" title="2. 联合体的实际应用"></a>2. 联合体的实际应用</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 网络字节序转换</span></span><br><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">ByteOrder</span> &#123;</span></span><br><span class="line">    <span class="type">uint32_t</span> value;</span><br><span class="line">    <span class="type">uint8_t</span> bytes[<span class="number">4</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// IP地址表示</span></span><br><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">IPAddress</span> &#123;</span></span><br><span class="line">    <span class="type">uint32_t</span> addr;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">        <span class="type">uint8_t</span> a, b, c, d;</span><br><span class="line">    &#125; octets;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 颜色表示（RGB和十六进制）</span></span><br><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">Color</span> &#123;</span></span><br><span class="line">    <span class="type">uint32_t</span> hex;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">        <span class="type">uint8_t</span> blue;</span><br><span class="line">        <span class="type">uint8_t</span> green;</span><br><span class="line">        <span class="type">uint8_t</span> red;</span><br><span class="line">        <span class="type">uint8_t</span> alpha;</span><br><span class="line">    &#125; rgba;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">demonstrate_practical_unions</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;=== 联合体实际应用 ===\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 字节序检测</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span> <span class="title">ByteOrder</span> <span class="title">test</span> =</span> &#123;<span class="number">0x12345678</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;字节序检测:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;32位值: 0x%08X\n&quot;</span>, test.value);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;字节序列: &quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;0x%02X &quot;</span>, test.bytes[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (test.bytes[<span class="number">0</span>] == <span class="number">0x78</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;(小端序)\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;(大端序)\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// IP地址操作</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nIP地址操作:\n&quot;</span>);</span><br><span class="line">    <span class="class"><span class="keyword">union</span> <span class="title">IPAddress</span> <span class="title">ip</span> =</span> &#123;<span class="number">0xC0A80101</span>&#125;;  <span class="comment">// 192.168.1.1</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;IP地址: %d.%d.%d.%d\n&quot;</span>, </span><br><span class="line">           ip.octets.a, ip.octets.b, ip.octets.c, ip.octets.d);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;32位表示: 0x%08X\n&quot;</span>, ip.addr);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 颜色操作</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n颜色操作:\n&quot;</span>);</span><br><span class="line">    <span class="class"><span class="keyword">union</span> <span class="title">Color</span> <span class="title">color</span> =</span> &#123;<span class="number">0xFF0080FF</span>&#125;;  <span class="comment">// 红色，半透明</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;颜色值: 0x%08X\n&quot;</span>, color.hex);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;RGBA: R=%d, G=%d, B=%d, A=%d\n&quot;</span>,</span><br><span class="line">           color.rgba.red, color.rgba.green, </span><br><span class="line">           color.rgba.blue, color.rgba.alpha);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 修改单个颜色分量</span></span><br><span class="line">    color.rgba.green = <span class="number">255</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;修改绿色分量后: 0x%08X\n&quot;</span>, color.hex);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;新RGBA: R=%d, G=%d, B=%d, A=%d\n&quot;</span>,</span><br><span class="line">           color.rgba.red, color.rgba.green, </span><br><span class="line">           color.rgba.blue, color.rgba.alpha);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    demonstrate_practical_unions();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="三、位域（Bit-Fields）"><a href="#三、位域（Bit-Fields）" class="headerlink" title="三、位域（Bit Fields）"></a>三、位域（Bit Fields）</h1><h2 id="（一）位域的定义和使用"><a href="#（一）位域的定义和使用" class="headerlink" title="（一）位域的定义和使用"></a>（一）位域的定义和使用</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 位域结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Flags</span> &#123;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> is_visible : <span class="number">1</span>;    <span class="comment">// 1位</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> is_enabled : <span class="number">1</span>;    <span class="comment">// 1位</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> priority : <span class="number">3</span>;      <span class="comment">// 3位 (0-7)</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> category : <span class="number">4</span>;      <span class="comment">// 4位 (0-15)</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> reserved : <span class="number">7</span>;      <span class="comment">// 7位保留</span></span><br><span class="line">    <span class="comment">// 总共16位，占用2字节</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件权限位域</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FilePermissions</span> &#123;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> owner_read : <span class="number">1</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> owner_write : <span class="number">1</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> owner_execute : <span class="number">1</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> group_read : <span class="number">1</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> group_write : <span class="number">1</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> group_execute : <span class="number">1</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> other_read : <span class="number">1</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> other_write : <span class="number">1</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> other_execute : <span class="number">1</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> : <span class="number">7</span>;  <span class="comment">// 未命名位域，用于填充</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 网络数据包头部</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PacketHeader</span> &#123;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> version : <span class="number">4</span>;       <span class="comment">// IP版本</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> header_length : <span class="number">4</span>; <span class="comment">// 头部长度</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> type_of_service : <span class="number">8</span>; <span class="comment">// 服务类型</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> total_length : <span class="number">16</span>;  <span class="comment">// 总长度</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> identification : <span class="number">16</span>; <span class="comment">// 标识</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> flags : <span class="number">3</span>;         <span class="comment">// 标志</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> fragment_offset : <span class="number">13</span>; <span class="comment">// 片偏移</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> ttl : <span class="number">8</span>;           <span class="comment">// 生存时间</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> protocol : <span class="number">8</span>;      <span class="comment">// 协议</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> checksum : <span class="number">16</span>;     <span class="comment">// 校验和</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">demonstrate_bit_fields</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;=== 位域演示 ===\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;结构体大小:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;struct Flags: %zu 字节\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> Flags));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;struct FilePermissions: %zu 字节\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> FilePermissions));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;struct PacketHeader: %zu 字节\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> PacketHeader));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用标志位域</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Flags</span> <span class="title">flags</span> =</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    flags.is_visible = <span class="number">1</span>;</span><br><span class="line">    flags.is_enabled = <span class="number">0</span>;</span><br><span class="line">    flags.priority = <span class="number">5</span>;</span><br><span class="line">    flags.category = <span class="number">12</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n标志设置:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;可见: %s\n&quot;</span>, flags.is_visible ? <span class="string">&quot;是&quot;</span> : <span class="string">&quot;否&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;启用: %s\n&quot;</span>, flags.is_enabled ? <span class="string">&quot;是&quot;</span> : <span class="string">&quot;否&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;优先级: %u\n&quot;</span>, flags.priority);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;类别: %u\n&quot;</span>, flags.category);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 文件权限演示</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">FilePermissions</span> <span class="title">perms</span> =</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    perms.owner_read = <span class="number">1</span>;</span><br><span class="line">    perms.owner_write = <span class="number">1</span>;</span><br><span class="line">    perms.owner_execute = <span class="number">1</span>;</span><br><span class="line">    perms.group_read = <span class="number">1</span>;</span><br><span class="line">    perms.group_execute = <span class="number">1</span>;</span><br><span class="line">    perms.other_read = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n文件权限 (类似 rwxr-xr--):\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;所有者: %c%c%c\n&quot;</span>,</span><br><span class="line">           perms.owner_read ? <span class="string">&#x27;r&#x27;</span> : <span class="string">&#x27;-&#x27;</span>,</span><br><span class="line">           perms.owner_write ? <span class="string">&#x27;w&#x27;</span> : <span class="string">&#x27;-&#x27;</span>,</span><br><span class="line">           perms.owner_execute ? <span class="string">&#x27;x&#x27;</span> : <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;组: %c%c%c\n&quot;</span>,</span><br><span class="line">           perms.group_read ? <span class="string">&#x27;r&#x27;</span> : <span class="string">&#x27;-&#x27;</span>,</span><br><span class="line">           perms.group_write ? <span class="string">&#x27;w&#x27;</span> : <span class="string">&#x27;-&#x27;</span>,</span><br><span class="line">           perms.group_execute ? <span class="string">&#x27;x&#x27;</span> : <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;其他: %c%c%c\n&quot;</span>,</span><br><span class="line">           perms.other_read ? <span class="string">&#x27;r&#x27;</span> : <span class="string">&#x27;-&#x27;</span>,</span><br><span class="line">           perms.other_write ? <span class="string">&#x27;w&#x27;</span> : <span class="string">&#x27;-&#x27;</span>,</span><br><span class="line">           perms.other_execute ? <span class="string">&#x27;x&#x27;</span> : <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 网络包头演示</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">PacketHeader</span> <span class="title">packet</span> =</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    packet.version = <span class="number">4</span>;          <span class="comment">// IPv4</span></span><br><span class="line">    packet.header_length = <span class="number">5</span>;    <span class="comment">// 20字节</span></span><br><span class="line">    packet.total_length = <span class="number">1500</span>;  <span class="comment">// 1500字节</span></span><br><span class="line">    packet.ttl = <span class="number">64</span>;            <span class="comment">// 64跳</span></span><br><span class="line">    packet.protocol = <span class="number">6</span>;         <span class="comment">// TCP</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n网络包头信息:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;IP版本: %u\n&quot;</span>, packet.version);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;头部长度: %u (实际: %u字节)\n&quot;</span>, packet.header_length, packet.header_length * <span class="number">4</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;总长度: %u字节\n&quot;</span>, packet.total_length);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;TTL: %u\n&quot;</span>, packet.ttl);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;协议: %u (TCP)\n&quot;</span>, packet.protocol);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    demonstrate_bit_fields();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="四、实践项目：学生管理系统（完整版）"><a href="#四、实践项目：学生管理系统（完整版）" class="headerlink" title="四、实践项目：学生管理系统（完整版）"></a>四、实践项目：学生管理系统（完整版）</h1><p>让我们创建一个使用结构体、联合体和位域的完整学生管理系统：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_NAME_LENGTH 50</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_STUDENTS 1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 日期结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> year;</span><br><span class="line">    <span class="type">int</span> month;</span><br><span class="line">    <span class="type">int</span> day;</span><br><span class="line">&#125; Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 成绩联合体（支持不同评分系统）</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">    GRADE_PERCENTAGE,   <span class="comment">// 百分制</span></span><br><span class="line">    GRADE_GPA,         <span class="comment">// GPA制</span></span><br><span class="line">    GRADE_LETTER       <span class="comment">// 字母制</span></span><br><span class="line">&#125; GradeType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">    <span class="type">float</span> percentage;   <span class="comment">// 0-100</span></span><br><span class="line">    <span class="type">float</span> gpa;         <span class="comment">// 0.0-4.0</span></span><br><span class="line">    <span class="type">char</span> letter;       <span class="comment">// A, B, C, D, F</span></span><br><span class="line">&#125; GradeValue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    GradeType type;</span><br><span class="line">    GradeValue value;</span><br><span class="line">&#125; Grade;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 学生状态位域</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">StudentStatus</span> &#123;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> is_active : <span class="number">1</span>;      <span class="comment">// 是否在校</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> is_graduate : <span class="number">1</span>;    <span class="comment">// 是否毕业</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> has_scholarship : <span class="number">1</span>; <span class="comment">// 是否有奖学金</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> is_international : <span class="number">1</span>; <span class="comment">// 是否国际学生</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> year : <span class="number">4</span>;           <span class="comment">// 年级 (1-15)</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> semester : <span class="number">4</span>;       <span class="comment">// 学期 (1-15)</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> : <span class="number">4</span>;               <span class="comment">// 保留位</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 完整的学生结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="type">char</span> name[MAX_NAME_LENGTH];</span><br><span class="line">    Date birth_date;</span><br><span class="line">    Date enrollment_date;</span><br><span class="line">    Grade grades[<span class="number">10</span>];               <span class="comment">// 最多10门课程成绩</span></span><br><span class="line">    <span class="type">int</span> grade_count;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">StudentStatus</span> <span class="title">status</span>;</span></span><br><span class="line">    <span class="type">char</span> major[MAX_NAME_LENGTH];</span><br><span class="line">    <span class="type">char</span> email[MAX_NAME_LENGTH];</span><br><span class="line">&#125; Student;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 学生管理系统</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    Student* students;</span><br><span class="line">    <span class="type">int</span> count;</span><br><span class="line">    <span class="type">int</span> capacity;</span><br><span class="line">&#125; StudentSystem;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建学生管理系统</span></span><br><span class="line">StudentSystem* <span class="title function_">create_student_system</span><span class="params">(<span class="type">int</span> initial_capacity)</span> &#123;</span><br><span class="line">    StudentSystem* system = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(StudentSystem));</span><br><span class="line">    <span class="keyword">if</span> (system == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    system-&gt;students = <span class="built_in">malloc</span>(initial_capacity * <span class="keyword">sizeof</span>(Student));</span><br><span class="line">    <span class="keyword">if</span> (system-&gt;students == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">free</span>(system);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    system-&gt;count = <span class="number">0</span>;</span><br><span class="line">    system-&gt;capacity = initial_capacity;</span><br><span class="line">    <span class="keyword">return</span> system;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加学生</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">add_student</span><span class="params">(StudentSystem* system, <span class="type">const</span> Student* student)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (system == <span class="literal">NULL</span> || student == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 扩容检查</span></span><br><span class="line">    <span class="keyword">if</span> (system-&gt;count &gt;= system-&gt;capacity) &#123;</span><br><span class="line">        <span class="type">int</span> new_capacity = system-&gt;capacity * <span class="number">2</span>;</span><br><span class="line">        Student* new_students = <span class="built_in">realloc</span>(system-&gt;students, </span><br><span class="line">                                       new_capacity * <span class="keyword">sizeof</span>(Student));</span><br><span class="line">        <span class="keyword">if</span> (new_students == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">        system-&gt;students = new_students;</span><br><span class="line">        system-&gt;capacity = new_capacity;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    system-&gt;students[system-&gt;count] = *student;</span><br><span class="line">    system-&gt;count++;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找学生</span></span><br><span class="line">Student* <span class="title function_">find_student_by_id</span><span class="params">(StudentSystem* system, <span class="type">int</span> id)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (system == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; system-&gt;count; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (system-&gt;students[i].id == id) &#123;</span><br><span class="line">            <span class="keyword">return</span> &amp;system-&gt;students[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印成绩</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_grade</span><span class="params">(<span class="type">const</span> Grade* grade)</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (grade-&gt;type) &#123;</span><br><span class="line">        <span class="keyword">case</span> GRADE_PERCENTAGE:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%.1f%%&quot;</span>, grade-&gt;value.percentage);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> GRADE_GPA:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%.2f GPA&quot;</span>, grade-&gt;value.gpa);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> GRADE_LETTER:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, grade-&gt;value.letter);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印学生信息</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_student</span><span class="params">(<span class="type">const</span> Student* student)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (student == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;学生信息:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  学号: %d\n&quot;</span>, student-&gt;id);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  姓名: %s\n&quot;</span>, student-&gt;name);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  专业: %s\n&quot;</span>, student-&gt;major);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  邮箱: %s\n&quot;</span>, student-&gt;email);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  出生日期: %d-%02d-%02d\n&quot;</span>, </span><br><span class="line">           student-&gt;birth_date.year, student-&gt;birth_date.month, student-&gt;birth_date.day);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  入学日期: %d-%02d-%02d\n&quot;</span>, </span><br><span class="line">           student-&gt;enrollment_date.year, student-&gt;enrollment_date.month, student-&gt;enrollment_date.day);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  状态: &quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, student-&gt;status.is_active ? <span class="string">&quot;在校&quot;</span> : <span class="string">&quot;离校&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;, %s&quot;</span>, student-&gt;status.is_graduate ? <span class="string">&quot;已毕业&quot;</span> : <span class="string">&quot;在读&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;, %d年级&quot;</span>, student-&gt;status.year);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;, 第%d学期&quot;</span>, student-&gt;status.semester);</span><br><span class="line">    <span class="keyword">if</span> (student-&gt;status.has_scholarship) <span class="built_in">printf</span>(<span class="string">&quot;, 有奖学金&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (student-&gt;status.is_international) <span class="built_in">printf</span>(<span class="string">&quot;, 国际学生&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (student-&gt;grade_count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;  成绩: &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; student-&gt;grade_count; i++) &#123;</span><br><span class="line">            print_grade(&amp;student-&gt;grades[i]);</span><br><span class="line">            <span class="keyword">if</span> (i &lt; student-&gt;grade_count - <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 演示函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">demonstrate_student_system</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;=== 学生管理系统演示 ===\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    StudentSystem* system = create_student_system(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">if</span> (system == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;系统创建失败\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建示例学生</span></span><br><span class="line">    Student student1 = &#123;</span><br><span class="line">        .id = <span class="number">2021001</span>,</span><br><span class="line">        .name = <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">        .birth_date = &#123;<span class="number">2000</span>, <span class="number">5</span>, <span class="number">15</span>&#125;,</span><br><span class="line">        .enrollment_date = &#123;<span class="number">2021</span>, <span class="number">9</span>, <span class="number">1</span>&#125;,</span><br><span class="line">        .grade_count = <span class="number">3</span>,</span><br><span class="line">        .grades = &#123;</span><br><span class="line">            &#123;GRADE_PERCENTAGE, &#123;.percentage = <span class="number">85.5f</span>&#125;&#125;,</span><br><span class="line">            &#123;GRADE_GPA, &#123;.gpa = <span class="number">3.7f</span>&#125;&#125;,</span><br><span class="line">            &#123;GRADE_LETTER, &#123;.letter = <span class="string">&#x27;A&#x27;</span>&#125;&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        .status = &#123;</span><br><span class="line">            .is_active = <span class="number">1</span>,</span><br><span class="line">            .is_graduate = <span class="number">0</span>,</span><br><span class="line">            .has_scholarship = <span class="number">1</span>,</span><br><span class="line">            .is_international = <span class="number">0</span>,</span><br><span class="line">            .year = <span class="number">3</span>,</span><br><span class="line">            .semester = <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        .major = <span class="string">&quot;计算机科学&quot;</span>,</span><br><span class="line">        .email = <span class="string">&quot;zhangsan@university.edu&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    Student student2 = &#123;</span><br><span class="line">        .id = <span class="number">2021002</span>,</span><br><span class="line">        .name = <span class="string">&quot;李四&quot;</span>,</span><br><span class="line">        .birth_date = &#123;<span class="number">1999</span>, <span class="number">12</span>, <span class="number">3</span>&#125;,</span><br><span class="line">        .enrollment_date = &#123;<span class="number">2021</span>, <span class="number">9</span>, <span class="number">1</span>&#125;,</span><br><span class="line">        .grade_count = <span class="number">2</span>,</span><br><span class="line">        .grades = &#123;</span><br><span class="line">            &#123;GRADE_PERCENTAGE, &#123;.percentage = <span class="number">92.0f</span>&#125;&#125;,</span><br><span class="line">            &#123;GRADE_GPA, &#123;.gpa = <span class="number">3.9f</span>&#125;&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        .status = &#123;</span><br><span class="line">            .is_active = <span class="number">1</span>,</span><br><span class="line">            .is_graduate = <span class="number">0</span>,</span><br><span class="line">            .has_scholarship = <span class="number">0</span>,</span><br><span class="line">            .is_international = <span class="number">1</span>,</span><br><span class="line">            .year = <span class="number">3</span>,</span><br><span class="line">            .semester = <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        .major = <span class="string">&quot;电子工程&quot;</span>,</span><br><span class="line">        .email = <span class="string">&quot;lisi@university.edu&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 添加学生</span></span><br><span class="line">    add_student(system, &amp;student1);</span><br><span class="line">    add_student(system, &amp;student2);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;系统中共有 %d 名学生\n\n&quot;</span>, system-&gt;count);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 显示所有学生</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; system-&gt;count; i++) &#123;</span><br><span class="line">        print_student(&amp;system-&gt;students[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 查找特定学生</span></span><br><span class="line">    Student* found = find_student_by_id(system, <span class="number">2021001</span>);</span><br><span class="line">    <span class="keyword">if</span> (found != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;找到学号为 2021001 的学生:\n&quot;</span>);</span><br><span class="line">        print_student(found);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 清理内存</span></span><br><span class="line">    <span class="built_in">free</span>(system-&gt;students);</span><br><span class="line">    <span class="built_in">free</span>(system);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;系统已清理\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    demonstrate_student_system();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="五、总结与下一步"><a href="#五、总结与下一步" class="headerlink" title="五、总结与下一步"></a>五、总结与下一步</h1><h2 id="（一）本文重点回顾"><a href="#（一）本文重点回顾" class="headerlink" title="（一）本文重点回顾"></a>（一）本文重点回顾</h2><p>通过本文的深入学习，您已经掌握了：</p>
<p><strong>结构体高级特性：</strong></p>
<ul>
<li>结构体的定义、初始化和使用</li>
<li>内存对齐和填充机制</li>
<li>结构体数组和指针操作</li>
</ul>
<p><strong>联合体应用：</strong></p>
<ul>
<li>联合体的特性和内存共享</li>
<li>带标签联合体的安全使用</li>
<li>联合体在系统编程中的应用</li>
</ul>
<p><strong>位域技术：</strong></p>
<ul>
<li>位域的定义和使用</li>
<li>内存优化和位操作</li>
<li>在协议解析中的应用</li>
</ul>
<p><strong>综合实践：</strong></p>
<ul>
<li>复杂数据结构的设计</li>
<li>学生管理系统的完整实现</li>
<li>多种数据组织方式的结合使用</li>
</ul>
<h2 id="（二）设计原则"><a href="#（二）设计原则" class="headerlink" title="（二）设计原则"></a>（二）设计原则</h2><ol>
<li><strong>数据封装</strong>：将相关数据组织在一起</li>
<li><strong>内存效率</strong>：合理使用对齐和位域</li>
<li><strong>类型安全</strong>：使用标签联合体避免错误</li>
<li><strong>可维护性</strong>：清晰的结构设计和命名</li>
</ol>
<a class="btn-beautify blue" href="/2025/08/10/%E5%AD%A6%E4%B9%A0/%E3%80%90%E5%AD%A6%E4%B9%A0%E3%80%91C%E8%AF%AD%E8%A8%80%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E4%B8%8E%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96%EF%BC%9A%E6%9E%84%E5%BB%BA%E5%AE%9E%E7%94%A8%E7%A8%8B%E5%BA%8F/" title="下一篇：文件操作与数据持久化"><i class="far fa-hand-point-right"></i><span>下一篇：文件操作与数据持久化</span></a>

<hr>
<p><strong>参考资料：</strong></p>
<ul>
<li>《C程序设计语言》- Brian W. Kernighan &amp; Dennis M. Ritchie</li>
<li>《C和指针》- Kenneth A. Reek</li>
<li>《深入理解计算机系统》- Randal E. Bryant</li>
<li>《数据结构与算法分析》- Mark Allen Weiss</li>
<li>C语言结构体参考：<a href="https://en.cppreference.com/w/c/language/struct">https://en.cppreference.com/w/c/language/struct</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<div class="note info flat"><p><strong>C语言系统学习系列 - 第5篇</strong><br>深入探讨C语言中复杂数据类型的组织方式，掌握结构体、联合体和位域的高级用法。</p>
</div>

<h1 id="前言"><a href="#]]>
    </summary>
    
      <category term="C语言" scheme="https://uwakeme.tech/tags/C%E8%AF%AD%E8%A8%80/"/>
    
      <category term="结构体" scheme="https://uwakeme.tech/tags/%E7%BB%93%E6%9E%84%E4%BD%93/"/>
    
      <category term="联合体" scheme="https://uwakeme.tech/tags/%E8%81%94%E5%90%88%E4%BD%93/"/>
    
      <category term="数据组织" scheme="https://uwakeme.tech/tags/%E6%95%B0%E6%8D%AE%E7%BB%84%E7%BB%87/"/>
    
      <category term="内存对齐" scheme="https://uwakeme.tech/tags/%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/"/>
    
      <category term="学习" scheme="https://uwakeme.tech/categories/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[【学习】C语言指针与内存管理：掌握底层编程的核心]]></title>
    <link href="https://uwakeme.tech/2025/08/11/%E5%AD%A6%E4%B9%A0/%E3%80%90%E5%AD%A6%E4%B9%A0%E3%80%91C%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88%E4%B8%8E%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%EF%BC%9A%E6%8E%8C%E6%8F%A1%E5%BA%95%E5%B1%82%E7%BC%96%E7%A8%8B%E7%9A%84%E6%A0%B8%E5%BF%83/"/>
    <id>https://uwakeme.tech/2025/08/11/学习/【学习】C语言指针与内存管理：掌握底层编程的核心/</id>
    <published>2025-08-11T05:00:00.000Z</published>
    <updated>2025-08-11T07:52:38.717Z</updated>
    <content type="html"><![CDATA[<div class="note info flat"><p><strong>C语言系统学习系列 - 第4篇</strong><br>深入探讨C语言最核心也最具挑战性的概念——指针与内存管理，这是掌握系统级编程的关键技能。</p>
</div>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>指针是C语言的灵魂，也是区别于其他高级编程语言的核心特性。它让程序员能够直接操作内存，实现高效的数据结构和算法。同时，指针也是C语言学习中的难点，需要深入理解计算机的内存模型。</p>
<p><strong>为什么指针如此重要？</strong></p>
<p>在现代软件开发中，理解指针和内存管理至关重要：</p>
<ul>
<li><strong>系统编程</strong>：操作系统、驱动程序、嵌入式系统</li>
<li><strong>高性能计算</strong>：科学计算、图像处理、游戏引擎</li>
<li><strong>数据结构</strong>：链表、树、图等复杂数据结构的实现</li>
<li><strong>内存优化</strong>：减少内存占用，提高程序性能</li>
</ul>
<p><strong>本文学习目标：</strong></p>
<ul>
<li>深入理解指针的本质和内存模型</li>
<li>掌握指针的各种用法和技巧</li>
<li>学会动态内存分配和管理</li>
<li>理解指针与数组、函数的关系</li>
<li>掌握复杂指针类型的声明和使用</li>
</ul>
<a class="btn-beautify green" href="/2025/08/10/%E5%AD%A6%E4%B9%A0/%E3%80%90%E5%AD%A6%E4%B9%A0%E3%80%91C%E8%AF%AD%E8%A8%80%E6%95%B0%E7%BB%84%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E7%9A%84%E8%89%BA%E6%9C%AF/" title="上一篇：数组与字符串深度解析"><i class="far fa-hand-point-left"></i><span>上一篇：数组与字符串深度解析</span></a>

<h1 id="一、指针基础与内存模型"><a href="#一、指针基础与内存模型" class="headerlink" title="一、指针基础与内存模型"></a>一、指针基础与内存模型</h1><h2 id="（一）指针的本质"><a href="#（一）指针的本质" class="headerlink" title="（一）指针的本质"></a>（一）指针的本质</h2><h3 id="1-内存地址与指针变量"><a href="#1-内存地址与指针变量" class="headerlink" title="1. 内存地址与指针变量"></a>1. 内存地址与指针变量</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">demonstrate_pointer_basics</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;=== 指针基础概念演示 ===\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 基本变量</span></span><br><span class="line">    <span class="type">int</span> num = <span class="number">42</span>;</span><br><span class="line">    <span class="type">float</span> pi = <span class="number">3.14159f</span>;</span><br><span class="line">    <span class="type">char</span> letter = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 指针变量</span></span><br><span class="line">    <span class="type">int</span>* int_ptr = &amp;num;        <span class="comment">// 指向整数的指针</span></span><br><span class="line">    <span class="type">float</span>* float_ptr = &amp;pi;     <span class="comment">// 指向浮点数的指针</span></span><br><span class="line">    <span class="type">char</span>* char_ptr = &amp;letter;   <span class="comment">// 指向字符的指针</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;变量值和地址:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;num = %d, 地址: %p\n&quot;</span>, num, (<span class="type">void</span>*)&amp;num);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;pi = %.5f, 地址: %p\n&quot;</span>, pi, (<span class="type">void</span>*)&amp;pi);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;letter = &#x27;%c&#x27;, 地址: %p\n&quot;</span>, letter, (<span class="type">void</span>*)&amp;letter);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n指针变量:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;int_ptr = %p, 指向的值: %d\n&quot;</span>, (<span class="type">void</span>*)int_ptr, *int_ptr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;float_ptr = %p, 指向的值: %.5f\n&quot;</span>, (<span class="type">void</span>*)float_ptr, *float_ptr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;char_ptr = %p, 指向的值: &#x27;%c&#x27;\n&quot;</span>, (<span class="type">void</span>*)char_ptr, *char_ptr);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n指针变量自身的地址:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&amp;int_ptr = %p\n&quot;</span>, (<span class="type">void</span>*)&amp;int_ptr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&amp;float_ptr = %p\n&quot;</span>, (<span class="type">void</span>*)&amp;float_ptr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&amp;char_ptr = %p\n&quot;</span>, (<span class="type">void</span>*)&amp;char_ptr);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 指针的大小</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n指针大小:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sizeof(int*) = %zu 字节\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">int</span>*));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sizeof(float*) = %zu 字节\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">float</span>*));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sizeof(char*) = %zu 字节\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">char</span>*));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sizeof(void*) = %zu 字节\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">void</span>*));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 地址运算</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n地址运算:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;int_ptr + 1 = %p (偏移 %zu 字节)\n&quot;</span>, </span><br><span class="line">           (<span class="type">void</span>*)(int_ptr + <span class="number">1</span>), <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;float_ptr + 1 = %p (偏移 %zu 字节)\n&quot;</span>, </span><br><span class="line">           (<span class="type">void</span>*)(float_ptr + <span class="number">1</span>), <span class="keyword">sizeof</span>(<span class="type">float</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;char_ptr + 1 = %p (偏移 %zu 字节)\n&quot;</span>, </span><br><span class="line">           (<span class="type">void</span>*)(char_ptr + <span class="number">1</span>), <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指针运算详解</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">demonstrate_pointer_arithmetic</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n=== 指针运算详解 ===\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="built_in">array</span>[<span class="number">5</span>] = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;;</span><br><span class="line">    <span class="type">int</span>* ptr = <span class="built_in">array</span>;  <span class="comment">// 指向数组第一个元素</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;数组内容: &quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, <span class="built_in">array</span>[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n指针遍历数组:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ptr + %d: 地址=%p, 值=%d\n&quot;</span>, </span><br><span class="line">               i, (<span class="type">void</span>*)(ptr + i), *(ptr + i));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 指针递增</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n指针递增演示:\n&quot;</span>);</span><br><span class="line">    <span class="type">int</span>* moving_ptr = <span class="built_in">array</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;moving_ptr: 地址=%p, 值=%d\n&quot;</span>, </span><br><span class="line">               (<span class="type">void</span>*)moving_ptr, *moving_ptr);</span><br><span class="line">        moving_ptr++;  <span class="comment">// 指针向前移动一个int的大小</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 指针相减</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n指针相减:\n&quot;</span>);</span><br><span class="line">    <span class="type">int</span>* start = &amp;<span class="built_in">array</span>[<span class="number">0</span>];</span><br><span class="line">    <span class="type">int</span>* end = &amp;<span class="built_in">array</span>[<span class="number">4</span>];</span><br><span class="line">    <span class="type">ptrdiff_t</span> diff = end - start;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;end - start = %td (元素个数)\n&quot;</span>, diff);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;实际字节差: %td 字节\n&quot;</span>, (<span class="type">char</span>*)end - (<span class="type">char</span>*)start);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    demonstrate_pointer_basics();</span><br><span class="line">    demonstrate_pointer_arithmetic();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-指针类型和类型转换"><a href="#2-指针类型和类型转换" class="headerlink" title="2. 指针类型和类型转换"></a>2. 指针类型和类型转换</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">demonstrate_pointer_types</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;=== 指针类型和转换 ===\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 不同类型的指针</span></span><br><span class="line">    <span class="type">int</span> num = <span class="number">0x12345678</span>;</span><br><span class="line">    <span class="type">int</span>* int_ptr = &amp;num;</span><br><span class="line">    <span class="type">char</span>* char_ptr = (<span class="type">char</span>*)&amp;num;  <span class="comment">// 类型转换</span></span><br><span class="line">    <span class="type">void</span>* void_ptr = &amp;num;         <span class="comment">// 通用指针</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;原始数据: 0x%08X\n&quot;</span>, num);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;通过int*访问: 0x%08X\n&quot;</span>, *int_ptr);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 通过char*逐字节访问</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;通过char*逐字节访问: &quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(<span class="type">int</span>); i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;0x%02X &quot;</span>, (<span class="type">unsigned</span> <span class="type">char</span>)char_ptr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// void指针的使用</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nvoid指针演示:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;void_ptr地址: %p\n&quot;</span>, void_ptr);</span><br><span class="line">    <span class="comment">// printf(&quot;void_ptr值: %d\n&quot;, *void_ptr);  // 错误！不能解引用void*</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;转换为int*后的值: %d\n&quot;</span>, *(<span class="type">int</span>*)void_ptr);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 常量指针和指针常量</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n常量指针和指针常量:\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>, b = <span class="number">20</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 指向常量的指针（指针可变，指向的值不可变）</span></span><br><span class="line">    <span class="type">const</span> <span class="type">int</span>* ptr_to_const = &amp;a;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ptr_to_const指向的值: %d\n&quot;</span>, *ptr_to_const);</span><br><span class="line">    <span class="comment">// *ptr_to_const = 15;  // 错误！不能修改指向的值</span></span><br><span class="line">    ptr_to_const = &amp;b;      <span class="comment">// 可以改变指针指向</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;改变指向后的值: %d\n&quot;</span>, *ptr_to_const);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 常量指针（指针不可变，指向的值可变）</span></span><br><span class="line">    <span class="type">int</span>* <span class="type">const</span> const_ptr = &amp;a;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;const_ptr指向的值: %d\n&quot;</span>, *const_ptr);</span><br><span class="line">    *const_ptr = <span class="number">15</span>;        <span class="comment">// 可以修改指向的值</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;修改值后: %d\n&quot;</span>, *const_ptr);</span><br><span class="line">    <span class="comment">// const_ptr = &amp;b;      // 错误！不能改变指针指向</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 指向常量的常量指针（指针和值都不可变）</span></span><br><span class="line">    <span class="type">const</span> <span class="type">int</span>* <span class="type">const</span> const_ptr_to_const = &amp;a;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;const_ptr_to_const指向的值: %d\n&quot;</span>, *const_ptr_to_const);</span><br><span class="line">    <span class="comment">// *const_ptr_to_const = 25;  // 错误！不能修改值</span></span><br><span class="line">    <span class="comment">// const_ptr_to_const = &amp;b;   // 错误！不能改变指向</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数指针演示</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123; <span class="keyword">return</span> a + b; &#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">subtract</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123; <span class="keyword">return</span> a - b; &#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">multiply</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123; <span class="keyword">return</span> a * b; &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">demonstrate_function_pointers</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n=== 函数指针演示 ===\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 函数指针声明和使用</span></span><br><span class="line">    <span class="type">int</span> (*operation)(<span class="type">int</span>, <span class="type">int</span>);  <span class="comment">// 声明函数指针</span></span><br><span class="line">    </span><br><span class="line">    operation = add;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;add(5, 3) = %d\n&quot;</span>, operation(<span class="number">5</span>, <span class="number">3</span>));</span><br><span class="line">    </span><br><span class="line">    operation = subtract;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;subtract(5, 3) = %d\n&quot;</span>, operation(<span class="number">5</span>, <span class="number">3</span>));</span><br><span class="line">    </span><br><span class="line">    operation = multiply;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;multiply(5, 3) = %d\n&quot;</span>, operation(<span class="number">5</span>, <span class="number">3</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 函数指针数组</span></span><br><span class="line">    <span class="type">int</span> (*operations[])(<span class="type">int</span>, <span class="type">int</span>) = &#123;add, subtract, multiply&#125;;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* op_names[] = &#123;<span class="string">&quot;加法&quot;</span>, <span class="string">&quot;减法&quot;</span>, <span class="string">&quot;乘法&quot;</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n函数指针数组:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s: %d\n&quot;</span>, op_names[i], operations[i](<span class="number">8</span>, <span class="number">4</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 函数地址</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n函数地址:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;add函数地址: %p\n&quot;</span>, (<span class="type">void</span>*)add);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;subtract函数地址: %p\n&quot;</span>, (<span class="type">void</span>*)subtract);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;multiply函数地址: %p\n&quot;</span>, (<span class="type">void</span>*)multiply);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    demonstrate_pointer_types();</span><br><span class="line">    demonstrate_function_pointers();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="（二）复杂指针类型"><a href="#（二）复杂指针类型" class="headerlink" title="（二）复杂指针类型"></a>（二）复杂指针类型</h2><h3 id="1-多级指针"><a href="#1-多级指针" class="headerlink" title="1. 多级指针"></a>1. 多级指针</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">demonstrate_multi_level_pointers</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;=== 多级指针演示 ===\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> num = <span class="number">42</span>;</span><br><span class="line">    <span class="type">int</span>* ptr1 = &amp;num;           <span class="comment">// 一级指针</span></span><br><span class="line">    <span class="type">int</span>** ptr2 = &amp;ptr1;         <span class="comment">// 二级指针</span></span><br><span class="line">    <span class="type">int</span>*** ptr3 = &amp;ptr2;        <span class="comment">// 三级指针</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;变量和指针的值:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;num = %d, 地址: %p\n&quot;</span>, num, (<span class="type">void</span>*)&amp;num);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ptr1 = %p, 指向的值: %d, 地址: %p\n&quot;</span>, </span><br><span class="line">           (<span class="type">void</span>*)ptr1, *ptr1, (<span class="type">void</span>*)&amp;ptr1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ptr2 = %p, 指向的值: %p, 地址: %p\n&quot;</span>, </span><br><span class="line">           (<span class="type">void</span>*)ptr2, (<span class="type">void</span>*)*ptr2, (<span class="type">void</span>*)&amp;ptr2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ptr3 = %p, 指向的值: %p, 地址: %p\n&quot;</span>, </span><br><span class="line">           (<span class="type">void</span>*)ptr3, (<span class="type">void</span>*)*ptr3, (<span class="type">void</span>*)&amp;ptr3);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n通过不同级别指针访问num:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;直接访问: num = %d\n&quot;</span>, num);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;一级指针: *ptr1 = %d\n&quot;</span>, *ptr1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;二级指针: **ptr2 = %d\n&quot;</span>, **ptr2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;三级指针: ***ptr3 = %d\n&quot;</span>, ***ptr3);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 修改值</span></span><br><span class="line">    ***ptr3 = <span class="number">100</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n通过三级指针修改后: num = %d\n&quot;</span>, num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    demonstrate_multi_level_pointers();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="二、动态内存管理"><a href="#二、动态内存管理" class="headerlink" title="二、动态内存管理"></a>二、动态内存管理</h1><h2 id="（一）内存分配函数"><a href="#（一）内存分配函数" class="headerlink" title="（一）内存分配函数"></a>（一）内存分配函数</h2><h3 id="1-malloc、calloc、realloc、free"><a href="#1-malloc、calloc、realloc、free" class="headerlink" title="1. malloc、calloc、realloc、free"></a>1. malloc、calloc、realloc、free</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">demonstrate_memory_allocation</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;=== 动态内存分配演示 ===\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// malloc: 分配未初始化的内存</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;1. malloc演示:\n&quot;</span>);</span><br><span class="line">    <span class="type">int</span>* malloc_ptr = <span class="built_in">malloc</span>(<span class="number">5</span> * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="keyword">if</span> (malloc_ptr == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;malloc失败\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;malloc分配的内存内容（未初始化）: &quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, malloc_ptr[i]);  <span class="comment">// 可能包含垃圾值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 手动初始化</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        malloc_ptr[i] = i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;初始化后: &quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, malloc_ptr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// calloc: 分配并初始化为0的内存</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n2. calloc演示:\n&quot;</span>);</span><br><span class="line">    <span class="type">int</span>* calloc_ptr = <span class="built_in">calloc</span>(<span class="number">5</span>, <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="keyword">if</span> (calloc_ptr == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;calloc失败\n&quot;</span>);</span><br><span class="line">        <span class="built_in">free</span>(malloc_ptr);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;calloc分配的内存内容（自动初始化为0）: &quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, calloc_ptr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// realloc: 重新分配内存大小</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n3. realloc演示:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;原始calloc_ptr大小: 5个int\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 扩大内存</span></span><br><span class="line">    <span class="type">int</span>* realloc_ptr = <span class="built_in">realloc</span>(calloc_ptr, <span class="number">10</span> * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="keyword">if</span> (realloc_ptr == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;realloc失败\n&quot;</span>);</span><br><span class="line">        <span class="built_in">free</span>(malloc_ptr);</span><br><span class="line">        <span class="built_in">free</span>(calloc_ptr);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    calloc_ptr = realloc_ptr;  <span class="comment">// 更新指针</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化新分配的部分</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">5</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        calloc_ptr[i] = i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;realloc扩大后的内容: &quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, calloc_ptr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 释放内存</span></span><br><span class="line">    <span class="built_in">free</span>(malloc_ptr);</span><br><span class="line">    <span class="built_in">free</span>(calloc_ptr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n内存已释放\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    demonstrate_memory_allocation();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="三、实践项目：动态数组实现"><a href="#三、实践项目：动态数组实现" class="headerlink" title="三、实践项目：动态数组实现"></a>三、实践项目：动态数组实现</h1><p>让我们创建一个完整的动态数组数据结构：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态数组结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">int</span>* data;          <span class="comment">// 数据指针</span></span><br><span class="line">    <span class="type">size_t</span> size;        <span class="comment">// 当前元素个数</span></span><br><span class="line">    <span class="type">size_t</span> capacity;    <span class="comment">// 容量</span></span><br><span class="line">&#125; DynamicArray;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建动态数组</span></span><br><span class="line">DynamicArray* <span class="title function_">da_create</span><span class="params">(<span class="type">size_t</span> initial_capacity)</span> &#123;</span><br><span class="line">    DynamicArray* da = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DynamicArray));</span><br><span class="line">    <span class="keyword">if</span> (da == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    da-&gt;data = <span class="built_in">malloc</span>(initial_capacity * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="keyword">if</span> (da-&gt;data == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">free</span>(da);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    da-&gt;size = <span class="number">0</span>;</span><br><span class="line">    da-&gt;capacity = initial_capacity;</span><br><span class="line">    <span class="keyword">return</span> da;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 扩展容量</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">da_resize</span><span class="params">(DynamicArray* da, <span class="type">size_t</span> new_capacity)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (da == <span class="literal">NULL</span> || new_capacity &lt; da-&gt;size) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span>* new_data = <span class="built_in">realloc</span>(da-&gt;data, new_capacity * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="keyword">if</span> (new_data == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    da-&gt;data = new_data;</span><br><span class="line">    da-&gt;capacity = new_capacity;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加元素</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">da_push_back</span><span class="params">(DynamicArray* da, <span class="type">int</span> value)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (da == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果容量不足，扩展容量</span></span><br><span class="line">    <span class="keyword">if</span> (da-&gt;size &gt;= da-&gt;capacity) &#123;</span><br><span class="line">        <span class="type">size_t</span> new_capacity = da-&gt;capacity * <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (!da_resize(da, new_capacity)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    da-&gt;data[da-&gt;size++] = value;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取元素</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">da_get</span><span class="params">(<span class="type">const</span> DynamicArray* da, <span class="type">size_t</span> index)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (da == <span class="literal">NULL</span> || index &gt;= da-&gt;size) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;  <span class="comment">// 错误标识</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> da-&gt;data[index];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置元素</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">da_set</span><span class="params">(DynamicArray* da, <span class="type">size_t</span> index, <span class="type">int</span> value)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (da == <span class="literal">NULL</span> || index &gt;= da-&gt;size) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    da-&gt;data[index] = value;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除最后一个元素</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">da_pop_back</span><span class="params">(DynamicArray* da)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (da == <span class="literal">NULL</span> || da-&gt;size == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> da-&gt;data[--da-&gt;size];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印数组</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">da_print</span><span class="params">(<span class="type">const</span> DynamicArray* da)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (da == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;数组为空\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;动态数组 (大小: %zu, 容量: %zu): [&quot;</span>, da-&gt;size, da-&gt;capacity);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; da-&gt;size; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, da-&gt;data[i]);</span><br><span class="line">        <span class="keyword">if</span> (i &lt; da-&gt;size - <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;]\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 销毁数组</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">da_destroy</span><span class="params">(DynamicArray* da)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (da != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">free</span>(da-&gt;data);</span><br><span class="line">        <span class="built_in">free</span>(da);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态数组演示</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">demonstrate_dynamic_array</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;=== 动态数组演示 ===\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    DynamicArray* da = da_create(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span> (da == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;动态数组创建失败\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;创建初始容量为2的动态数组\n&quot;</span>);</span><br><span class="line">    da_print(da);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 添加元素</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n添加元素 1, 2, 3, 4, 5:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">        da_push_back(da, i);</span><br><span class="line">        da_print(da);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 访问元素</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n访问元素:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; da-&gt;size; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;da[%zu] = %d\n&quot;</span>, i, da_get(da, i));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 修改元素</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n修改索引2的元素为99:\n&quot;</span>);</span><br><span class="line">    da_set(da, <span class="number">2</span>, <span class="number">99</span>);</span><br><span class="line">    da_print(da);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 删除元素</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n删除最后两个元素:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;删除的元素: %d\n&quot;</span>, da_pop_back(da));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;删除的元素: %d\n&quot;</span>, da_pop_back(da));</span><br><span class="line">    da_print(da);</span><br><span class="line">    </span><br><span class="line">    da_destroy(da);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n动态数组已销毁\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    demonstrate_dynamic_array();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="四、总结与下一步"><a href="#四、总结与下一步" class="headerlink" title="四、总结与下一步"></a>四、总结与下一步</h1><h2 id="（一）本文重点回顾"><a href="#（一）本文重点回顾" class="headerlink" title="（一）本文重点回顾"></a>（一）本文重点回顾</h2><p>通过本文的深入学习，您已经掌握了：</p>
<p><strong>指针核心概念：</strong></p>
<ul>
<li>指针的本质和内存模型</li>
<li>指针运算和类型转换</li>
<li>复杂指针类型的声明和使用</li>
</ul>
<p><strong>内存管理技能：</strong></p>
<ul>
<li>动态内存分配和释放</li>
<li>内存泄漏的检测和预防</li>
<li>内存池等高级内存管理技术</li>
</ul>
<p><strong>实践应用：</strong></p>
<ul>
<li>动态数组的完整实现</li>
<li>指针在数据结构中的应用</li>
<li>内存安全编程的最佳实践</li>
</ul>
<h2 id="（二）学习建议"><a href="#（二）学习建议" class="headerlink" title="（二）学习建议"></a>（二）学习建议</h2><ol>
<li><strong>深入理解内存模型</strong>：这是掌握指针的关键</li>
<li><strong>练习复杂指针声明</strong>：通过大量练习熟练掌握</li>
<li><strong>注意内存安全</strong>：始终考虑内存泄漏和悬空指针</li>
<li><strong>实践数据结构</strong>：通过实现链表、树等加深理解</li>
</ol>
<a class="btn-beautify blue" href="/2025/08/10/%E5%AD%A6%E4%B9%A0/%E3%80%90%E5%AD%A6%E4%B9%A0%E3%80%91C%E8%AF%AD%E8%A8%80%E7%BB%93%E6%9E%84%E4%BD%93%E4%B8%8E%E8%81%94%E5%90%88%E4%BD%93%EF%BC%9A%E5%A4%8D%E6%9D%82%E6%95%B0%E6%8D%AE%E7%9A%84%E7%BB%84%E7%BB%87%E8%89%BA%E6%9C%AF/" title="下一篇：结构体与联合体"><i class="far fa-hand-point-right"></i><span>下一篇：结构体与联合体</span></a>

<hr>
<p><strong>参考资料：</strong></p>
<ul>
<li>《C和指针》- Kenneth A. Reek</li>
<li>《C专家编程》- Peter van der Linden</li>
<li>《C陷阱与缺陷》- Andrew Koenig</li>
<li>《深入理解计算机系统》- Randal E. Bryant</li>
<li>C语言内存管理参考：<a href="https://en.cppreference.com/w/c/memory">https://en.cppreference.com/w/c/memory</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<div class="note info flat"><p><strong>C语言系统学习系列 - 第4篇</strong><br>深入探讨C语言最核心也最具挑战性的概念——指针与内存管理，这是掌握系统级编程的关键技能。</p>
</div>

<h1 id="前言"><a h]]>
    </summary>
    
      <category term="C语言" scheme="https://uwakeme.tech/tags/C%E8%AF%AD%E8%A8%80/"/>
    
      <category term="指针" scheme="https://uwakeme.tech/tags/%E6%8C%87%E9%92%88/"/>
    
      <category term="内存管理" scheme="https://uwakeme.tech/tags/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    
      <category term="动态内存" scheme="https://uwakeme.tech/tags/%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98/"/>
    
      <category term="底层编程" scheme="https://uwakeme.tech/tags/%E5%BA%95%E5%B1%82%E7%BC%96%E7%A8%8B/"/>
    
      <category term="学习" scheme="https://uwakeme.tech/categories/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[【学习】C语言数组与字符串深度解析：数据处理的艺术]]></title>
    <link href="https://uwakeme.tech/2025/08/11/%E5%AD%A6%E4%B9%A0/%E3%80%90%E5%AD%A6%E4%B9%A0%E3%80%91C%E8%AF%AD%E8%A8%80%E6%95%B0%E7%BB%84%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E7%9A%84%E8%89%BA%E6%9C%AF/"/>
    <id>https://uwakeme.tech/2025/08/11/学习/【学习】C语言数组与字符串深度解析：数据处理的艺术/</id>
    <published>2025-08-11T04:00:00.000Z</published>
    <updated>2025-08-11T07:52:21.470Z</updated>
    <content type="html"><![CDATA[<div class="note info flat"><p><strong>C语言系统学习系列 - 第3篇</strong><br>深入探讨C语言中数组和字符串的高级用法，掌握高效的数据处理技巧和内存管理策略。</p>
</div>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>数组和字符串是C语言中最基础也最重要的数据结构。它们不仅是存储数据的容器，更是理解C语言内存模型和指针概念的关键。掌握数组和字符串的深层原理，对于编写高效、安全的C程序至关重要。</p>
<p><strong>为什么深入学习数组和字符串？</strong></p>
<p>在实际编程中，我们经常需要处理大量的数据：</p>
<ul>
<li><strong>科学计算</strong>：处理实验数据、统计分析</li>
<li><strong>文本处理</strong>：解析配置文件、处理用户输入</li>
<li><strong>图像处理</strong>：像素数据的存储和操作</li>
<li><strong>网络编程</strong>：数据包的组装和解析</li>
</ul>
<p><strong>本文学习目标：</strong></p>
<ul>
<li>深入理解数组的内存布局和访问机制</li>
<li>掌握多维数组的使用和优化技巧</li>
<li>精通字符串处理的各种技术</li>
<li>学会高效的字符串算法实现</li>
<li>理解数组与指针的深层关系</li>
</ul>
<a class="btn-beautify green" href="/2025/08/10/%E5%AD%A6%E4%B9%A0/%E3%80%90%E5%AD%A6%E4%B9%A0%E3%80%91C%E8%AF%AD%E8%A8%80%E5%87%BD%E6%95%B0%E4%B8%8E%E6%A8%A1%E5%9D%97%E5%8C%96%E7%BC%96%E7%A8%8B%EF%BC%9A%E6%9E%84%E5%BB%BA%E5%8F%AF%E7%BB%B4%E6%8A%A4%E7%9A%84%E4%BB%A3%E7%A0%81/" title="上一篇：函数与模块化编程"><i class="far fa-hand-point-left"></i><span>上一篇：函数与模块化编程</span></a>

<h1 id="一、数组深度解析"><a href="#一、数组深度解析" class="headerlink" title="一、数组深度解析"></a>一、数组深度解析</h1><h2 id="（一）数组的内存模型"><a href="#（一）数组的内存模型" class="headerlink" title="（一）数组的内存模型"></a>（一）数组的内存模型</h2><h3 id="1-数组在内存中的布局"><a href="#1-数组在内存中的布局" class="headerlink" title="1. 数组在内存中的布局"></a>1. 数组在内存中的布局</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">analyze_array_memory</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;=== 数组内存布局分析 ===\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 一维数组</span></span><br><span class="line">    <span class="type">int</span> arr1d[<span class="number">5</span>] = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;一维数组内存分析:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;数组名地址: %p\n&quot;</span>, (<span class="type">void</span>*)arr1d);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;数组大小: %zu 字节\n&quot;</span>, <span class="keyword">sizeof</span>(arr1d));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;元素大小: %zu 字节\n&quot;</span>, <span class="keyword">sizeof</span>(arr1d[<span class="number">0</span>]));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;元素个数: %zu\n&quot;</span>, <span class="keyword">sizeof</span>(arr1d) / <span class="keyword">sizeof</span>(arr1d[<span class="number">0</span>]));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 打印每个元素的地址和值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;arr1d[%d]: 地址=%p, 值=%d, 偏移=%ld字节\n&quot;</span>, </span><br><span class="line">               i, (<span class="type">void</span>*)&amp;arr1d[i], arr1d[i], </span><br><span class="line">               (<span class="type">char</span>*)&amp;arr1d[i] - (<span class="type">char</span>*)arr1d);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 二维数组</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n二维数组内存分析:\n&quot;</span>);</span><br><span class="line">    <span class="type">int</span> arr2d[<span class="number">3</span>][<span class="number">4</span>] = &#123;</span><br><span class="line">        &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;,</span><br><span class="line">        &#123;<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>&#125;,</span><br><span class="line">        &#123;<span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;二维数组大小: %zu 字节\n&quot;</span>, <span class="keyword">sizeof</span>(arr2d));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;行大小: %zu 字节\n&quot;</span>, <span class="keyword">sizeof</span>(arr2d[<span class="number">0</span>]));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 打印二维数组的内存布局</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;arr2d[%d][%d]: 地址=%p, 值=%2d\n&quot;</span>, </span><br><span class="line">                   i, j, (<span class="type">void</span>*)&amp;arr2d[i][j], arr2d[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 验证数组的连续性</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n内存连续性验证:\n&quot;</span>);</span><br><span class="line">    <span class="type">int</span>* ptr = (<span class="type">int</span>*)arr2d;  <span class="comment">// 将二维数组视为一维数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ptr[%2d] = %2d (地址: %p)\n&quot;</span>, i, ptr[i], (<span class="type">void</span>*)&amp;ptr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组作为函数参数的退化</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_array_info</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> size)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n函数内数组参数分析:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;参数arr的大小: %zu 字节 (实际是指针)\n&quot;</span>, <span class="keyword">sizeof</span>(arr));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;参数arr的地址: %p\n&quot;</span>, (<span class="type">void</span>*)arr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;传入的size: %d\n&quot;</span>, size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    analyze_array_memory();</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> test_array[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n主函数中数组大小: %zu 字节\n&quot;</span>, <span class="keyword">sizeof</span>(test_array));</span><br><span class="line">    print_array_info(test_array, <span class="number">10</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-数组初始化的高级技巧"><a href="#2-数组初始化的高级技巧" class="headerlink" title="2. 数组初始化的高级技巧"></a>2. 数组初始化的高级技巧</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">advanced_array_initialization</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;=== 数组初始化高级技巧 ===\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// C99指定初始化器</span></span><br><span class="line">    <span class="type">int</span> sparse_array[<span class="number">10</span>] = &#123;</span><br><span class="line">        [<span class="number">0</span>] = <span class="number">1</span>,      <span class="comment">// 第0个元素为1</span></span><br><span class="line">        [<span class="number">4</span>] = <span class="number">5</span>,      <span class="comment">// 第4个元素为5</span></span><br><span class="line">        [<span class="number">9</span>] = <span class="number">10</span>      <span class="comment">// 第9个元素为10</span></span><br><span class="line">    &#125;;                <span class="comment">// 其他元素自动初始化为0</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;稀疏数组初始化:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;sparse_array[%d] = %d\n&quot;</span>, i, sparse_array[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 结构体数组的指定初始化</span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">        <span class="type">int</span> id;</span><br><span class="line">        <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">        <span class="type">float</span> score;</span><br><span class="line">    &#125; Student;</span><br><span class="line">    </span><br><span class="line">    Student students[] = &#123;</span><br><span class="line">        &#123;.id = <span class="number">1001</span>, .name = <span class="string">&quot;Alice&quot;</span>, .score = <span class="number">95.5</span>&#125;,</span><br><span class="line">        &#123;.id = <span class="number">1002</span>, .name = <span class="string">&quot;Bob&quot;</span>, .score = <span class="number">87.0</span>&#125;,</span><br><span class="line">        &#123;.id = <span class="number">1003</span>, .name = <span class="string">&quot;Charlie&quot;</span>, .score = <span class="number">92.5</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n结构体数组:\n&quot;</span>);</span><br><span class="line">    <span class="type">int</span> student_count = <span class="keyword">sizeof</span>(students) / <span class="keyword">sizeof</span>(students[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; student_count; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ID: %d, Name: %s, Score: %.1f\n&quot;</span>, </span><br><span class="line">               students[i].id, students[i].name, students[i].score);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 字符数组的不同初始化方式</span></span><br><span class="line">    <span class="type">char</span> str1[] = <span class="string">&quot;Hello&quot;</span>;           <span class="comment">// 自动计算大小，包含&#x27;\0&#x27;</span></span><br><span class="line">    <span class="type">char</span> str2[<span class="number">10</span>] = <span class="string">&quot;World&quot;</span>;         <span class="comment">// 指定大小，剩余位置填0</span></span><br><span class="line">    <span class="type">char</span> str3[] = &#123;<span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;\0&#x27;</span>&#125;;  <span class="comment">// 字符列表初始化</span></span><br><span class="line">    <span class="type">char</span> str4[<span class="number">5</span>] = &#123;<span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;t&#x27;</span>&#125;; <span class="comment">// 不包含&#x27;\0&#x27;，需要注意</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n字符数组初始化:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;str1: \&quot;%s\&quot; (大小: %zu)\n&quot;</span>, str1, <span class="keyword">sizeof</span>(str1));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;str2: \&quot;%s\&quot; (大小: %zu)\n&quot;</span>, str2, <span class="keyword">sizeof</span>(str2));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;str3: \&quot;%s\&quot; (大小: %zu)\n&quot;</span>, str3, <span class="keyword">sizeof</span>(str3));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;str4: \&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, str4[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\&quot; (大小: %zu, 无终止符)\n&quot;</span>, <span class="keyword">sizeof</span>(str4));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    advanced_array_initialization();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="（二）多维数组的高级应用"><a href="#（二）多维数组的高级应用" class="headerlink" title="（二）多维数组的高级应用"></a>（二）多维数组的高级应用</h2><h3 id="1-动态二维数组的实现"><a href="#1-动态二维数组的实现" class="headerlink" title="1. 动态二维数组的实现"></a>1. 动态二维数组的实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法1：使用指针数组实现动态二维数组</span></span><br><span class="line"><span class="type">int</span>** <span class="title function_">create_2d_array_v1</span><span class="params">(<span class="type">int</span> rows, <span class="type">int</span> cols)</span> &#123;</span><br><span class="line">    <span class="comment">// 分配指针数组</span></span><br><span class="line">    <span class="type">int</span>** <span class="built_in">array</span> = <span class="built_in">malloc</span>(rows * <span class="keyword">sizeof</span>(<span class="type">int</span>*));</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">array</span> == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 为每一行分配内存</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; rows; i++) &#123;</span><br><span class="line">        <span class="built_in">array</span>[i] = <span class="built_in">malloc</span>(cols * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">array</span>[i] == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果分配失败，释放已分配的内存</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="built_in">free</span>(<span class="built_in">array</span>[j]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">free</span>(<span class="built_in">array</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">array</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">free_2d_array_v1</span><span class="params">(<span class="type">int</span>** <span class="built_in">array</span>, <span class="type">int</span> rows)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">array</span> == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; rows; i++) &#123;</span><br><span class="line">        <span class="built_in">free</span>(<span class="built_in">array</span>[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(<span class="built_in">array</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法2：使用连续内存块实现动态二维数组</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">int</span>* data;</span><br><span class="line">    <span class="type">int</span> rows;</span><br><span class="line">    <span class="type">int</span> cols;</span><br><span class="line">&#125; Matrix;</span><br><span class="line"></span><br><span class="line">Matrix* <span class="title function_">create_matrix</span><span class="params">(<span class="type">int</span> rows, <span class="type">int</span> cols)</span> &#123;</span><br><span class="line">    Matrix* matrix = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Matrix));</span><br><span class="line">    <span class="keyword">if</span> (matrix == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    matrix-&gt;data = <span class="built_in">malloc</span>(rows * cols * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="keyword">if</span> (matrix-&gt;data == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">free</span>(matrix);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    matrix-&gt;rows = rows;</span><br><span class="line">    matrix-&gt;cols = cols;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> matrix;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">free_matrix</span><span class="params">(Matrix* matrix)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (matrix != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">free</span>(matrix-&gt;data);</span><br><span class="line">        <span class="built_in">free</span>(matrix);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 矩阵元素访问宏</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MATRIX_GET(matrix, row, col) \</span></span><br><span class="line"><span class="meta">    ((matrix)-&gt;data[(row) * (matrix)-&gt;cols + (col)])</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MATRIX_SET(matrix, row, col, value) \</span></span><br><span class="line"><span class="meta">    ((matrix)-&gt;data[(row) * (matrix)-&gt;cols + (col)] = (value))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 矩阵运算函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">fill_matrix_random</span><span class="params">(Matrix* matrix)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; matrix-&gt;rows; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; matrix-&gt;cols; j++) &#123;</span><br><span class="line">            MATRIX_SET(matrix, i, j, rand() % <span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_matrix</span><span class="params">(<span class="type">const</span> Matrix* matrix)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Matrix %dx%d:\n&quot;</span>, matrix-&gt;rows, matrix-&gt;cols);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; matrix-&gt;rows; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; matrix-&gt;cols; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%3d &quot;</span>, MATRIX_GET(matrix, i, j));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Matrix* <span class="title function_">matrix_multiply</span><span class="params">(<span class="type">const</span> Matrix* a, <span class="type">const</span> Matrix* b)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (a-&gt;cols != b-&gt;rows) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;错误：矩阵维度不匹配\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Matrix* result = create_matrix(a-&gt;rows, b-&gt;cols);</span><br><span class="line">    <span class="keyword">if</span> (result == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 矩阵乘法：C[i][j] = Σ(A[i][k] * B[k][j])</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a-&gt;rows; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; b-&gt;cols; j++) &#123;</span><br><span class="line">            <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; a-&gt;cols; k++) &#123;</span><br><span class="line">                sum += MATRIX_GET(a, i, k) * MATRIX_GET(b, k, j);</span><br><span class="line">            &#125;</span><br><span class="line">            MATRIX_SET(result, i, j, sum);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">demonstrate_dynamic_arrays</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;=== 动态二维数组演示 ===\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    srand((<span class="type">unsigned</span> <span class="type">int</span>)time(<span class="literal">NULL</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 方法1演示</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;方法1：指针数组实现\n&quot;</span>);</span><br><span class="line">    <span class="type">int</span>** arr2d = create_2d_array_v1(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">    <span class="keyword">if</span> (arr2d != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="comment">// 填充数据</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">                arr2d[i][j] = i * <span class="number">4</span> + j + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 打印数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%3d &quot;</span>, arr2d[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        free_2d_array_v1(arr2d, <span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 方法2演示</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n方法2：连续内存块实现\n&quot;</span>);</span><br><span class="line">    Matrix* matrix_a = create_matrix(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">    Matrix* matrix_b = create_matrix(<span class="number">3</span>, <span class="number">2</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (matrix_a != <span class="literal">NULL</span> &amp;&amp; matrix_b != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        fill_matrix_random(matrix_a);</span><br><span class="line">        fill_matrix_random(matrix_b);</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;矩阵A:\n&quot;</span>);</span><br><span class="line">        print_matrix(matrix_a);</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n矩阵B:\n&quot;</span>);</span><br><span class="line">        print_matrix(matrix_b);</span><br><span class="line">        </span><br><span class="line">        Matrix* result = matrix_multiply(matrix_a, matrix_b);</span><br><span class="line">        <span class="keyword">if</span> (result != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n矩阵A × 矩阵B:\n&quot;</span>);</span><br><span class="line">            print_matrix(result);</span><br><span class="line">            free_matrix(result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    free_matrix(matrix_a);</span><br><span class="line">    free_matrix(matrix_b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    demonstrate_dynamic_arrays();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-数组算法优化技巧"><a href="#2-数组算法优化技巧" class="headerlink" title="2. 数组算法优化技巧"></a>2. 数组算法优化技巧</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 高效的数组搜索算法</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">linear_search</span><span class="params">(<span class="type">const</span> <span class="type">int</span> arr[], <span class="type">int</span> size, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] == target) &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">binary_search</span><span class="params">(<span class="type">const</span> <span class="type">int</span> arr[], <span class="type">int</span> size, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>, right = size - <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;  <span class="comment">// 防止溢出</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (arr[mid] == target) &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &lt; target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 高效的排序算法</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">quick_sort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> low, <span class="type">int</span> high)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (low &lt; high) &#123;</span><br><span class="line">        <span class="type">int</span> pivot = partition(arr, low, high);</span><br><span class="line">        quick_sort(arr, low, pivot - <span class="number">1</span>);</span><br><span class="line">        quick_sort(arr, pivot + <span class="number">1</span>, high);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">partition</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> low, <span class="type">int</span> high)</span> &#123;</span><br><span class="line">    <span class="type">int</span> pivot = arr[high];  <span class="comment">// 选择最后一个元素作为基准</span></span><br><span class="line">    <span class="type">int</span> i = low - <span class="number">1</span>;        <span class="comment">// 小于基准的元素的索引</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = low; j &lt; high; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[j] &lt;= pivot) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            swap(&amp;arr[i], &amp;arr[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    swap(&amp;arr[i + <span class="number">1</span>], &amp;arr[high]);</span><br><span class="line">    <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>* a, <span class="type">int</span>* b)</span> &#123;</span><br><span class="line">    <span class="type">int</span> temp = *a;</span><br><span class="line">    *a = *b;</span><br><span class="line">    *b = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 归并排序（稳定排序）</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">merge_sort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> temp[], <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        </span><br><span class="line">        merge_sort(arr, temp, left, mid);</span><br><span class="line">        merge_sort(arr, temp, mid + <span class="number">1</span>, right);</span><br><span class="line">        merge(arr, temp, left, mid, right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> temp[], <span class="type">int</span> left, <span class="type">int</span> mid, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">    <span class="comment">// 复制数据到临时数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = left; i &lt;= right; i++) &#123;</span><br><span class="line">        temp[i] = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> i = left, j = mid + <span class="number">1</span>, k = left;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 合并两个有序子数组</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= right) &#123;</span><br><span class="line">        <span class="keyword">if</span> (temp[i] &lt;= temp[j]) &#123;</span><br><span class="line">            arr[k++] = temp[i++];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            arr[k++] = temp[j++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 复制剩余元素</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid) &#123;</span><br><span class="line">        arr[k++] = temp[i++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= right) &#123;</span><br><span class="line">        arr[k++] = temp[j++];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组统计函数</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> min;</span><br><span class="line">    <span class="type">int</span> max;</span><br><span class="line">    <span class="type">double</span> average;</span><br><span class="line">    <span class="type">int</span> sum;</span><br><span class="line">&#125; ArrayStats;</span><br><span class="line"></span><br><span class="line">ArrayStats <span class="title function_">calculate_stats</span><span class="params">(<span class="type">const</span> <span class="type">int</span> arr[], <span class="type">int</span> size)</span> &#123;</span><br><span class="line">    ArrayStats stats = &#123;arr[<span class="number">0</span>], arr[<span class="number">0</span>], <span class="number">0.0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &lt; stats.min) stats.min = arr[i];</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &gt; stats.max) stats.max = arr[i];</span><br><span class="line">        stats.sum += arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    stats.average = (<span class="type">double</span>)stats.sum / size;</span><br><span class="line">    <span class="keyword">return</span> stats;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 性能测试函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">performance_test</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;=== 数组算法性能测试 ===\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> size = <span class="number">100000</span>;</span><br><span class="line">    <span class="type">int</span>* arr = <span class="built_in">malloc</span>(size * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="type">int</span>* temp = <span class="built_in">malloc</span>(size * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (arr == <span class="literal">NULL</span> || temp == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;内存分配失败\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 生成随机数据</span></span><br><span class="line">    srand((<span class="type">unsigned</span> <span class="type">int</span>)time(<span class="literal">NULL</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        arr[i] = rand() % <span class="number">10000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 测试线性搜索</span></span><br><span class="line">    <span class="type">clock_t</span> start = clock();</span><br><span class="line">    <span class="type">int</span> target = arr[size / <span class="number">2</span>];  <span class="comment">// 搜索中间的元素</span></span><br><span class="line">    <span class="type">int</span> index = linear_search(arr, size, target);</span><br><span class="line">    <span class="type">clock_t</span> end = clock();</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;线性搜索: 找到索引 %d, 耗时 %.2f ms\n&quot;</span>, </span><br><span class="line">           index, ((<span class="type">double</span>)(end - start) / CLOCKS_PER_SEC) * <span class="number">1000</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 排序后测试二分搜索</span></span><br><span class="line">    <span class="type">int</span>* sorted_arr = <span class="built_in">malloc</span>(size * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="built_in">memcpy</span>(sorted_arr, arr, size * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    </span><br><span class="line">    start = clock();</span><br><span class="line">    merge_sort(sorted_arr, temp, <span class="number">0</span>, size - <span class="number">1</span>);</span><br><span class="line">    end = clock();</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;归并排序: 耗时 %.2f ms\n&quot;</span>, </span><br><span class="line">           ((<span class="type">double</span>)(end - start) / CLOCKS_PER_SEC) * <span class="number">1000</span>);</span><br><span class="line">    </span><br><span class="line">    start = clock();</span><br><span class="line">    index = binary_search(sorted_arr, size, target);</span><br><span class="line">    end = clock();</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;二分搜索: 找到索引 %d, 耗时 %.2f ms\n&quot;</span>, </span><br><span class="line">           index, ((<span class="type">double</span>)(end - start) / CLOCKS_PER_SEC) * <span class="number">1000</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 计算统计信息</span></span><br><span class="line">    ArrayStats stats = calculate_stats(arr, size);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n数组统计信息:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;最小值: %d\n&quot;</span>, stats.min);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;最大值: %d\n&quot;</span>, stats.max);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;平均值: %.2f\n&quot;</span>, stats.average);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;总和: %d\n&quot;</span>, stats.sum);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">free</span>(arr);</span><br><span class="line">    <span class="built_in">free</span>(temp);</span><br><span class="line">    <span class="built_in">free</span>(sorted_arr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    performance_test();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="二、字符串深度解析"><a href="#二、字符串深度解析" class="headerlink" title="二、字符串深度解析"></a>二、字符串深度解析</h1><h2 id="（一）字符串的本质与内存管理"><a href="#（一）字符串的本质与内存管理" class="headerlink" title="（一）字符串的本质与内存管理"></a>（一）字符串的本质与内存管理</h2><h3 id="1-字符串的内存表示"><a href="#1-字符串的内存表示" class="headerlink" title="1. 字符串的内存表示"></a>1. 字符串的内存表示</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">analyze_string_memory</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;=== 字符串内存分析 ===\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 不同类型的字符串</span></span><br><span class="line">    <span class="type">char</span> str1[] = <span class="string">&quot;Hello&quot;</span>;           <span class="comment">// 栈上的字符数组</span></span><br><span class="line">    <span class="type">char</span>* str2 = <span class="string">&quot;World&quot;</span>;            <span class="comment">// 指向字符串字面量的指针</span></span><br><span class="line">    <span class="type">char</span>* str3 = <span class="built_in">malloc</span>(<span class="number">20</span>);         <span class="comment">// 堆上分配的字符串</span></span><br><span class="line">    <span class="built_in">strcpy</span>(str3, <span class="string">&quot;Dynamic&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;字符串类型分析:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;str1 (数组): 地址=%p, 内容=\&quot;%s\&quot;, 大小=%zu\n&quot;</span>, </span><br><span class="line">           (<span class="type">void</span>*)str1, str1, <span class="keyword">sizeof</span>(str1));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;str2 (指针): 地址=%p, 指向=%p, 内容=\&quot;%s\&quot;\n&quot;</span>, </span><br><span class="line">           (<span class="type">void</span>*)&amp;str2, (<span class="type">void</span>*)str2, str2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;str3 (堆): 地址=%p, 指向=%p, 内容=\&quot;%s\&quot;\n&quot;</span>, </span><br><span class="line">           (<span class="type">void</span>*)&amp;str3, (<span class="type">void</span>*)str3, str3);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 字符串字面量的特性</span></span><br><span class="line">    <span class="type">char</span>* literal1 = <span class="string">&quot;Constant&quot;</span>;</span><br><span class="line">    <span class="type">char</span>* literal2 = <span class="string">&quot;Constant&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n字符串字面量分析:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;literal1 指向: %p\n&quot;</span>, (<span class="type">void</span>*)literal1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;literal2 指向: %p\n&quot;</span>, (<span class="type">void</span>*)literal2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;是否指向同一地址: %s\n&quot;</span>, </span><br><span class="line">           (literal1 == literal2) ? <span class="string">&quot;是&quot;</span> : <span class="string">&quot;否&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 字符串修改测试</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n字符串修改测试:\n&quot;</span>);</span><br><span class="line">    str1[<span class="number">0</span>] = <span class="string">&#x27;h&#x27;</span>;  <span class="comment">// 可以修改数组</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;修改后的str1: %s\n&quot;</span>, str1);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// str2[0] = &#x27;w&#x27;;  // 错误！不能修改字符串字面量</span></span><br><span class="line">    </span><br><span class="line">    str3[<span class="number">0</span>] = <span class="string">&#x27;d&#x27;</span>;  <span class="comment">// 可以修改堆上的字符串</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;修改后的str3: %s\n&quot;</span>, str3);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 内存布局分析</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n内存布局分析:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; str1[i] != <span class="string">&#x27;\0&#x27;</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;str1[%d] = &#x27;%c&#x27; (ASCII: %d, 地址: %p)\n&quot;</span>, </span><br><span class="line">               i, str1[i], str1[i], (<span class="type">void</span>*)&amp;str1[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;str1终止符: &#x27;\\0&#x27; (ASCII: %d, 地址: %p)\n&quot;</span>, </span><br><span class="line">           str1[<span class="built_in">strlen</span>(str1)], (<span class="type">void</span>*)&amp;str1[<span class="built_in">strlen</span>(str1)]);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">free</span>(str3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串长度计算的不同方法</span></span><br><span class="line"><span class="type">size_t</span> <span class="title function_">my_strlen</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str)</span> &#123;</span><br><span class="line">    <span class="type">size_t</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (str[len] != <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">        len++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">size_t</span> <span class="title function_">my_strlen_pointer</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str)</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* start = str;</span><br><span class="line">    <span class="keyword">while</span> (*str != <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">        str++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str - start;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">string_length_comparison</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n=== 字符串长度计算比较 ===\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* test_string = <span class="string">&quot;Hello, World! 你好世界&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;测试字符串: \&quot;%s\&quot;\n&quot;</span>, test_string);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;strlen(): %zu\n&quot;</span>, <span class="built_in">strlen</span>(test_string));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;my_strlen(): %zu\n&quot;</span>, my_strlen(test_string));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;my_strlen_pointer(): %zu\n&quot;</span>, my_strlen_pointer(test_string));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 注意：包含多字节字符时，字节长度与字符数量不同</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;字节数: %zu, 实际字符可能更少（包含多字节字符）\n&quot;</span>, </span><br><span class="line">           <span class="built_in">strlen</span>(test_string));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    analyze_string_memory();</span><br><span class="line">    string_length_comparison();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-安全的字符串操作"><a href="#2-安全的字符串操作" class="headerlink" title="2. 安全的字符串操作"></a>2. 安全的字符串操作</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 安全的字符串复制函数</span></span><br><span class="line"><span class="type">char</span>* <span class="title function_">safe_strcpy</span><span class="params">(<span class="type">char</span>* dest, <span class="type">size_t</span> dest_size, <span class="type">const</span> <span class="type">char</span>* src)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (dest == <span class="literal">NULL</span> || src == <span class="literal">NULL</span> || dest_size == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">size_t</span> src_len = <span class="built_in">strlen</span>(src);</span><br><span class="line">    <span class="keyword">if</span> (src_len &gt;= dest_size) &#123;</span><br><span class="line">        <span class="comment">// 源字符串太长，只复制能容纳的部分</span></span><br><span class="line">        <span class="built_in">strncpy</span>(dest, src, dest_size - <span class="number">1</span>);</span><br><span class="line">        dest[dest_size - <span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>;  <span class="comment">// 确保以null结尾</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">strcpy</span>(dest, src);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> dest;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 安全的字符串连接函数</span></span><br><span class="line"><span class="type">char</span>* <span class="title function_">safe_strcat</span><span class="params">(<span class="type">char</span>* dest, <span class="type">size_t</span> dest_size, <span class="type">const</span> <span class="type">char</span>* src)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (dest == <span class="literal">NULL</span> || src == <span class="literal">NULL</span> || dest_size == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">size_t</span> dest_len = <span class="built_in">strlen</span>(dest);</span><br><span class="line">    <span class="type">size_t</span> src_len = <span class="built_in">strlen</span>(src);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (dest_len + src_len &gt;= dest_size) &#123;</span><br><span class="line">        <span class="comment">// 目标缓冲区空间不足</span></span><br><span class="line">        <span class="type">size_t</span> available = dest_size - dest_len - <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">strncat</span>(dest, src, available);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">strcat</span>(dest, src);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> dest;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态字符串结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">char</span>* data;</span><br><span class="line">    <span class="type">size_t</span> length;</span><br><span class="line">    <span class="type">size_t</span> capacity;</span><br><span class="line">&#125; DynamicString;</span><br><span class="line"></span><br><span class="line">DynamicString* <span class="title function_">ds_create</span><span class="params">(<span class="type">size_t</span> initial_capacity)</span> &#123;</span><br><span class="line">    DynamicString* ds = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DynamicString));</span><br><span class="line">    <span class="keyword">if</span> (ds == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    ds-&gt;data = <span class="built_in">malloc</span>(initial_capacity);</span><br><span class="line">    <span class="keyword">if</span> (ds-&gt;data == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">free</span>(ds);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ds-&gt;data[<span class="number">0</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    ds-&gt;length = <span class="number">0</span>;</span><br><span class="line">    ds-&gt;capacity = initial_capacity;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> ds;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">ds_destroy</span><span class="params">(DynamicString* ds)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (ds != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">free</span>(ds-&gt;data);</span><br><span class="line">        <span class="built_in">free</span>(ds);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">ds_resize</span><span class="params">(DynamicString* ds, <span class="type">size_t</span> new_capacity)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (ds == <span class="literal">NULL</span> || new_capacity &lt;= ds-&gt;length) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">char</span>* new_data = <span class="built_in">realloc</span>(ds-&gt;data, new_capacity);</span><br><span class="line">    <span class="keyword">if</span> (new_data == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ds-&gt;data = new_data;</span><br><span class="line">    ds-&gt;capacity = new_capacity;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">ds_append</span><span class="params">(DynamicString* ds, <span class="type">const</span> <span class="type">char</span>* str)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (ds == <span class="literal">NULL</span> || str == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">size_t</span> str_len = <span class="built_in">strlen</span>(str);</span><br><span class="line">    <span class="type">size_t</span> required_capacity = ds-&gt;length + str_len + <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果容量不足，扩展容量</span></span><br><span class="line">    <span class="keyword">if</span> (required_capacity &gt; ds-&gt;capacity) &#123;</span><br><span class="line">        <span class="type">size_t</span> new_capacity = ds-&gt;capacity * <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (new_capacity &lt; required_capacity) &#123;</span><br><span class="line">            new_capacity = required_capacity;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!ds_resize(ds, new_capacity)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">strcat</span>(ds-&gt;data, str);</span><br><span class="line">    ds-&gt;length += str_len;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">demonstrate_safe_strings</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;=== 安全字符串操作演示 ===\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 安全复制演示</span></span><br><span class="line">    <span class="type">char</span> buffer[<span class="number">20</span>];</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* long_string = <span class="string">&quot;This is a very long string that exceeds buffer size&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    safe_strcpy(buffer, <span class="keyword">sizeof</span>(buffer), long_string);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;安全复制结果: \&quot;%s\&quot;\n&quot;</span>, buffer);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;缓冲区大小: %zu, 实际长度: %zu\n&quot;</span>, <span class="keyword">sizeof</span>(buffer), <span class="built_in">strlen</span>(buffer));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 安全连接演示</span></span><br><span class="line">    <span class="type">char</span> dest[<span class="number">50</span>] = <span class="string">&quot;Hello, &quot;</span>;</span><br><span class="line">    safe_strcat(dest, <span class="keyword">sizeof</span>(dest), <span class="string">&quot;World!&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;安全连接结果: \&quot;%s\&quot;\n&quot;</span>, dest);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 动态字符串演示</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n动态字符串演示:\n&quot;</span>);</span><br><span class="line">    DynamicString* ds = ds_create(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">if</span> (ds != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;初始容量: %zu\n&quot;</span>, ds-&gt;capacity);</span><br><span class="line">        </span><br><span class="line">        ds_append(ds, <span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;添加\&quot;Hello\&quot;: \&quot;%s\&quot; (长度: %zu, 容量: %zu)\n&quot;</span>, </span><br><span class="line">               ds-&gt;data, ds-&gt;length, ds-&gt;capacity);</span><br><span class="line">        </span><br><span class="line">        ds_append(ds, <span class="string">&quot;, World!&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;添加\&quot;, World!\&quot;: \&quot;%s\&quot; (长度: %zu, 容量: %zu)\n&quot;</span>, </span><br><span class="line">               ds-&gt;data, ds-&gt;length, ds-&gt;capacity);</span><br><span class="line">        </span><br><span class="line">        ds_append(ds, <span class="string">&quot; This is a longer string that will trigger reallocation.&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;添加长字符串: \&quot;%s\&quot; (长度: %zu, 容量: %zu)\n&quot;</span>, </span><br><span class="line">               ds-&gt;data, ds-&gt;length, ds-&gt;capacity);</span><br><span class="line">        </span><br><span class="line">        ds_destroy(ds);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    demonstrate_safe_strings();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="（二）字符串算法实现"><a href="#（二）字符串算法实现" class="headerlink" title="（二）字符串算法实现"></a>（二）字符串算法实现</h2><h3 id="1-字符串匹配算法"><a href="#1-字符串匹配算法" class="headerlink" title="1. 字符串匹配算法"></a>1. 字符串匹配算法</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 朴素字符串匹配算法</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">naive_search</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* text, <span class="type">const</span> <span class="type">char</span>* pattern)</span> &#123;</span><br><span class="line">    <span class="type">int</span> text_len = <span class="built_in">strlen</span>(text);</span><br><span class="line">    <span class="type">int</span> pattern_len = <span class="built_in">strlen</span>(pattern);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= text_len - pattern_len; i++) &#123;</span><br><span class="line">        <span class="type">int</span> j;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; pattern_len; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (text[i + j] != pattern[j]) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (j == pattern_len) &#123;</span><br><span class="line">            <span class="keyword">return</span> i;  <span class="comment">// 找到匹配</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;  <span class="comment">// 未找到</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// KMP算法的前缀函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">compute_lps</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* pattern, <span class="type">int</span>* lps)</span> &#123;</span><br><span class="line">    <span class="type">int</span> len = <span class="number">0</span>;  <span class="comment">// 最长相等前后缀的长度</span></span><br><span class="line">    <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> pattern_len = <span class="built_in">strlen</span>(pattern);</span><br><span class="line">    </span><br><span class="line">    lps[<span class="number">0</span>] = <span class="number">0</span>;  <span class="comment">// lps[0]总是0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (i &lt; pattern_len) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pattern[i] == pattern[len]) &#123;</span><br><span class="line">            len++;</span><br><span class="line">            lps[i] = len;</span><br><span class="line">            i++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (len != <span class="number">0</span>) &#123;</span><br><span class="line">                len = lps[len - <span class="number">1</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                lps[i] = <span class="number">0</span>;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// KMP字符串匹配算法</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">kmp_search</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* text, <span class="type">const</span> <span class="type">char</span>* pattern)</span> &#123;</span><br><span class="line">    <span class="type">int</span> text_len = <span class="built_in">strlen</span>(text);</span><br><span class="line">    <span class="type">int</span> pattern_len = <span class="built_in">strlen</span>(pattern);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (pattern_len == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 计算LPS数组</span></span><br><span class="line">    <span class="type">int</span>* lps = <span class="built_in">malloc</span>(pattern_len * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    compute_lps(pattern, lps);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;  <span class="comment">// text的索引</span></span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;  <span class="comment">// pattern的索引</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (i &lt; text_len) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pattern[j] == text[i]) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (j == pattern_len) &#123;</span><br><span class="line">            <span class="built_in">free</span>(lps);</span><br><span class="line">            <span class="keyword">return</span> i - j;  <span class="comment">// 找到匹配</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i &lt; text_len &amp;&amp; pattern[j] != text[i]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j != <span class="number">0</span>) &#123;</span><br><span class="line">                j = lps[j - <span class="number">1</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">free</span>(lps);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;  <span class="comment">// 未找到</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Boyer-Moore算法的坏字符表</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">build_bad_char_table</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* pattern, <span class="type">int</span>* bad_char)</span> &#123;</span><br><span class="line">    <span class="type">int</span> pattern_len = <span class="built_in">strlen</span>(pattern);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化所有字符的偏移为-1</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++) &#123;</span><br><span class="line">        bad_char[i] = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 填充模式中出现的字符的最后位置</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; pattern_len; i++) &#123;</span><br><span class="line">        bad_char[(<span class="type">unsigned</span> <span class="type">char</span>)pattern[i]] = i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Boyer-Moore字符串匹配算法（简化版）</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">boyer_moore_search</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* text, <span class="type">const</span> <span class="type">char</span>* pattern)</span> &#123;</span><br><span class="line">    <span class="type">int</span> text_len = <span class="built_in">strlen</span>(text);</span><br><span class="line">    <span class="type">int</span> pattern_len = <span class="built_in">strlen</span>(pattern);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> bad_char[<span class="number">256</span>];</span><br><span class="line">    build_bad_char_table(pattern, bad_char);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> shift = <span class="number">0</span>;  <span class="comment">// 模式相对于文本的偏移</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (shift &lt;= text_len - pattern_len) &#123;</span><br><span class="line">        <span class="type">int</span> j = pattern_len - <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 从右到左匹配</span></span><br><span class="line">        <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; pattern[j] == text[shift + j]) &#123;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (j &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> shift;  <span class="comment">// 找到匹配</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 根据坏字符规则计算偏移</span></span><br><span class="line">            <span class="type">int</span> bad_char_shift = j - bad_char[(<span class="type">unsigned</span> <span class="type">char</span>)text[shift + j]];</span><br><span class="line">            shift += (bad_char_shift &gt; <span class="number">1</span>) ? bad_char_shift : <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;  <span class="comment">// 未找到</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串匹配性能测试</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">string_matching_performance_test</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;=== 字符串匹配算法性能测试 ===\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造测试数据</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* text = <span class="string">&quot;ABABDABACDABABCABCABCABCABC&quot;</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* pattern = <span class="string">&quot;ABABCABCABCABC&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;文本: %s\n&quot;</span>, text);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;模式: %s\n&quot;</span>, pattern);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 测试不同算法</span></span><br><span class="line">    <span class="type">int</span> result1 = naive_search(text, pattern);</span><br><span class="line">    <span class="type">int</span> result2 = kmp_search(text, pattern);</span><br><span class="line">    <span class="type">int</span> result3 = boyer_moore_search(text, pattern);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n算法结果:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;朴素算法: %s (位置: %d)\n&quot;</span>, </span><br><span class="line">           (result1 != <span class="number">-1</span>) ? <span class="string">&quot;找到&quot;</span> : <span class="string">&quot;未找到&quot;</span>, result1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;KMP算法: %s (位置: %d)\n&quot;</span>, </span><br><span class="line">           (result2 != <span class="number">-1</span>) ? <span class="string">&quot;找到&quot;</span> : <span class="string">&quot;未找到&quot;</span>, result2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Boyer-Moore算法: %s (位置: %d)\n&quot;</span>, </span><br><span class="line">           (result3 != <span class="number">-1</span>) ? <span class="string">&quot;找到&quot;</span> : <span class="string">&quot;未找到&quot;</span>, result3);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 验证结果一致性</span></span><br><span class="line">    <span class="keyword">if</span> (result1 == result2 &amp;&amp; result2 == result3) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;✓ 所有算法结果一致\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;✗ 算法结果不一致！\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    string_matching_performance_test();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-字符串处理工具函数"><a href="#2-字符串处理工具函数" class="headerlink" title="2. 字符串处理工具函数"></a>2. 字符串处理工具函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串反转</span></span><br><span class="line"><span class="type">char</span>* <span class="title function_">string_reverse</span><span class="params">(<span class="type">char</span>* str)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (str == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">strlen</span>(str);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len / <span class="number">2</span>; i++) &#123;</span><br><span class="line">        <span class="type">char</span> temp = str[i];</span><br><span class="line">        str[i] = str[len - <span class="number">1</span> - i];</span><br><span class="line">        str[len - <span class="number">1</span> - i] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串去除空白字符</span></span><br><span class="line"><span class="type">char</span>* <span class="title function_">string_trim</span><span class="params">(<span class="type">char</span>* str)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (str == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 去除开头的空白字符</span></span><br><span class="line">    <span class="type">char</span>* start = str;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isspace</span>(*start)) &#123;</span><br><span class="line">        start++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果字符串全是空白字符</span></span><br><span class="line">    <span class="keyword">if</span> (*start == <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">        str[<span class="number">0</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 去除结尾的空白字符</span></span><br><span class="line">    <span class="type">char</span>* end = start + <span class="built_in">strlen</span>(start) - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (end &gt; start &amp;&amp; <span class="built_in">isspace</span>(*end)) &#123;</span><br><span class="line">        end--;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 移动字符串到开头</span></span><br><span class="line">    <span class="type">int</span> len = end - start + <span class="number">1</span>;</span><br><span class="line">    memmove(str, start, len);</span><br><span class="line">    str[len] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串分割</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">char</span>** tokens;</span><br><span class="line">    <span class="type">int</span> count;</span><br><span class="line">    <span class="type">int</span> capacity;</span><br><span class="line">&#125; StringArray;</span><br><span class="line"></span><br><span class="line">StringArray* <span class="title function_">string_split</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str, <span class="type">const</span> <span class="type">char</span>* delimiter)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (str == <span class="literal">NULL</span> || delimiter == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    StringArray* result = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(StringArray));</span><br><span class="line">    <span class="keyword">if</span> (result == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    result-&gt;capacity = <span class="number">10</span>;</span><br><span class="line">    result-&gt;tokens = <span class="built_in">malloc</span>(result-&gt;capacity * <span class="keyword">sizeof</span>(<span class="type">char</span>*));</span><br><span class="line">    result-&gt;count = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (result-&gt;tokens == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">free</span>(result);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 复制字符串以便修改</span></span><br><span class="line">    <span class="type">char</span>* str_copy = <span class="built_in">malloc</span>(<span class="built_in">strlen</span>(str) + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(str_copy, str);</span><br><span class="line">    </span><br><span class="line">    <span class="type">char</span>* token = strtok(str_copy, delimiter);</span><br><span class="line">    <span class="keyword">while</span> (token != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="comment">// 扩展数组容量</span></span><br><span class="line">        <span class="keyword">if</span> (result-&gt;count &gt;= result-&gt;capacity) &#123;</span><br><span class="line">            result-&gt;capacity *= <span class="number">2</span>;</span><br><span class="line">            <span class="type">char</span>** new_tokens = <span class="built_in">realloc</span>(result-&gt;tokens, </span><br><span class="line">                                      result-&gt;capacity * <span class="keyword">sizeof</span>(<span class="type">char</span>*));</span><br><span class="line">            <span class="keyword">if</span> (new_tokens == <span class="literal">NULL</span>) &#123;</span><br><span class="line">                <span class="comment">// 清理已分配的内存</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; result-&gt;count; i++) &#123;</span><br><span class="line">                    <span class="built_in">free</span>(result-&gt;tokens[i]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">free</span>(result-&gt;tokens);</span><br><span class="line">                <span class="built_in">free</span>(result);</span><br><span class="line">                <span class="built_in">free</span>(str_copy);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            result-&gt;tokens = new_tokens;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 复制token</span></span><br><span class="line">        result-&gt;tokens[result-&gt;count] = <span class="built_in">malloc</span>(<span class="built_in">strlen</span>(token) + <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">strcpy</span>(result-&gt;tokens[result-&gt;count], token);</span><br><span class="line">        result-&gt;count++;</span><br><span class="line">        </span><br><span class="line">        token = strtok(<span class="literal">NULL</span>, delimiter);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">free</span>(str_copy);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">string_array_free</span><span class="params">(StringArray* arr)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; arr-&gt;count; i++) &#123;</span><br><span class="line">            <span class="built_in">free</span>(arr-&gt;tokens[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">free</span>(arr-&gt;tokens);</span><br><span class="line">        <span class="built_in">free</span>(arr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串替换</span></span><br><span class="line"><span class="type">char</span>* <span class="title function_">string_replace</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str, <span class="type">const</span> <span class="type">char</span>* old_substr, <span class="type">const</span> <span class="type">char</span>* new_substr)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (str == <span class="literal">NULL</span> || old_substr == <span class="literal">NULL</span> || new_substr == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> old_len = <span class="built_in">strlen</span>(old_substr);</span><br><span class="line">    <span class="type">int</span> new_len = <span class="built_in">strlen</span>(new_substr);</span><br><span class="line">    <span class="type">int</span> str_len = <span class="built_in">strlen</span>(str);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (old_len == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 计算需要替换的次数</span></span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* pos = str;</span><br><span class="line">    <span class="keyword">while</span> ((pos = <span class="built_in">strstr</span>(pos, old_substr)) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        count++;</span><br><span class="line">        pos += old_len;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 没有找到要替换的子串，返回原字符串的副本</span></span><br><span class="line">        <span class="type">char</span>* result = <span class="built_in">malloc</span>(str_len + <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">strcpy</span>(result, str);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 计算新字符串的长度</span></span><br><span class="line">    <span class="type">int</span> new_str_len = str_len + count * (new_len - old_len);</span><br><span class="line">    <span class="type">char</span>* result = <span class="built_in">malloc</span>(new_str_len + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (result == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 执行替换</span></span><br><span class="line">    <span class="type">char</span>* dest = result;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* src = str;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> ((pos = <span class="built_in">strstr</span>(src, old_substr)) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="comment">// 复制old_substr之前的部分</span></span><br><span class="line">        <span class="type">int</span> prefix_len = pos - src;</span><br><span class="line">        <span class="built_in">memcpy</span>(dest, src, prefix_len);</span><br><span class="line">        dest += prefix_len;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 复制新的子串</span></span><br><span class="line">        <span class="built_in">memcpy</span>(dest, new_substr, new_len);</span><br><span class="line">        dest += new_len;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 移动源指针</span></span><br><span class="line">        src = pos + old_len;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 复制剩余部分</span></span><br><span class="line">    <span class="built_in">strcpy</span>(dest, src);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串工具函数演示</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">demonstrate_string_utilities</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;=== 字符串工具函数演示 ===\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 字符串反转</span></span><br><span class="line">    <span class="type">char</span> str1[] = <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;原字符串: \&quot;%s\&quot;\n&quot;</span>, str1);</span><br><span class="line">    string_reverse(str1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;反转后: \&quot;%s\&quot;\n&quot;</span>, str1);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 字符串去空白</span></span><br><span class="line">    <span class="type">char</span> str2[] = <span class="string">&quot;   Hello, World!   &quot;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n原字符串: \&quot;%s\&quot;\n&quot;</span>, str2);</span><br><span class="line">    string_trim(str2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;去空白后: \&quot;%s\&quot;\n&quot;</span>, str2);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 字符串分割</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n字符串分割演示:\n&quot;</span>);</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* csv = <span class="string">&quot;apple,banana,orange,grape&quot;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;原字符串: \&quot;%s\&quot;\n&quot;</span>, csv);</span><br><span class="line">    </span><br><span class="line">    StringArray* tokens = string_split(csv, <span class="string">&quot;,&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (tokens != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;分割结果:\n&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; tokens-&gt;count; i++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;  [%d]: \&quot;%s\&quot;\n&quot;</span>, i, tokens-&gt;tokens[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        string_array_free(tokens);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 字符串替换</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n字符串替换演示:\n&quot;</span>);</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* original = <span class="string">&quot;Hello World! Hello Universe!&quot;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;原字符串: \&quot;%s\&quot;\n&quot;</span>, original);</span><br><span class="line">    </span><br><span class="line">    <span class="type">char</span>* replaced = string_replace(original, <span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;Hi&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (replaced != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;替换后: \&quot;%s\&quot;\n&quot;</span>, replaced);</span><br><span class="line">        <span class="built_in">free</span>(replaced);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    demonstrate_string_utilities();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="三、实践项目：文本分析器"><a href="#三、实践项目：文本分析器" class="headerlink" title="三、实践项目：文本分析器"></a>三、实践项目：文本分析器</h1><p>让我们创建一个综合性的文本分析器项目，展示数组和字符串的高级应用：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_WORD_LENGTH 100</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_WORDS 10000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 词频统计结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">char</span> word[MAX_WORD_LENGTH];</span><br><span class="line">    <span class="type">int</span> frequency;</span><br><span class="line">&#125; WordFreq;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文本统计结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> char_count;</span><br><span class="line">    <span class="type">int</span> word_count;</span><br><span class="line">    <span class="type">int</span> line_count;</span><br><span class="line">    <span class="type">int</span> sentence_count;</span><br><span class="line">    WordFreq words[MAX_WORDS];</span><br><span class="line">    <span class="type">int</span> unique_words;</span><br><span class="line">&#125; TextStats;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将字符转换为小写</span></span><br><span class="line"><span class="type">char</span> <span class="title function_">to_lower</span><span class="params">(<span class="type">char</span> c)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (c &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;Z&#x27;</span>) ? c + <span class="number">32</span> : c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查字符是否为单词字符</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">is_word_char</span><span class="params">(<span class="type">char</span> c)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">isalnum</span>(c) || c == <span class="string">&#x27;\&#x27;&#x27;</span> || c == <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 标准化单词（转小写，去除标点）</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">normalize_word</span><span class="params">(<span class="type">char</span>* word)</span> &#123;</span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">strlen</span>(word);</span><br><span class="line">    <span class="type">int</span> write_pos = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (is_word_char(word[i])) &#123;</span><br><span class="line">            word[write_pos++] = to_lower(word[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    word[write_pos] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加或更新词频</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">add_word</span><span class="params">(TextStats* stats, <span class="type">const</span> <span class="type">char</span>* word)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strlen</span>(word) == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 查找是否已存在</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; stats-&gt;unique_words; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(stats-&gt;words[i].word, word) == <span class="number">0</span>) &#123;</span><br><span class="line">            stats-&gt;words[i].frequency++;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 添加新单词</span></span><br><span class="line">    <span class="keyword">if</span> (stats-&gt;unique_words &lt; MAX_WORDS) &#123;</span><br><span class="line">        <span class="built_in">strcpy</span>(stats-&gt;words[stats-&gt;unique_words].word, word);</span><br><span class="line">        stats-&gt;words[stats-&gt;unique_words].frequency = <span class="number">1</span>;</span><br><span class="line">        stats-&gt;unique_words++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分析文本</span></span><br><span class="line">TextStats <span class="title function_">analyze_text</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* text)</span> &#123;</span><br><span class="line">    TextStats stats = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">strlen</span>(text);</span><br><span class="line">    <span class="type">char</span> current_word[MAX_WORD_LENGTH] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> word_pos = <span class="number">0</span>;</span><br><span class="line">    <span class="type">bool</span> in_word = <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= len; i++) &#123;  <span class="comment">// 包括字符串结尾</span></span><br><span class="line">        <span class="type">char</span> c = (i &lt; len) ? text[i] : <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 字符计数（不包括结尾的null字符）</span></span><br><span class="line">        <span class="keyword">if</span> (i &lt; len) &#123;</span><br><span class="line">            stats.char_count++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 行计数</span></span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;\n&#x27;</span>) &#123;</span><br><span class="line">            stats.line_count++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 句子计数</span></span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;.&#x27;</span> || c == <span class="string">&#x27;!&#x27;</span> || c == <span class="string">&#x27;?&#x27;</span>) &#123;</span><br><span class="line">            stats.sentence_count++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 单词处理</span></span><br><span class="line">        <span class="keyword">if</span> (is_word_char(c) &amp;&amp; word_pos &lt; MAX_WORD_LENGTH - <span class="number">1</span>) &#123;</span><br><span class="line">            current_word[word_pos++] = c;</span><br><span class="line">            in_word = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (in_word) &#123;</span><br><span class="line">                current_word[word_pos] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">                normalize_word(current_word);</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">strlen</span>(current_word) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    add_word(&amp;stats, current_word);</span><br><span class="line">                    stats.word_count++;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                word_pos = <span class="number">0</span>;</span><br><span class="line">                in_word = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果文本不以换行符结尾，行数加1</span></span><br><span class="line">    <span class="keyword">if</span> (len &gt; <span class="number">0</span> &amp;&amp; text[len - <span class="number">1</span>] != <span class="string">&#x27;\n&#x27;</span>) &#123;</span><br><span class="line">        stats.line_count++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> stats;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 词频排序比较函数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">compare_word_freq</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* a, <span class="type">const</span> <span class="type">void</span>* b)</span> &#123;</span><br><span class="line">    <span class="type">const</span> WordFreq* wa = (<span class="type">const</span> WordFreq*)a;</span><br><span class="line">    <span class="type">const</span> WordFreq* wb = (<span class="type">const</span> WordFreq*)b;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 按频率降序排列</span></span><br><span class="line">    <span class="keyword">if</span> (wa-&gt;frequency != wb-&gt;frequency) &#123;</span><br><span class="line">        <span class="keyword">return</span> wb-&gt;frequency - wa-&gt;frequency;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 频率相同时按字母顺序排列</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">strcmp</span>(wa-&gt;word, wb-&gt;word);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印文本统计信息</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_text_stats</span><span class="params">(<span class="type">const</span> TextStats* stats)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;=== 文本分析结果 ===\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;字符数: %d\n&quot;</span>, stats-&gt;char_count);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;单词数: %d\n&quot;</span>, stats-&gt;word_count);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;行数: %d\n&quot;</span>, stats-&gt;line_count);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;句子数: %d\n&quot;</span>, stats-&gt;sentence_count);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;唯一单词数: %d\n&quot;</span>, stats-&gt;unique_words);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (stats-&gt;word_count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;平均单词长度: %.2f\n&quot;</span>, </span><br><span class="line">               (<span class="type">double</span>)stats-&gt;char_count / stats-&gt;word_count);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 排序并显示词频统计</span></span><br><span class="line">    WordFreq* sorted_words = <span class="built_in">malloc</span>(stats-&gt;unique_words * <span class="keyword">sizeof</span>(WordFreq));</span><br><span class="line">    <span class="built_in">memcpy</span>(sorted_words, stats-&gt;words, stats-&gt;unique_words * <span class="keyword">sizeof</span>(WordFreq));</span><br><span class="line">    </span><br><span class="line">    qsort(sorted_words, stats-&gt;unique_words, <span class="keyword">sizeof</span>(WordFreq), compare_word_freq);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n=== 词频统计 (前20个) ===\n&quot;</span>);</span><br><span class="line">    <span class="type">int</span> display_count = (stats-&gt;unique_words &lt; <span class="number">20</span>) ? stats-&gt;unique_words : <span class="number">20</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; display_count; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%2d. %-15s %d次\n&quot;</span>, </span><br><span class="line">               i + <span class="number">1</span>, sorted_words[i].word, sorted_words[i].frequency);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">free</span>(sorted_words);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找最长的单词</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">find_longest_words</span><span class="params">(<span class="type">const</span> TextStats* stats)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n=== 最长单词 ===\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> max_length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; stats-&gt;unique_words; i++) &#123;</span><br><span class="line">        <span class="type">int</span> len = <span class="built_in">strlen</span>(stats-&gt;words[i].word);</span><br><span class="line">        <span class="keyword">if</span> (len &gt; max_length) &#123;</span><br><span class="line">            max_length = len;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;最长单词长度: %d\n&quot;</span>, max_length);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;最长单词:\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; stats-&gt;unique_words; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strlen</span>(stats-&gt;words[i].word) == max_length) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;  %s (出现 %d 次)\n&quot;</span>, </span><br><span class="line">                   stats-&gt;words[i].word, stats-&gt;words[i].frequency);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文本分析器主函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">text_analyzer_demo</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;=== 文本分析器演示 ===\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* sample_text = </span><br><span class="line">        <span class="string">&quot;Hello world! This is a sample text for analysis.\n&quot;</span></span><br><span class="line">        <span class="string">&quot;The text contains multiple sentences and words.\n&quot;</span></span><br><span class="line">        <span class="string">&quot;Some words appear multiple times in the text.\n&quot;</span></span><br><span class="line">        <span class="string">&quot;This analyzer will count characters, words, lines, and sentences.\n&quot;</span></span><br><span class="line">        <span class="string">&quot;It will also provide word frequency statistics.\n&quot;</span></span><br><span class="line">        <span class="string">&quot;Hello again! The word &#x27;the&#x27; appears frequently in English text.&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;分析文本:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;----------------------------------------\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, sample_text);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;----------------------------------------\n\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    TextStats stats = analyze_text(sample_text);</span><br><span class="line">    print_text_stats(&amp;stats);</span><br><span class="line">    find_longest_words(&amp;stats);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    text_analyzer_demo();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="四、总结与下一步"><a href="#四、总结与下一步" class="headerlink" title="四、总结与下一步"></a>四、总结与下一步</h1><h2 id="（一）本文重点回顾"><a href="#（一）本文重点回顾" class="headerlink" title="（一）本文重点回顾"></a>（一）本文重点回顾</h2><p>通过本文的深入学习，您已经掌握了：</p>
<p><strong>数组高级技巧：</strong></p>
<ul>
<li>数组的内存模型和布局原理</li>
<li>动态多维数组的实现方法</li>
<li>高效的数组算法和优化技巧</li>
</ul>
<p><strong>字符串深度理解：</strong></p>
<ul>
<li>字符串的内存表示和管理</li>
<li>安全的字符串操作方法</li>
<li>经典字符串匹配算法实现</li>
</ul>
<p><strong>实践应用：</strong></p>
<ul>
<li>文本分析器的完整实现</li>
<li>词频统计和排序算法</li>
<li>综合性项目的设计思路</li>
</ul>
<h2 id="（二）性能优化要点"><a href="#（二）性能优化要点" class="headerlink" title="（二）性能优化要点"></a>（二）性能优化要点</h2><ol>
<li><strong>内存访问模式</strong>：利用数组的连续性提高缓存命中率</li>
<li><strong>算法选择</strong>：根据数据特点选择合适的搜索和排序算法</li>
<li><strong>内存管理</strong>：合理使用动态内存，避免内存泄漏</li>
<li><strong>字符串处理</strong>：使用高效的字符串算法，避免不必要的复制</li>
</ol>
<h2 id="（三）学习建议"><a href="#（三）学习建议" class="headerlink" title="（三）学习建议"></a>（三）学习建议</h2><ol>
<li><strong>深入理解内存模型</strong>：这是掌握C语言的关键</li>
<li><strong>练习算法实现</strong>：通过编写经典算法加深理解</li>
<li><strong>注意安全编程</strong>：始终考虑缓冲区溢出等安全问题</li>
<li><strong>性能意识</strong>：培养对算法时间复杂度的敏感性</li>
</ol>
<a class="btn-beautify blue" href="/2025/08/10/%E5%AD%A6%E4%B9%A0/%E3%80%90%E5%AD%A6%E4%B9%A0%E3%80%91C%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88%E4%B8%8E%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%EF%BC%9A%E6%8E%8C%E6%8F%A1%E5%BA%95%E5%B1%82%E7%BC%96%E7%A8%8B%E7%9A%84%E6%A0%B8%E5%BF%83/" title="下一篇：指针与内存管理"><i class="far fa-hand-point-right"></i><span>下一篇：指针与内存管理</span></a>

<hr>
<p><strong>参考资料：</strong></p>
<ul>
<li>《算法导论》- Thomas H. Cormen等</li>
<li>《C和指针》- Kenneth A. Reek</li>
<li>《高质量C&#x2F;C++编程指南》- 林锐</li>
<li>《字符串算法》- Maxime Crochemore等</li>
<li>C语言字符串函数参考：<a href="https://en.cppreference.com/w/c/string">https://en.cppreference.com/w/c/string</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<div class="note info flat"><p><strong>C语言系统学习系列 - 第3篇</strong><br>深入探讨C语言中数组和字符串的高级用法，掌握高效的数据处理技巧和内存管理策略。</p>
</div>

<h1 id="前言"><a href="]]>
    </summary>
    
      <category term="C语言" scheme="https://uwakeme.tech/tags/C%E8%AF%AD%E8%A8%80/"/>
    
      <category term="内存管理" scheme="https://uwakeme.tech/tags/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    
      <category term="数组" scheme="https://uwakeme.tech/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="字符串" scheme="https://uwakeme.tech/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="数据结构" scheme="https://uwakeme.tech/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="学习" scheme="https://uwakeme.tech/categories/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[【学习】C语言函数与模块化编程：构建可维护的代码]]></title>
    <link href="https://uwakeme.tech/2025/08/11/%E5%AD%A6%E4%B9%A0/%E3%80%90%E5%AD%A6%E4%B9%A0%E3%80%91C%E8%AF%AD%E8%A8%80%E5%87%BD%E6%95%B0%E4%B8%8E%E6%A8%A1%E5%9D%97%E5%8C%96%E7%BC%96%E7%A8%8B%EF%BC%9A%E6%9E%84%E5%BB%BA%E5%8F%AF%E7%BB%B4%E6%8A%A4%E7%9A%84%E4%BB%A3%E7%A0%81/"/>
    <id>https://uwakeme.tech/2025/08/11/学习/【学习】C语言函数与模块化编程：构建可维护的代码/</id>
    <published>2025-08-11T03:00:00.000Z</published>
    <updated>2025-08-11T07:52:10.189Z</updated>
    <content type="html"><![CDATA[<div class="note info flat"><p><strong>C语言系统学习系列 - 第2篇</strong><br>在掌握了C语言基础语法后，本文将深入探讨函数设计和模块化编程，这是编写高质量、可维护代码的关键技能。</p>
</div>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>函数是C语言程序的基本构建块，也是实现代码复用和模块化的核心机制。良好的函数设计不仅能提高代码的可读性和可维护性，还能显著提升开发效率。</p>
<p><strong>为什么需要函数？</strong></p>
<p>想象一下，如果我们要编写一个学生管理系统，需要多次计算学生的平均成绩。如果每次都重复编写相同的计算代码，不仅浪费时间，还容易出错。函数就像是一个”代码工厂”，我们定义一次，就可以在任何需要的地方调用。</p>
<p><strong>本文学习目标：</strong></p>
<ul>
<li>掌握函数的设计原则和最佳实践</li>
<li>理解参数传递机制（值传递vs引用传递）</li>
<li>学会使用递归解决复杂问题</li>
<li>掌握变量的作用域和生命周期</li>
<li>学会模块化编程和代码组织</li>
</ul>
<p><strong>前置知识：</strong><br>本文假设您已经掌握了C语言的基本语法、数据类型和控制结构。</p>
<a class="btn-beautify green" href="/2025/08/10/%E5%AD%A6%E4%B9%A0/%E3%80%90%E5%AD%A6%E4%B9%A0%E3%80%91C%E8%AF%AD%E8%A8%80%E5%AE%8C%E5%85%A8%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97%EF%BC%9A%E7%8E%B0%E4%BB%A3C%E7%BC%96%E7%A8%8B%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AD%A5/" title="上一篇：C语言完全入门指南"><i class="far fa-hand-point-left"></i><span>上一篇：C语言完全入门指南</span></a>

<h1 id="一、函数基础与设计原则"><a href="#一、函数基础与设计原则" class="headerlink" title="一、函数基础与设计原则"></a>一、函数基础与设计原则</h1><h2 id="（一）函数的基本概念"><a href="#（一）函数的基本概念" class="headerlink" title="（一）函数的基本概念"></a>（一）函数的基本概念</h2><h3 id="1-函数的组成要素"><a href="#1-函数的组成要素" class="headerlink" title="1. 函数的组成要素"></a>1. 函数的组成要素</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数声明（函数原型）</span></span><br><span class="line"><span class="type">double</span> <span class="title function_">calculate_circle_area</span><span class="params">(<span class="type">double</span> radius)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">print_circle_info</span><span class="params">(<span class="type">double</span> radius)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">get_max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 函数定义的完整结构：</span></span><br><span class="line"><span class="comment"> * 返回类型 函数名(参数列表) &#123;</span></span><br><span class="line"><span class="comment"> *     函数体</span></span><br><span class="line"><span class="comment"> *     return 返回值;  // 如果返回类型不是void</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算圆的面积</span></span><br><span class="line"><span class="type">double</span> <span class="title function_">calculate_circle_area</span><span class="params">(<span class="type">double</span> radius)</span> &#123;</span><br><span class="line">    <span class="comment">// 输入验证：确保半径为正数</span></span><br><span class="line">    <span class="keyword">if</span> (radius &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;错误：半径必须为正数\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;  <span class="comment">// 返回错误标识</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 计算并返回面积</span></span><br><span class="line">    <span class="keyword">return</span> M_PI * radius * radius;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印圆的详细信息（无返回值函数）</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_circle_info</span><span class="params">(<span class="type">double</span> radius)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (radius &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;无效的半径值\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;  <span class="comment">// void函数可以使用空return提前退出</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">double</span> area = calculate_circle_area(radius);</span><br><span class="line">    <span class="type">double</span> circumference = <span class="number">2</span> * M_PI * radius;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;圆的信息:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  半径: %.2f\n&quot;</span>, radius);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  面积: %.2f\n&quot;</span>, area);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  周长: %.2f\n&quot;</span>, circumference);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回两个数中的较大值</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">get_max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (a &gt; b) ? a : b;  <span class="comment">// 使用三元运算符简化代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="type">double</span> radius = <span class="number">5.0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;=== 函数基础演示 ===\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 调用函数</span></span><br><span class="line">    <span class="type">double</span> area = calculate_circle_area(radius);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;半径为 %.1f 的圆面积: %.2f\n&quot;</span>, radius, area);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 调用无返回值函数</span></span><br><span class="line">    print_circle_info(radius);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 函数调用可以作为表达式的一部分</span></span><br><span class="line">    <span class="type">int</span> x = <span class="number">10</span>, y = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;max(%d, %d) = %d\n&quot;</span>, x, y, get_max(x, y));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-函数设计的SOLID原则"><a href="#2-函数设计的SOLID原则" class="headerlink" title="2. 函数设计的SOLID原则"></a>2. 函数设计的SOLID原则</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 单一职责原则：每个函数只做一件事</span></span><br><span class="line"><span class="comment">// 好的设计：职责单一的函数</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">is_valid_email</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* email)</span> &#123;</span><br><span class="line">    <span class="comment">// 简化的邮箱验证：检查是否包含@符号</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">strchr</span>(email, <span class="string">&#x27;@&#x27;</span>) != <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">is_valid_age</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> age &gt;= <span class="number">0</span> &amp;&amp; age &lt;= <span class="number">150</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_validation_result</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* item, <span class="type">bool</span> is_valid)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s: %s\n&quot;</span>, item, is_valid ? <span class="string">&quot;有效&quot;</span> : <span class="string">&quot;无效&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开放封闭原则：函数应该对扩展开放，对修改封闭</span></span><br><span class="line"><span class="comment">// 使用函数指针实现可扩展的验证系统</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">bool</span> <span class="params">(*validator_func)</span><span class="params">(<span class="type">const</span> <span class="type">char</span>*)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">validate_not_empty</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> str != <span class="literal">NULL</span> &amp;&amp; <span class="built_in">strlen</span>(str) &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">validate_max_length</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> str != <span class="literal">NULL</span> &amp;&amp; <span class="built_in">strlen</span>(str) &lt;= <span class="number">50</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通用验证函数，可以接受不同的验证器</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">validate_string</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str, validator_func validator)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> validator(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口隔离原则：函数接口应该精简，不强迫调用者依赖不需要的参数</span></span><br><span class="line"><span class="comment">// 好的设计：参数精简的函数</span></span><br><span class="line"><span class="type">double</span> <span class="title function_">calculate_simple_interest</span><span class="params">(<span class="type">double</span> principal, <span class="type">double</span> rate, <span class="type">double</span> time)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> principal * rate * time / <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 依赖倒置原则：高层模块不应该依赖低层模块，都应该依赖抽象</span></span><br><span class="line"><span class="comment">// 使用回调函数实现依赖倒置</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">void</span> <span class="params">(*output_func)</span><span class="params">(<span class="type">const</span> <span class="type">char</span>*)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">console_output</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* message)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;控制台: %s\n&quot;</span>, message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">log_output</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* message)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;日志: %s\n&quot;</span>, message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 高层函数，依赖抽象的输出接口</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">process_user_data</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* name, <span class="type">int</span> age, output_func output)</span> &#123;</span><br><span class="line">    <span class="type">char</span> buffer[<span class="number">100</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (is_valid_age(age)) &#123;</span><br><span class="line">        <span class="built_in">snprintf</span>(buffer, <span class="keyword">sizeof</span>(buffer), <span class="string">&quot;用户 %s，年龄 %d，数据有效&quot;</span>, name, age);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">snprintf</span>(buffer, <span class="keyword">sizeof</span>(buffer), <span class="string">&quot;用户 %s，年龄 %d，数据无效&quot;</span>, name, age);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    output(buffer);  <span class="comment">// 使用传入的输出函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;=== 函数设计原则演示 ===\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 单一职责原则演示</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* email = <span class="string">&quot;user@example.com&quot;</span>;</span><br><span class="line">    <span class="type">int</span> age = <span class="number">25</span>;</span><br><span class="line">    </span><br><span class="line">    print_validation_result(<span class="string">&quot;邮箱&quot;</span>, is_valid_email(email));</span><br><span class="line">    print_validation_result(<span class="string">&quot;年龄&quot;</span>, is_valid_age(age));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 开放封闭原则演示</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* username = <span class="string">&quot;john_doe&quot;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n字符串验证:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;非空验证: %s\n&quot;</span>, validate_string(username, validate_not_empty) ? <span class="string">&quot;通过&quot;</span> : <span class="string">&quot;失败&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;长度验证: %s\n&quot;</span>, validate_string(username, validate_max_length) ? <span class="string">&quot;通过&quot;</span> : <span class="string">&quot;失败&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 依赖倒置原则演示</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n用户数据处理:\n&quot;</span>);</span><br><span class="line">    process_user_data(<span class="string">&quot;Alice&quot;</span>, <span class="number">30</span>, console_output);</span><br><span class="line">    process_user_data(<span class="string">&quot;Bob&quot;</span>, <span class="number">-5</span>, log_output);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="（二）参数传递机制"><a href="#（二）参数传递机制" class="headerlink" title="（二）参数传递机制"></a>（二）参数传递机制</h2><h3 id="1-值传递-vs-指针传递"><a href="#1-值传递-vs-指针传递" class="headerlink" title="1. 值传递 vs 指针传递"></a>1. 值传递 vs 指针传递</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 值传递：函数接收参数的副本</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap_by_value</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;交换前 (函数内): a=%d, b=%d\n&quot;</span>, a, b);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 交换局部变量的值</span></span><br><span class="line">    <span class="type">int</span> temp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = temp;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;交换后 (函数内): a=%d, b=%d\n&quot;</span>, a, b);</span><br><span class="line">    <span class="comment">// 注意：这里的交换不会影响main函数中的变量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指针传递：函数接收变量地址，可以修改原变量</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap_by_pointer</span><span class="params">(<span class="type">int</span>* a, <span class="type">int</span>* b)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;交换前 (函数内): *a=%d, *b=%d\n&quot;</span>, *a, *b);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 通过指针交换原变量的值</span></span><br><span class="line">    <span class="type">int</span> temp = *a;</span><br><span class="line">    *a = *b;</span><br><span class="line">    *b = temp;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;交换后 (函数内): *a=%d, *b=%d\n&quot;</span>, *a, *b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组参数传递（实际上是指针传递）</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_array</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> size)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;数组元素: &quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改数组元素</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">double_array_elements</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> size)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        arr[i] *= <span class="number">2</span>;  <span class="comment">// 直接修改原数组</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串参数传递</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">modify_string</span><span class="params">(<span class="type">char</span> str[])</span> &#123;</span><br><span class="line">    <span class="comment">// 修改字符串的第一个字符</span></span><br><span class="line">    <span class="keyword">if</span> (str[<span class="number">0</span>] != <span class="string">&#x27;\0&#x27;</span>) &#123;</span><br><span class="line">        str[<span class="number">0</span>] = <span class="string">&#x27;X&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 常量参数：防止函数修改参数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_string_info</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;字符串: \&quot;%s\&quot;\n&quot;</span>, str);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;长度: %zu\n&quot;</span>, <span class="built_in">strlen</span>(str));</span><br><span class="line">    <span class="comment">// str[0] = &#x27;Y&#x27;;  // 编译错误：不能修改const参数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;=== 参数传递机制演示 ===\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 值传递演示</span></span><br><span class="line">    <span class="type">int</span> x = <span class="number">10</span>, y = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;值传递演示:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;交换前 (main): x=%d, y=%d\n&quot;</span>, x, y);</span><br><span class="line">    swap_by_value(x, y);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;交换后 (main): x=%d, y=%d\n&quot;</span>, x, y);  <span class="comment">// 值没有改变</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n指针传递演示:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;交换前 (main): x=%d, y=%d\n&quot;</span>, x, y);</span><br><span class="line">    swap_by_pointer(&amp;x, &amp;y);  <span class="comment">// 传递变量地址</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;交换后 (main): x=%d, y=%d\n&quot;</span>, x, y);  <span class="comment">// 值已改变</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 数组传递演示</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n数组传递演示:\n&quot;</span>);</span><br><span class="line">    <span class="type">int</span> numbers[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    <span class="type">int</span> size = <span class="keyword">sizeof</span>(numbers) / <span class="keyword">sizeof</span>(numbers[<span class="number">0</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;原始数组: &quot;</span>);</span><br><span class="line">    print_array(numbers, size);</span><br><span class="line">    </span><br><span class="line">    double_array_elements(numbers, size);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;修改后数组: &quot;</span>);</span><br><span class="line">    print_array(numbers, size);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 字符串传递演示</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n字符串传递演示:\n&quot;</span>);</span><br><span class="line">    <span class="type">char</span> message[] = <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;原始字符串: %s\n&quot;</span>, message);</span><br><span class="line">    </span><br><span class="line">    modify_string(message);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;修改后字符串: %s\n&quot;</span>, message);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 常量参数演示</span></span><br><span class="line">    print_string_info(message);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-函数返回值的最佳实践"><a href="#2-函数返回值的最佳实践" class="headerlink" title="2. 函数返回值的最佳实践"></a>2. 函数返回值的最佳实践</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误处理方式1：返回错误码</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">    CALC_SUCCESS = <span class="number">0</span>,</span><br><span class="line">    CALC_DIVISION_BY_ZERO = <span class="number">1</span>,</span><br><span class="line">    CALC_OVERFLOW = <span class="number">2</span>,</span><br><span class="line">    CALC_INVALID_INPUT = <span class="number">3</span></span><br><span class="line">&#125; <span class="type">calc_error_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">calc_error_t</span> <span class="title function_">safe_divide</span><span class="params">(<span class="type">double</span> a, <span class="type">double</span> b, <span class="type">double</span>* result)</span> &#123;</span><br><span class="line">    <span class="comment">// 参数验证</span></span><br><span class="line">    <span class="keyword">if</span> (result == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> CALC_INVALID_INPUT;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 检查除零错误</span></span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0.0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> CALC_DIVISION_BY_ZERO;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 执行计算</span></span><br><span class="line">    *result = a / b;</span><br><span class="line">    <span class="keyword">return</span> CALC_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误处理方式2：返回布尔值，使用输出参数</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">parse_integer</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str, <span class="type">int</span>* value)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (str == <span class="literal">NULL</span> || value == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">char</span>* endptr;</span><br><span class="line">    errno = <span class="number">0</span>;  <span class="comment">// 重置errno</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">long</span> result = strtol(str, &amp;endptr, <span class="number">10</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 检查转换是否成功</span></span><br><span class="line">    <span class="keyword">if</span> (errno != <span class="number">0</span> || *endptr != <span class="string">&#x27;\0&#x27;</span> || result &lt; INT_MIN || result &gt; INT_MAX) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    *value = (<span class="type">int</span>)result;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误处理方式3：返回特殊值表示错误</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">find_max_index</span><span class="params">(<span class="type">const</span> <span class="type">int</span> arr[], <span class="type">int</span> size)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr == <span class="literal">NULL</span> || size &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;  <span class="comment">// 返回-1表示错误</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> max_index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; size; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &gt; arr[max_index]) &#123;</span><br><span class="line">            max_index = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> max_index;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多返回值的模拟：使用结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">bool</span> success;</span><br><span class="line">    <span class="type">int</span> quotient;</span><br><span class="line">    <span class="type">int</span> remainder;</span><br><span class="line">&#125; <span class="type">division_result_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">division_result_t</span> <span class="title function_">integer_divide</span><span class="params">(<span class="type">int</span> dividend, <span class="type">int</span> divisor)</span> &#123;</span><br><span class="line">    <span class="type">division_result_t</span> result = &#123;<span class="literal">false</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (divisor == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> result;  <span class="comment">// 返回失败状态</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    result.success = <span class="literal">true</span>;</span><br><span class="line">    result.quotient = dividend / divisor;</span><br><span class="line">    result.remainder = dividend % divisor;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* <span class="title function_">error_to_string</span><span class="params">(<span class="type">calc_error_t</span> error)</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (error) &#123;</span><br><span class="line">        <span class="keyword">case</span> CALC_SUCCESS: <span class="keyword">return</span> <span class="string">&quot;成功&quot;</span>;</span><br><span class="line">        <span class="keyword">case</span> CALC_DIVISION_BY_ZERO: <span class="keyword">return</span> <span class="string">&quot;除零错误&quot;</span>;</span><br><span class="line">        <span class="keyword">case</span> CALC_OVERFLOW: <span class="keyword">return</span> <span class="string">&quot;溢出错误&quot;</span>;</span><br><span class="line">        <span class="keyword">case</span> CALC_INVALID_INPUT: <span class="keyword">return</span> <span class="string">&quot;无效输入&quot;</span>;</span><br><span class="line">        <span class="keyword">default</span>: <span class="keyword">return</span> <span class="string">&quot;未知错误&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;=== 函数返回值最佳实践 ===\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 错误码方式演示</span></span><br><span class="line">    <span class="type">double</span> result;</span><br><span class="line">    <span class="type">calc_error_t</span> error = safe_divide(<span class="number">10.0</span>, <span class="number">3.0</span>, &amp;result);</span><br><span class="line">    <span class="keyword">if</span> (error == CALC_SUCCESS) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;10.0 / 3.0 = %.2f\n&quot;</span>, result);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;计算失败: %s\n&quot;</span>, error_to_string(error));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    error = safe_divide(<span class="number">10.0</span>, <span class="number">0.0</span>, &amp;result);</span><br><span class="line">    <span class="keyword">if</span> (error != CALC_SUCCESS) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;10.0 / 0.0 失败: %s\n&quot;</span>, error_to_string(error));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 布尔返回值演示</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n字符串解析演示:\n&quot;</span>);</span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* test_strings[] = &#123;<span class="string">&quot;123&quot;</span>, <span class="string">&quot;abc&quot;</span>, <span class="string">&quot;456def&quot;</span>, <span class="string">&quot;999999999999999999&quot;</span>&#125;;</span><br><span class="line">    <span class="type">int</span> num_tests = <span class="keyword">sizeof</span>(test_strings) / <span class="keyword">sizeof</span>(test_strings[<span class="number">0</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num_tests; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (parse_integer(test_strings[i], &amp;value)) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\&quot;%s\&quot; -&gt; %d (成功)\n&quot;</span>, test_strings[i], value);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\&quot;%s\&quot; -&gt; 解析失败\n&quot;</span>, test_strings[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 特殊值返回演示</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n数组最大值索引:\n&quot;</span>);</span><br><span class="line">    <span class="type">int</span> numbers[] = &#123;<span class="number">3</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">1</span>&#125;;</span><br><span class="line">    <span class="type">int</span> size = <span class="keyword">sizeof</span>(numbers) / <span class="keyword">sizeof</span>(numbers[<span class="number">0</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> max_idx = find_max_index(numbers, size);</span><br><span class="line">    <span class="keyword">if</span> (max_idx &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;最大值 %d 位于索引 %d\n&quot;</span>, numbers[max_idx], max_idx);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;查找失败\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 结构体返回值演示</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n整数除法演示:\n&quot;</span>);</span><br><span class="line">    <span class="type">division_result_t</span> div_result = integer_divide(<span class="number">17</span>, <span class="number">5</span>);</span><br><span class="line">    <span class="keyword">if</span> (div_result.success) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;17 ÷ 5 = %d 余 %d\n&quot;</span>, div_result.quotient, div_result.remainder);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;除法计算失败\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="（三）递归编程"><a href="#（三）递归编程" class="headerlink" title="（三）递归编程"></a>（三）递归编程</h2><h3 id="1-递归的基本概念和应用"><a href="#1-递归的基本概念和应用" class="headerlink" title="1. 递归的基本概念和应用"></a>1. 递归的基本概念和应用</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 经典递归：计算阶乘</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> <span class="title function_">factorial</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="comment">// 基础情况（递归终止条件）</span></span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 递归情况</span></span><br><span class="line">    <span class="keyword">return</span> n * factorial(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归：计算斐波那契数列</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> <span class="title function_">fibonacci</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> fibonacci(n - <span class="number">1</span>) + fibonacci(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 优化的斐波那契：使用记忆化</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> <span class="title function_">fibonacci_memo</span><span class="params">(<span class="type">int</span> n, <span class="type">long</span> <span class="type">long</span> memo[])</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果已经计算过，直接返回结果</span></span><br><span class="line">    <span class="keyword">if</span> (memo[n] != <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> memo[n];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 计算并存储结果</span></span><br><span class="line">    memo[n] = fibonacci_memo(n - <span class="number">1</span>, memo) + fibonacci_memo(n - <span class="number">2</span>, memo);</span><br><span class="line">    <span class="keyword">return</span> memo[n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归：字符串反转</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">reverse_string</span><span class="params">(<span class="type">char</span> str[], <span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">    <span class="comment">// 基础情况</span></span><br><span class="line">    <span class="keyword">if</span> (start &gt;= end) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 交换字符</span></span><br><span class="line">    <span class="type">char</span> temp = str[start];</span><br><span class="line">    str[start] = str[end];</span><br><span class="line">    str[end] = temp;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 递归处理剩余部分</span></span><br><span class="line">    reverse_string(str, start + <span class="number">1</span>, end - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归：二分查找</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">binary_search</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="comment">// 基础情况：未找到</span></span><br><span class="line">    <span class="keyword">if</span> (left &gt; right) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;  <span class="comment">// 防止溢出的中点计算</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 基础情况：找到目标</span></span><br><span class="line">    <span class="keyword">if</span> (arr[mid] == target) &#123;</span><br><span class="line">        <span class="keyword">return</span> mid;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 递归情况</span></span><br><span class="line">    <span class="keyword">if</span> (arr[mid] &gt; target) &#123;</span><br><span class="line">        <span class="keyword">return</span> binary_search(arr, left, mid - <span class="number">1</span>, target);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> binary_search(arr, mid + <span class="number">1</span>, right, target);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归：汉诺塔问题</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">hanoi</span><span class="params">(<span class="type">int</span> n, <span class="type">char</span> from, <span class="type">char</span> to, <span class="type">char</span> aux)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;将盘子 1 从 %c 移动到 %c\n&quot;</span>, from, to);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将前n-1个盘子从from移动到aux</span></span><br><span class="line">    hanoi(n - <span class="number">1</span>, from, aux, to);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将最大的盘子从from移动到to</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;将盘子 %d 从 %c 移动到 %c\n&quot;</span>, n, from, to);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将n-1个盘子从aux移动到to</span></span><br><span class="line">    hanoi(n - <span class="number">1</span>, aux, to, from);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归：计算数组元素之和</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">array_sum</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> size)</span> &#123;</span><br><span class="line">    <span class="comment">// 基础情况</span></span><br><span class="line">    <span class="keyword">if</span> (size &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 递归情况</span></span><br><span class="line">    <span class="keyword">return</span> arr[size - <span class="number">1</span>] + array_sum(arr, size - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;=== 递归编程演示 ===\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 阶乘演示</span></span><br><span class="line">    <span class="type">int</span> n = <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;阶乘计算:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d! = %lld\n&quot;</span>, n, factorial(n));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 斐波那契数列演示</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n斐波那契数列:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;普通递归 fibonacci(%d) = %lld\n&quot;</span>, <span class="number">10</span>, fibonacci(<span class="number">10</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 记忆化斐波那契</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> memo[<span class="number">50</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">        memo[i] = <span class="number">-1</span>;  <span class="comment">// 初始化为-1表示未计算</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;记忆化递归 fibonacci(%d) = %lld\n&quot;</span>, <span class="number">40</span>, fibonacci_memo(<span class="number">40</span>, memo));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 字符串反转演示</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n字符串反转:\n&quot;</span>);</span><br><span class="line">    <span class="type">char</span> str[] = <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;原字符串: %s\n&quot;</span>, str);</span><br><span class="line">    reverse_string(str, <span class="number">0</span>, <span class="built_in">strlen</span>(str) - <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;反转后: %s\n&quot;</span>, str);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 二分查找演示</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n二分查找:\n&quot;</span>);</span><br><span class="line">    <span class="type">int</span> sorted_array[] = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">17</span>, <span class="number">19</span>&#125;;</span><br><span class="line">    <span class="type">int</span> array_size = <span class="keyword">sizeof</span>(sorted_array) / <span class="keyword">sizeof</span>(sorted_array[<span class="number">0</span>]);</span><br><span class="line">    <span class="type">int</span> target = <span class="number">7</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> index = binary_search(sorted_array, <span class="number">0</span>, array_size - <span class="number">1</span>, target);</span><br><span class="line">    <span class="keyword">if</span> (index != <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;在索引 %d 处找到 %d\n&quot;</span>, index, target);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;未找到 %d\n&quot;</span>, target);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 汉诺塔演示</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n汉诺塔问题 (3个盘子):\n&quot;</span>);</span><br><span class="line">    hanoi(<span class="number">3</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;B&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 数组求和演示</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n数组求和:\n&quot;</span>);</span><br><span class="line">    <span class="type">int</span> numbers[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    <span class="type">int</span> sum = array_sum(numbers, <span class="number">5</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;数组 &#123;1, 2, 3, 4, 5&#125; 的和为: %d\n&quot;</span>, sum);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="二、变量作用域与生命周期"><a href="#二、变量作用域与生命周期" class="headerlink" title="二、变量作用域与生命周期"></a>二、变量作用域与生命周期</h1><h2 id="（一）作用域规则"><a href="#（一）作用域规则" class="headerlink" title="（一）作用域规则"></a>（一）作用域规则</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局变量：在整个程序中都可见</span></span><br><span class="line"><span class="type">int</span> global_counter = <span class="number">0</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="number">3.14159265359</span>;  <span class="comment">// 全局常量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 静态全局变量：只在当前文件中可见</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> file_scope_var = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数声明</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">demonstrate_scope</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">increment_counters</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数定义</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">demonstrate_scope</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 局部变量：只在函数内部可见</span></span><br><span class="line">    <span class="type">int</span> local_var = <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;函数内部:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  局部变量: %d\n&quot;</span>, local_var);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  全局变量: %d\n&quot;</span>, global_counter);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  文件作用域变量: %d\n&quot;</span>, file_scope_var);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 块作用域演示</span></span><br><span class="line">    <span class="keyword">if</span> (local_var &gt; <span class="number">5</span>) &#123;</span><br><span class="line">        <span class="type">int</span> block_var = <span class="number">20</span>;  <span class="comment">// 块作用域变量</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;  块内变量: %d\n&quot;</span>, block_var);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 变量遮蔽（shadowing）</span></span><br><span class="line">        <span class="type">int</span> global_counter = <span class="number">999</span>;  <span class="comment">// 局部变量遮蔽全局变量</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;  遮蔽的全局变量: %d\n&quot;</span>, global_counter);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// block_var在这里不可见</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  块外的全局变量: %d\n&quot;</span>, global_counter);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">increment_counters</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 静态局部变量：保持值在函数调用之间</span></span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> static_counter = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    global_counter++;</span><br><span class="line">    static_counter++;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;计数器增加:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  全局计数器: %d\n&quot;</span>, global_counter);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  静态局部计数器: %d\n&quot;</span>, static_counter);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;=== 变量作用域演示 ===\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 局部变量</span></span><br><span class="line">    <span class="type">int</span> main_local = <span class="number">42</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;main函数开始:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  main局部变量: %d\n&quot;</span>, main_local);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  全局变量: %d\n&quot;</span>, global_counter);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 调用函数演示作用域</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    demonstrate_scope();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 演示静态变量</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n静态变量演示:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;第 %d 次调用:\n&quot;</span>, i + <span class="number">1</span>);</span><br><span class="line">        increment_counters();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 循环变量的作用域</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n循环变量作用域:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;循环内 i = %d\n&quot;</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// printf(&quot;循环外 i = %d\n&quot;, i);  // 编译错误：i不在作用域内</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="（二）存储类别"><a href="#（二）存储类别" class="headerlink" title="（二）存储类别"></a>（二）存储类别</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 外部变量声明（定义在其他文件中）</span></span><br><span class="line"><span class="comment">// extern int external_var;  // 如果有其他文件定义了这个变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 静态函数：只在当前文件中可见</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">internal_function</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;这是一个静态函数，只能在当前文件中调用\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 演示不同存储类别的函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">storage_class_demo</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// auto存储类别（默认，通常省略）</span></span><br><span class="line">    <span class="keyword">auto</span> <span class="type">int</span> auto_var = <span class="number">10</span>;  <span class="comment">// 等价于 int auto_var = 10;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// register存储类别（建议编译器将变量存储在寄存器中）</span></span><br><span class="line">    <span class="keyword">register</span> <span class="type">int</span> reg_var = <span class="number">20</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// static存储类别（静态局部变量）</span></span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> static_var = <span class="number">30</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;存储类别演示:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  auto变量: %d\n&quot;</span>, auto_var);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  register变量: %d\n&quot;</span>, reg_var);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  static变量: %d\n&quot;</span>, static_var);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 修改变量值</span></span><br><span class="line">    auto_var++;</span><br><span class="line">    reg_var++;</span><br><span class="line">    static_var++;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;修改后:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  auto变量: %d\n&quot;</span>, auto_var);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  register变量: %d\n&quot;</span>, reg_var);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  static变量: %d\n&quot;</span>, static_var);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 注意：不能获取register变量的地址</span></span><br><span class="line">    <span class="comment">// printf(&quot;register变量地址: %p\n&quot;, &amp;reg_var);  // 编译错误</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 演示动态内存分配</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">dynamic_memory_demo</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n动态内存分配演示:\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 在堆上分配内存</span></span><br><span class="line">    <span class="type">int</span>* dynamic_array = <span class="built_in">malloc</span>(<span class="number">5</span> * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="keyword">if</span> (dynamic_array == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;内存分配失败\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化动态数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        dynamic_array[i] = i * i;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;动态数组: &quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, dynamic_array[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 释放内存</span></span><br><span class="line">    <span class="built_in">free</span>(dynamic_array);</span><br><span class="line">    dynamic_array = <span class="literal">NULL</span>;  <span class="comment">// 防止悬空指针</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;内存已释放\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;=== 存储类别演示 ===\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 多次调用函数，观察静态变量的行为</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n第 %d 次调用:\n&quot;</span>, i + <span class="number">1</span>);</span><br><span class="line">        storage_class_demo();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 调用静态函数</span></span><br><span class="line">    internal_function();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 动态内存演示</span></span><br><span class="line">    dynamic_memory_demo();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="三、模块化编程"><a href="#三、模块化编程" class="headerlink" title="三、模块化编程"></a>三、模块化编程</h1><h2 id="（一）头文件和源文件组织"><a href="#（一）头文件和源文件组织" class="headerlink" title="（一）头文件和源文件组织"></a>（一）头文件和源文件组织</h2><p>让我们创建一个简单的数学库来演示模块化编程：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// math_utils.h - 头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MATH_UTILS_H  <span class="comment">// 头文件保护</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MATH_UTILS_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 常量定义</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PI 3.14159265359</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> E  2.71828182846</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数声明</span></span><br><span class="line"><span class="type">double</span> <span class="title function_">power</span><span class="params">(<span class="type">double</span> base, <span class="type">int</span> exponent)</span>;</span><br><span class="line"><span class="type">double</span> <span class="title function_">square_root</span><span class="params">(<span class="type">double</span> number)</span>;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">is_prime</span><span class="params">(<span class="type">int</span> number)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">gcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">lcm</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line"><span class="type">double</span> <span class="title function_">factorial_approx</span><span class="params">(<span class="type">int</span> n)</span>;  <span class="comment">// 使用斯特林公式近似</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 内联函数（C99特性）</span></span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">double</span> <span class="title function_">square</span><span class="params">(<span class="type">double</span> x)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">double</span> <span class="title function_">cube</span><span class="params">(<span class="type">double</span> x)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x * x * x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span>  <span class="comment">// MATH_UTILS_H</span></span></span><br></pre></td></tr></table></figure>

<p>现在让我们在主文件中使用这个模块：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.c - 主程序文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;math_utils.h&quot;</span>  <span class="comment">// 包含自定义头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现math_utils.h中声明的函数</span></span><br><span class="line"><span class="type">double</span> <span class="title function_">power</span><span class="params">(<span class="type">double</span> base, <span class="type">int</span> exponent)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (exponent == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1.0</span>;</span><br><span class="line">    <span class="keyword">if</span> (exponent &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1.0</span> / power(base, -exponent);</span><br><span class="line">    </span><br><span class="line">    <span class="type">double</span> result = <span class="number">1.0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; exponent; i++) &#123;</span><br><span class="line">        result *= base;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="title function_">square_root</span><span class="params">(<span class="type">double</span> number)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (number &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;  <span class="comment">// 错误标识</span></span><br><span class="line">    <span class="keyword">if</span> (number == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用牛顿法求平方根</span></span><br><span class="line">    <span class="type">double</span> guess = number / <span class="number">2.0</span>;</span><br><span class="line">    <span class="type">double</span> epsilon = <span class="number">1e-10</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">fabs</span>(guess * guess - number) &gt; epsilon) &#123;</span><br><span class="line">        guess = (guess + number / guess) / <span class="number">2.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> guess;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">is_prime</span><span class="params">(<span class="type">int</span> number)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (number &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (number == <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (number % <span class="number">2</span> == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">3</span>; i * i &lt;= number; i += <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (number % i == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">gcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="comment">// 欧几里得算法</span></span><br><span class="line">    <span class="keyword">while</span> (b != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">int</span> temp = b;</span><br><span class="line">        b = a % b;</span><br><span class="line">        a = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">lcm</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (a * b) / gcd(a, b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="title function_">factorial_approx</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="comment">// 斯特林公式近似：n! ≈ √(2πn) * (n/e)^n</span></span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span> || n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(<span class="number">2</span> * PI * n) * power(n / E, n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 演示函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">demonstrate_math_utils</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;=== 数学工具库演示 ===\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 基本运算</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;基本运算:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;2^10 = %.0f\n&quot;</span>, power(<span class="number">2</span>, <span class="number">10</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;5^2 = %.0f (使用内联函数)\n&quot;</span>, square(<span class="number">5</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;3^3 = %.0f (使用内联函数)\n&quot;</span>, cube(<span class="number">3</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;√16 = %.2f\n&quot;</span>, square_root(<span class="number">16</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 数论函数</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n数论函数:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;17是质数吗？%s\n&quot;</span>, is_prime(<span class="number">17</span>) ? <span class="string">&quot;是&quot;</span> : <span class="string">&quot;否&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;18是质数吗？%s\n&quot;</span>, is_prime(<span class="number">18</span>) ? <span class="string">&quot;是&quot;</span> : <span class="string">&quot;否&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;gcd(48, 18) = %d\n&quot;</span>, gcd(<span class="number">48</span>, <span class="number">18</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;lcm(12, 8) = %d\n&quot;</span>, lcm(<span class="number">12</span>, <span class="number">8</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 阶乘近似</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n阶乘近似:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">5</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d! ≈ %.0f\n&quot;</span>, i, factorial_approx(i));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    demonstrate_math_utils();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="note warning flat"><p><strong>编译多文件项目</strong>：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果将函数实现放在单独的.c文件中</span></span><br><span class="line">gcc -std=c11 -Wall -Wextra -lm math_utils.c main.c -o program</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者分步编译</span></span><br><span class="line">gcc -std=c11 -Wall -c math_utils.c</span><br><span class="line">gcc -std=c11 -Wall -c main.c</span><br><span class="line">gcc math_utils.o main.o -lm -o program</span><br></pre></td></tr></table></figure></div>

<h2 id="（二）函数指针和回调函数"><a href="#（二）函数指针和回调函数" class="headerlink" title="（二）函数指针和回调函数"></a>（二）函数指针和回调函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义函数指针类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">int</span> <span class="params">(*operation_func)</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">void</span> <span class="params">(*callback_func)</span><span class="params">(<span class="type">int</span> result)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基本运算函数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123; <span class="keyword">return</span> a + b; &#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">subtract</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123; <span class="keyword">return</span> a - b; &#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">multiply</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123; <span class="keyword">return</span> a * b; &#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">divide_int</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123; </span><br><span class="line">    <span class="keyword">return</span> (b != <span class="number">0</span>) ? a / b : <span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 回调函数示例</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_result</span><span class="params">(<span class="type">int</span> result)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;计算结果: %d\n&quot;</span>, result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">log_result</span><span class="params">(<span class="type">int</span> result)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[日志] 运算完成，结果: %d\n&quot;</span>, result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用函数指针的计算器</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">calculator</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, operation_func op, callback_func callback)</span> &#123;</span><br><span class="line">    <span class="type">int</span> result = op(a, b);</span><br><span class="line">    <span class="keyword">if</span> (callback != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        callback(result);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数指针数组</span></span><br><span class="line">operation_func operations[] = &#123;add, subtract, multiply, divide_int&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* operation_names[] = &#123;<span class="string">&quot;加法&quot;</span>, <span class="string">&quot;减法&quot;</span>, <span class="string">&quot;乘法&quot;</span>, <span class="string">&quot;除法&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 高阶函数：对数组应用操作</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">apply_operation</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> size, <span class="type">int</span> (*transform)(<span class="type">int</span>))</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        arr[i] = transform(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 变换函数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">double_value</span><span class="params">(<span class="type">int</span> x)</span> &#123; <span class="keyword">return</span> x * <span class="number">2</span>; &#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">square_value</span><span class="params">(<span class="type">int</span> x)</span> &#123; <span class="keyword">return</span> x * x; &#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">increment</span><span class="params">(<span class="type">int</span> x)</span> &#123; <span class="keyword">return</span> x + <span class="number">1</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;=== 函数指针和回调函数演示 ===\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 基本函数指针使用</span></span><br><span class="line">    operation_func op = add;</span><br><span class="line">    <span class="type">int</span> result = op(<span class="number">5</span>, <span class="number">3</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;使用函数指针: 5 + 3 = %d\n&quot;</span>, result);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用回调函数的计算器</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n回调函数演示:\n&quot;</span>);</span><br><span class="line">    calculator(<span class="number">10</span>, <span class="number">4</span>, subtract, print_result);</span><br><span class="line">    calculator(<span class="number">6</span>, <span class="number">7</span>, multiply, log_result);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 函数指针数组</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n函数指针数组演示:\n&quot;</span>);</span><br><span class="line">    <span class="type">int</span> a = <span class="number">12</span>, b = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        <span class="type">int</span> res = operations[i](a, b);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s: %d\n&quot;</span>, operation_names[i], res);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 高阶函数演示</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n高阶函数演示:\n&quot;</span>);</span><br><span class="line">    <span class="type">int</span> numbers[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    <span class="type">int</span> size = <span class="keyword">sizeof</span>(numbers) / <span class="keyword">sizeof</span>(numbers[<span class="number">0</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;原始数组: &quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, numbers[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 应用不同的变换</span></span><br><span class="line">    apply_operation(numbers, size, double_value);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;翻倍后: &quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, numbers[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="四、实践项目：学生管理系统（函数版）"><a href="#四、实践项目：学生管理系统（函数版）" class="headerlink" title="四、实践项目：学生管理系统（函数版）"></a>四、实践项目：学生管理系统（函数版）</h1><p>让我们创建一个使用函数模块化设计的学生管理系统：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_STUDENTS 100</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_NAME_LENGTH 50</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 学生结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="type">char</span> name[MAX_NAME_LENGTH];</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">float</span> score;</span><br><span class="line">&#125; Student;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局学生数组和计数器</span></span><br><span class="line">Student students[MAX_STUDENTS];</span><br><span class="line"><span class="type">int</span> student_count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数声明</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">add_student</span><span class="params">(<span class="type">int</span> id, <span class="type">const</span> <span class="type">char</span>* name, <span class="type">int</span> age, <span class="type">float</span> score)</span>;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">remove_student</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line">Student* <span class="title function_">find_student</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">display_all_students</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">display_student</span><span class="params">(<span class="type">const</span> Student* student)</span>;</span><br><span class="line"><span class="type">float</span> <span class="title function_">calculate_average_score</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line">Student* <span class="title function_">find_top_student</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">sort_students_by_score</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">save_to_file</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* filename)</span>;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">load_from_file</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* filename)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">show_menu</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">get_user_choice</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数实现</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">add_student</span><span class="params">(<span class="type">int</span> id, <span class="type">const</span> <span class="type">char</span>* name, <span class="type">int</span> age, <span class="type">float</span> score)</span> &#123;</span><br><span class="line">    <span class="comment">// 检查是否已满</span></span><br><span class="line">    <span class="keyword">if</span> (student_count &gt;= MAX_STUDENTS) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;错误：学生数量已达上限\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 检查ID是否已存在</span></span><br><span class="line">    <span class="keyword">if</span> (find_student(id) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;错误：学号 %d 已存在\n&quot;</span>, id);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 添加学生</span></span><br><span class="line">    students[student_count].id = id;</span><br><span class="line">    <span class="built_in">strncpy</span>(students[student_count].name, name, MAX_NAME_LENGTH - <span class="number">1</span>);</span><br><span class="line">    students[student_count].name[MAX_NAME_LENGTH - <span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    students[student_count].age = age;</span><br><span class="line">    students[student_count].score = score;</span><br><span class="line">    student_count++;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;成功添加学生：%s\n&quot;</span>, name);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student* <span class="title function_">find_student</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; student_count; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (students[i].id == id) &#123;</span><br><span class="line">            <span class="keyword">return</span> &amp;students[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">display_student</span><span class="params">(<span class="type">const</span> Student* student)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (student == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;学号: %d, 姓名: %s, 年龄: %d, 成绩: %.1f\n&quot;</span>,</span><br><span class="line">           student-&gt;id, student-&gt;name, student-&gt;age, student-&gt;score);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">display_all_students</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (student_count == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;暂无学生记录\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n=== 所有学生信息 ===\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%-6s %-20s %-6s %-6s\n&quot;</span>, <span class="string">&quot;学号&quot;</span>, <span class="string">&quot;姓名&quot;</span>, <span class="string">&quot;年龄&quot;</span>, <span class="string">&quot;成绩&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;----------------------------------------\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; student_count; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%-6d %-20s %-6d %-6.1f\n&quot;</span>,</span><br><span class="line">               students[i].id, students[i].name, </span><br><span class="line">               students[i].age, students[i].score);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">float</span> <span class="title function_">calculate_average_score</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (student_count == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0.0f</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">float</span> total = <span class="number">0.0f</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; student_count; i++) &#123;</span><br><span class="line">        total += students[i].score;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> total / student_count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">show_menu</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n=== 学生管理系统 ===\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;1. 添加学生\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;2. 查找学生\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;3. 显示所有学生\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;4. 计算平均分\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;5. 按成绩排序\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;0. 退出\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请选择操作: &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">get_user_choice</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="type">int</span> choice;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;choice);</span><br><span class="line">    <span class="keyword">return</span> choice;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简化的排序函数（冒泡排序）</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">sort_students_by_score</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; student_count - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; student_count - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (students[j].score &lt; students[j + <span class="number">1</span>].score) &#123;</span><br><span class="line">                <span class="comment">// 交换学生记录</span></span><br><span class="line">                Student temp = students[j];</span><br><span class="line">                students[j] = students[j + <span class="number">1</span>];</span><br><span class="line">                students[j + <span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;学生已按成绩降序排列\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 添加一些示例数据</span></span><br><span class="line">    add_student(<span class="number">1001</span>, <span class="string">&quot;张三&quot;</span>, <span class="number">20</span>, <span class="number">85.5</span>);</span><br><span class="line">    add_student(<span class="number">1002</span>, <span class="string">&quot;李四&quot;</span>, <span class="number">19</span>, <span class="number">92.0</span>);</span><br><span class="line">    add_student(<span class="number">1003</span>, <span class="string">&quot;王五&quot;</span>, <span class="number">21</span>, <span class="number">78.5</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> choice;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        show_menu();</span><br><span class="line">        choice = get_user_choice();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">switch</span> (choice) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>: &#123;</span><br><span class="line">                <span class="type">int</span> id, age;</span><br><span class="line">                <span class="type">char</span> name[MAX_NAME_LENGTH];</span><br><span class="line">                <span class="type">float</span> score;</span><br><span class="line">                </span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;请输入学号: &quot;</span>);</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;id);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;请输入姓名: &quot;</span>);</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, name);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;请输入年龄: &quot;</span>);</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;age);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;请输入成绩: &quot;</span>);</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>, &amp;score);</span><br><span class="line">                </span><br><span class="line">                add_student(id, name, age, score);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>: &#123;</span><br><span class="line">                <span class="type">int</span> id;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;请输入要查找的学号: &quot;</span>);</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;id);</span><br><span class="line">                </span><br><span class="line">                Student* student = find_student(id);</span><br><span class="line">                <span class="keyword">if</span> (student != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;找到学生: &quot;</span>);</span><br><span class="line">                    display_student(student);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;未找到学号为 %d 的学生\n&quot;</span>, id);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                display_all_students();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;平均成绩: %.2f\n&quot;</span>, calculate_average_score());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                sort_students_by_score();</span><br><span class="line">                display_all_students();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;感谢使用学生管理系统！\n&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;无效选择，请重新输入\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (choice != <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="五、总结与下一步"><a href="#五、总结与下一步" class="headerlink" title="五、总结与下一步"></a>五、总结与下一步</h1><h2 id="（一）本文重点回顾"><a href="#（一）本文重点回顾" class="headerlink" title="（一）本文重点回顾"></a>（一）本文重点回顾</h2><p>通过本文的学习，您已经掌握了：</p>
<p><strong>函数设计原则：</strong></p>
<ul>
<li>单一职责、开放封闭等设计原则</li>
<li>参数传递机制的深入理解</li>
<li>错误处理的最佳实践</li>
</ul>
<p><strong>递归编程：</strong></p>
<ul>
<li>递归的基本概念和应用场景</li>
<li>经典递归算法的实现</li>
<li>递归优化技巧</li>
</ul>
<p><strong>作用域和生命周期：</strong></p>
<ul>
<li>变量的作用域规则</li>
<li>不同存储类别的特点</li>
<li>内存管理基础</li>
</ul>
<p><strong>模块化编程：</strong></p>
<ul>
<li>头文件和源文件的组织</li>
<li>函数指针和回调函数</li>
<li>代码复用和维护性</li>
</ul>
<h2 id="（二）学习建议"><a href="#（二）学习建议" class="headerlink" title="（二）学习建议"></a>（二）学习建议</h2><ol>
<li><strong>多练习函数设计</strong>：尝试将复杂问题分解为简单函数</li>
<li><strong>理解递归思维</strong>：从简单的递归开始，逐步挑战复杂问题</li>
<li><strong>注意代码组织</strong>：养成良好的模块化编程习惯</li>
<li><strong>实践项目开发</strong>：通过完整项目巩固所学知识</li>
</ol>
<a class="btn-beautify blue" href="/2025/08/10/%E5%AD%A6%E4%B9%A0/%E3%80%90%E5%AD%A6%E4%B9%A0%E3%80%91C%E8%AF%AD%E8%A8%80%E6%95%B0%E7%BB%84%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E7%9A%84%E8%89%BA%E6%9C%AF/" title="下一篇：数组与字符串深度解析"><i class="far fa-hand-point-right"></i><span>下一篇：数组与字符串深度解析</span></a>

<hr>
<p><strong>参考资料：</strong></p>
<ul>
<li>《代码大全》- Steve McConnell</li>
<li>《重构：改善既有代码的设计》- Martin Fowler</li>
<li>《设计模式》- Gang of Four</li>
<li>《C陷阱与缺陷》- Andrew Koenig</li>
<li>C语言函数库参考：<a href="https://en.cppreference.com/w/c/header">https://en.cppreference.com/w/c/header</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<div class="note info flat"><p><strong>C语言系统学习系列 - 第2篇</strong><br>在掌握了C语言基础语法后，本文将深入探讨函数设计和模块化编程，这是编写高质量、可维护代码的关键技能。</p>
</div>

<h1 id="前言]]>
    </summary>
    
      <category term="C语言" scheme="https://uwakeme.tech/tags/C%E8%AF%AD%E8%A8%80/"/>
    
      <category term="函数设计" scheme="https://uwakeme.tech/tags/%E5%87%BD%E6%95%B0%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="模块化编程" scheme="https://uwakeme.tech/tags/%E6%A8%A1%E5%9D%97%E5%8C%96%E7%BC%96%E7%A8%8B/"/>
    
      <category term="代码组织" scheme="https://uwakeme.tech/tags/%E4%BB%A3%E7%A0%81%E7%BB%84%E7%BB%87/"/>
    
      <category term="软件工程" scheme="https://uwakeme.tech/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
      <category term="学习" scheme="https://uwakeme.tech/categories/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[【学习】C语言完全入门指南：现代C编程的第一步]]></title>
    <link href="https://uwakeme.tech/2025/08/11/%E5%AD%A6%E4%B9%A0/%E3%80%90%E5%AD%A6%E4%B9%A0%E3%80%91C%E8%AF%AD%E8%A8%80%E5%AE%8C%E5%85%A8%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97%EF%BC%9A%E7%8E%B0%E4%BB%A3C%E7%BC%96%E7%A8%8B%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AD%A5/"/>
    <id>https://uwakeme.tech/2025/08/11/学习/【学习】C语言完全入门指南：现代C编程的第一步/</id>
    <published>2025-08-11T02:00:00.000Z</published>
    <updated>2025-08-11T07:51:41.160Z</updated>
    <content type="html"><![CDATA[<div class="note info flat"><p><strong>C语言系统学习系列 - 第1篇</strong><br>本系列将带你从零开始，系统掌握C语言编程的各个方面，从基础语法到高级特性，从简单程序到复杂项目。</p>
</div>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>C语言诞生于1972年，由Dennis Ritchie在贝尔实验室开发。作为一门接近底层的高级编程语言，C语言以其简洁、高效、可移植的特点，成为了现代编程语言的基石。无论是操作系统内核、嵌入式系统，还是高性能计算，C语言都发挥着不可替代的作用。</p>
<p><strong>为什么选择C语言作为编程入门？</strong></p>
<ol>
<li><strong>基础性强</strong>：掌握C语言后，学习其他编程语言会变得容易</li>
<li><strong>性能优秀</strong>：直接编译成机器码，执行效率高</li>
<li><strong>应用广泛</strong>：从系统软件到嵌入式开发，应用领域极其广泛</li>
<li><strong>理解底层</strong>：帮助理解计算机的工作原理和内存管理</li>
</ol>
<p><strong>本文学习目标：</strong></p>
<ul>
<li>搭建现代C语言开发环境</li>
<li>理解C语言的发展历程和标准</li>
<li>掌握基本语法和数据类型</li>
<li>学会编译和调试程序</li>
<li>编写第一个完整的C程序</li>
</ul>
<a class="btn-beautify green" href="https://github.com/topics/c-programming" title="查看C语言项目"><i class="far fa-hand-point-right"></i><span>查看C语言项目</span></a>

<h1 id="一、C语言发展历程与标准"><a href="#一、C语言发展历程与标准" class="headerlink" title="一、C语言发展历程与标准"></a>一、C语言发展历程与标准</h1><h2 id="（一）C语言的演进历史"><a href="#（一）C语言的演进历史" class="headerlink" title="（一）C语言的演进历史"></a>（一）C语言的演进历史</h2><h3 id="1-历史发展脉络"><a href="#1-历史发展脉络" class="headerlink" title="1. 历史发展脉络"></a>1. 历史发展脉络</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C语言发展时间线</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1972年 - C语言诞生（Dennis Ritchie，贝尔实验室）</span></span><br><span class="line"><span class="comment">1978年 - 《The C Programming Language》出版（K&amp;R C）</span></span><br><span class="line"><span class="comment">1989年 - ANSI C标准发布（C89/C90）</span></span><br><span class="line"><span class="comment">1999年 - C99标准发布，增加了许多新特性</span></span><br><span class="line"><span class="comment">2011年 - C11标准发布，引入多线程支持</span></span><br><span class="line"><span class="comment">2018年 - C18标准发布，主要是错误修正</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 展示不同标准的特性差异</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span>    <span class="comment">// C99引入的布尔类型支持</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span>     <span class="comment">// C99引入的固定宽度整数类型</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// C99特性：变长数组（VLA）</span></span><br><span class="line">    <span class="type">int</span> n = <span class="number">5</span>;</span><br><span class="line">    <span class="type">int</span> <span class="built_in">array</span>[n];  <span class="comment">// 在C89中这是不允许的</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// C99特性：布尔类型</span></span><br><span class="line">    <span class="type">bool</span> is_valid = <span class="literal">true</span>;  <span class="comment">// C89中需要使用int来模拟布尔值</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// C99特性：固定宽度整数类型</span></span><br><span class="line">    <span class="type">int32_t</span> precise_int = <span class="number">42</span>;  <span class="comment">// 确保是32位整数</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// C99特性：内联变量声明</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;  <span class="comment">// C89要求在函数开头声明所有变量</span></span><br><span class="line">        <span class="built_in">array</span>[i] = i * i;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;array[%d] = %d\n&quot;</span>, i, <span class="built_in">array</span>[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;布尔值: %s\n&quot;</span>, is_valid ? <span class="string">&quot;true&quot;</span> : <span class="string">&quot;false&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;精确整数: %d\n&quot;</span>, precise_int);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-现代C语言的特点"><a href="#2-现代C语言的特点" class="headerlink" title="2. 现代C语言的特点"></a>2. 现代C语言的特点</h3><p><strong>C99标准的重要改进：</strong></p>
<ul>
<li><strong>变长数组（VLA）</strong>：支持运行时确定大小的数组</li>
<li><strong>内联函数</strong>：提高函数调用效率</li>
<li><strong>复数类型</strong>：支持复数运算</li>
<li><strong>布尔类型</strong>：原生支持true&#x2F;false</li>
<li><strong>单行注释</strong>：支持&#x2F;&#x2F;风格注释</li>
</ul>
<p><strong>C11标准的新特性：</strong></p>
<ul>
<li><strong>多线程支持</strong>：标准化的线程库</li>
<li><strong>原子操作</strong>：支持无锁编程</li>
<li><strong>静态断言</strong>：编译时检查</li>
<li><strong>匿名结构体和联合体</strong>：更灵活的数据组织</li>
</ul>
<h2 id="（二）选择合适的C标准"><a href="#（二）选择合适的C标准" class="headerlink" title="（二）选择合适的C标准"></a>（二）选择合适的C标准</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 编译器特性检测示例</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 检查C标准版本</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;C标准版本检测:\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __STDC_VERSION__</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;__STDC_VERSION__ = %ld\n&quot;</span>, __STDC_VERSION__);</span><br><span class="line">    </span><br><span class="line">    <span class="meta">#<span class="keyword">if</span> __STDC_VERSION__ &gt;= 201112L</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;支持C11标准\n&quot;</span>);</span><br><span class="line">    <span class="meta">#<span class="keyword">elif</span> __STDC_VERSION__ &gt;= 199901L</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;支持C99标准\n&quot;</span>);</span><br><span class="line">    <span class="meta">#<span class="keyword">elif</span> __STDC_VERSION__ &gt;= 199409L</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;支持C94标准\n&quot;</span>);</span><br><span class="line">    <span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;支持C89/C90标准\n&quot;</span>);</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;编译器可能不完全支持标准C\n&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查编译器特定特性</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __GNUC__</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;使用GCC编译器，版本: %d.%d.%d\n&quot;</span>, </span><br><span class="line">           __GNUC__, __GNUC_MINOR__, __GNUC_PATCHLEVEL__);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _MSC_VER</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;使用Microsoft Visual C++编译器\n&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="二、开发环境搭建"><a href="#二、开发环境搭建" class="headerlink" title="二、开发环境搭建"></a>二、开发环境搭建</h1><h2 id="（一）多平台开发环境选择"><a href="#（一）多平台开发环境选择" class="headerlink" title="（一）多平台开发环境选择"></a>（一）多平台开发环境选择</h2><h3 id="1-Windows平台推荐方案"><a href="#1-Windows平台推荐方案" class="headerlink" title="1. Windows平台推荐方案"></a>1. Windows平台推荐方案</h3><p><strong>方案一：Visual Studio Code + MinGW-w64（推荐初学者）</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装步骤（使用包管理器）</span></span><br><span class="line"><span class="comment"># 1. 安装Chocolatey包管理器（以管理员身份运行PowerShell）</span></span><br><span class="line">Set-ExecutionPolicy Bypass -Scope Process -Force</span><br><span class="line">[System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072</span><br><span class="line">iex ((New-Object System.Net.WebClient).DownloadString(&#x27;https://chocolatey.org/install.ps1&#x27;))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 安装开发工具</span></span><br><span class="line">choco install mingw -y          <span class="comment"># 安装MinGW-w64编译器</span></span><br><span class="line">choco install vscode -y         <span class="comment"># 安装VS Code</span></span><br><span class="line">choco install git -y            <span class="comment"># 安装Git版本控制</span></span><br></pre></td></tr></table></figure>

<p><strong>VS Code配置文件示例：</strong></p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .vscode/tasks.json - 编译任务配置</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tasks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shell&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gcc&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;-std=c11&quot;</span><span class="punctuation">,</span>           <span class="comment">// 使用C11标准</span></span><br><span class="line">                <span class="string">&quot;-Wall&quot;</span><span class="punctuation">,</span>              <span class="comment">// 启用所有警告</span></span><br><span class="line">                <span class="string">&quot;-Wextra&quot;</span><span class="punctuation">,</span>            <span class="comment">// 启用额外警告</span></span><br><span class="line">                <span class="string">&quot;-g&quot;</span><span class="punctuation">,</span>                 <span class="comment">// 生成调试信息</span></span><br><span class="line">                <span class="string">&quot;$&#123;file&#125;&quot;</span><span class="punctuation">,</span>            <span class="comment">// 当前文件</span></span><br><span class="line">                <span class="string">&quot;-o&quot;</span><span class="punctuation">,</span>                 <span class="comment">// 输出文件</span></span><br><span class="line">                <span class="string">&quot;$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;kind&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;isDefault&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;presentation&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;echo&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;reveal&quot;</span><span class="punctuation">:</span> <span class="string">&quot;always&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;focus&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;panel&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shared&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>方案二：Dev-C++（简单易用）</strong></p>
<p>Dev-C++是一个轻量级的C&#x2F;C++集成开发环境，特别适合初学者：</p>
<ol>
<li>下载地址：<a href="https://sourceforge.net/projects/orwelldevcpp/">https://sourceforge.net/projects/orwelldevcpp/</a></li>
<li>安装后即可使用，无需额外配置</li>
<li>内置GCC编译器和调试器</li>
<li>界面简洁，功能完整</li>
</ol>
<h3 id="2-Linux平台配置"><a href="#2-Linux平台配置" class="headerlink" title="2. Linux平台配置"></a>2. Linux平台配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Ubuntu/Debian系统</span></span><br><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install build-essential  <span class="comment"># 安装GCC工具链</span></span><br><span class="line"><span class="built_in">sudo</span> apt install gdb             <span class="comment"># 安装调试器</span></span><br><span class="line"><span class="built_in">sudo</span> apt install valgrind        <span class="comment"># 安装内存检查工具</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># CentOS/RHEL系统</span></span><br><span class="line"><span class="built_in">sudo</span> yum groupinstall <span class="string">&quot;Development Tools&quot;</span></span><br><span class="line"><span class="built_in">sudo</span> yum install gdb valgrind</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证安装</span></span><br><span class="line">gcc --version    <span class="comment"># 检查GCC版本</span></span><br><span class="line">gdb --version    <span class="comment"># 检查GDB版本</span></span><br></pre></td></tr></table></figure>

<h3 id="3-macOS平台配置"><a href="#3-macOS平台配置" class="headerlink" title="3. macOS平台配置"></a>3. macOS平台配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装Xcode命令行工具</span></span><br><span class="line">xcode-select --install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或使用Homebrew安装</span></span><br><span class="line">brew install gcc</span><br><span class="line">brew install gdb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证安装</span></span><br><span class="line">gcc --version</span><br></pre></td></tr></table></figure>

<h2 id="（二）第一个C程序"><a href="#（二）第一个C程序" class="headerlink" title="（二）第一个C程序"></a>（二）第一个C程序</h2><h3 id="1-Hello-World程序详解"><a href="#1-Hello-World程序详解" class="headerlink" title="1. Hello World程序详解"></a>1. Hello World程序详解</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hello_world.c - 详细注释版本</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>    <span class="comment">// 预处理指令：包含标准输入输出库</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * main函数：程序的入口点</span></span><br><span class="line"><span class="comment"> * 返回值：int类型，0表示程序正常结束，非0表示异常</span></span><br><span class="line"><span class="comment"> * 参数：暂时不使用参数，写成void或空括号</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// printf函数：格式化输出函数，定义在stdio.h中</span></span><br><span class="line">    <span class="comment">// \n：换行符，让输出后光标移到下一行</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello, World!\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// return语句：返回值给操作系统</span></span><br><span class="line">    <span class="comment">// 0：表示程序成功执行完毕</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-编译和运行过程详解"><a href="#2-编译和运行过程详解" class="headerlink" title="2. 编译和运行过程详解"></a>2. 编译和运行过程详解</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编译过程的四个阶段</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 预处理（Preprocessing）</span></span><br><span class="line">gcc -E hello_world.c -o hello_world.i</span><br><span class="line"><span class="comment"># 处理#include、#define等预处理指令</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 编译（Compilation）</span></span><br><span class="line">gcc -S hello_world.i -o hello_world.s</span><br><span class="line"><span class="comment"># 将预处理后的代码转换为汇编代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 汇编（Assembly）</span></span><br><span class="line">gcc -c hello_world.s -o hello_world.o</span><br><span class="line"><span class="comment"># 将汇编代码转换为机器码（目标文件）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 链接（Linking）</span></span><br><span class="line">gcc hello_world.o -o hello_world</span><br><span class="line"><span class="comment"># 将目标文件与库文件链接生成可执行文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 一步完成编译（常用方式）</span></span><br><span class="line">gcc -std=c11 -Wall -Wextra -g hello_world.c -o hello_world</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行程序</span></span><br><span class="line">./hello_world    <span class="comment"># Linux/macOS</span></span><br><span class="line">hello_world.exe  <span class="comment"># Windows</span></span><br></pre></td></tr></table></figure>

<h3 id="3-编译选项详解"><a href="#3-编译选项详解" class="headerlink" title="3. 编译选项详解"></a>3. 编译选项详解</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 常用编译选项</span></span><br><span class="line">gcc -std=c11      <span class="comment"># 指定C标准版本</span></span><br><span class="line">    -Wall         <span class="comment"># 启用常见警告</span></span><br><span class="line">    -Wextra       <span class="comment"># 启用额外警告</span></span><br><span class="line">    -Werror       <span class="comment"># 将警告视为错误</span></span><br><span class="line">    -g            <span class="comment"># 生成调试信息</span></span><br><span class="line">    -O2           <span class="comment"># 启用优化（发布版本）</span></span><br><span class="line">    -DDEBUG       <span class="comment"># 定义宏DEBUG</span></span><br><span class="line">    -I./include   <span class="comment"># 指定头文件搜索路径</span></span><br><span class="line">    -L./lib       <span class="comment"># 指定库文件搜索路径</span></span><br><span class="line">    -lm           <span class="comment"># 链接数学库</span></span><br><span class="line">    hello_world.c <span class="comment"># 源文件</span></span><br><span class="line">    -o hello_world <span class="comment"># 输出文件名</span></span><br></pre></td></tr></table></figure>

<h1 id="三、C语言基础语法"><a href="#三、C语言基础语法" class="headerlink" title="三、C语言基础语法"></a>三、C语言基础语法</h1><h2 id="（一）数据类型系统"><a href="#（一）数据类型系统" class="headerlink" title="（一）数据类型系统"></a>（一）数据类型系统</h2><h3 id="1-基本数据类型详解"><a href="#1-基本数据类型详解" class="headerlink" title="1. 基本数据类型详解"></a>1. 基本数据类型详解</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span>   <span class="comment">// C99标准：固定宽度整数类型</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits.h&gt;</span>   <span class="comment">// 数据类型的取值范围</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;float.h&gt;</span>    <span class="comment">// 浮点数的精度信息</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;=== C语言数据类型详解 ===\n\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 整数类型</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;整数类型:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;char:      %zu字节, 范围: %d 到 %d\n&quot;</span>, </span><br><span class="line">           <span class="keyword">sizeof</span>(<span class="type">char</span>), CHAR_MIN, CHAR_MAX);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;short:     %zu字节, 范围: %d 到 %d\n&quot;</span>, </span><br><span class="line">           <span class="keyword">sizeof</span>(<span class="type">short</span>), SHRT_MIN, SHRT_MAX);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;int:       %zu字节, 范围: %d 到 %d\n&quot;</span>, </span><br><span class="line">           <span class="keyword">sizeof</span>(<span class="type">int</span>), INT_MIN, INT_MAX);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;long:      %zu字节, 范围: %ld 到 %ld\n&quot;</span>, </span><br><span class="line">           <span class="keyword">sizeof</span>(<span class="type">long</span>), LONG_MIN, LONG_MAX);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;long long: %zu字节, 范围: %lld 到 %lld\n&quot;</span>, </span><br><span class="line">           <span class="keyword">sizeof</span>(<span class="type">long</span> <span class="type">long</span>), LLONG_MIN, LLONG_MAX);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 无符号整数类型</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n无符号整数类型:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;unsigned char:      %zu字节, 最大值: %u\n&quot;</span>, </span><br><span class="line">           <span class="keyword">sizeof</span>(<span class="type">unsigned</span> <span class="type">char</span>), UCHAR_MAX);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;unsigned short:     %zu字节, 最大值: %u\n&quot;</span>, </span><br><span class="line">           <span class="keyword">sizeof</span>(<span class="type">unsigned</span> <span class="type">short</span>), USHRT_MAX);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;unsigned int:       %zu字节, 最大值: %u\n&quot;</span>, </span><br><span class="line">           <span class="keyword">sizeof</span>(<span class="type">unsigned</span> <span class="type">int</span>), UINT_MAX);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;unsigned long:      %zu字节, 最大值: %lu\n&quot;</span>, </span><br><span class="line">           <span class="keyword">sizeof</span>(<span class="type">unsigned</span> <span class="type">long</span>), ULONG_MAX);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;unsigned long long: %zu字节, 最大值: %llu\n&quot;</span>, </span><br><span class="line">           <span class="keyword">sizeof</span>(<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>), ULLONG_MAX);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 浮点数类型</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n浮点数类型:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;float:       %zu字节, 精度: %d位, 范围: %e 到 %e\n&quot;</span>, </span><br><span class="line">           <span class="keyword">sizeof</span>(<span class="type">float</span>), FLT_DIG, FLT_MIN, FLT_MAX);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;double:      %zu字节, 精度: %d位, 范围: %e 到 %e\n&quot;</span>, </span><br><span class="line">           <span class="keyword">sizeof</span>(<span class="type">double</span>), DBL_DIG, DBL_MIN, DBL_MAX);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;long double: %zu字节, 精度: %d位, 范围: %Le 到 %Le\n&quot;</span>, </span><br><span class="line">           <span class="keyword">sizeof</span>(<span class="type">long</span> <span class="type">double</span>), LDBL_DIG, LDBL_MIN, LDBL_MAX);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// C99固定宽度整数类型（推荐使用）</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nC99固定宽度整数类型:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;int8_t:   %zu字节\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">int8_t</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;int16_t:  %zu字节\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">int16_t</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;int32_t:  %zu字节\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">int32_t</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;int64_t:  %zu字节\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">int64_t</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-变量声明和初始化"><a href="#2-变量声明和初始化" class="headerlink" title="2. 变量声明和初始化"></a>2. 变量声明和初始化</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span>  <span class="comment">// C99布尔类型支持</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 基本变量声明和初始化</span></span><br><span class="line">    <span class="type">int</span> age = <span class="number">25</span>;                    <span class="comment">// 整数变量</span></span><br><span class="line">    <span class="type">float</span> height = <span class="number">175.5f</span>;           <span class="comment">// 单精度浮点数（注意f后缀）</span></span><br><span class="line">    <span class="type">double</span> weight = <span class="number">68.5</span>;            <span class="comment">// 双精度浮点数</span></span><br><span class="line">    <span class="type">char</span> grade = <span class="string">&#x27;A&#x27;</span>;                <span class="comment">// 字符变量</span></span><br><span class="line">    <span class="type">bool</span> is_student = <span class="literal">true</span>;          <span class="comment">// C99布尔类型</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 常量声明（C99特性）</span></span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> MAX_STUDENTS = <span class="number">100</span>;    <span class="comment">// 编译时常量</span></span><br><span class="line">    <span class="type">const</span> <span class="type">double</span> PI = <span class="number">3.14159265359</span>; <span class="comment">// 数学常量</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 变量命名规范示例</span></span><br><span class="line">    <span class="type">int</span> student_count;               <span class="comment">// 下划线命名法（推荐）</span></span><br><span class="line">    <span class="type">int</span> studentCount;                <span class="comment">// 驼峰命名法</span></span><br><span class="line">    <span class="type">int</span> BUFFER_SIZE = <span class="number">1024</span>;          <span class="comment">// 常量使用大写</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 多变量声明</span></span><br><span class="line">    <span class="type">int</span> x = <span class="number">10</span>, y = <span class="number">20</span>, z = <span class="number">30</span>;      <span class="comment">// 同时声明多个变量</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 输出变量值</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;个人信息:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;年龄: %d岁\n&quot;</span>, age);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;身高: %.1f厘米\n&quot;</span>, height);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;体重: %.1f公斤\n&quot;</span>, weight);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;等级: %c\n&quot;</span>, grade);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;是否为学生: %s\n&quot;</span>, is_student ? <span class="string">&quot;是&quot;</span> : <span class="string">&quot;否&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n常量信息:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;最大学生数: %d\n&quot;</span>, MAX_STUDENTS);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;圆周率: %.10f\n&quot;</span>, PI);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="（二）运算符和表达式"><a href="#（二）运算符和表达式" class="headerlink" title="（二）运算符和表达式"></a>（二）运算符和表达式</h2><h3 id="1-算术运算符详解"><a href="#1-算术运算符详解" class="headerlink" title="1. 算术运算符详解"></a>1. 算术运算符详解</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span>  <span class="comment">// 数学函数库</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">17</span>, b = <span class="number">5</span>;</span><br><span class="line">    <span class="type">double</span> x = <span class="number">17.0</span>, y = <span class="number">5.0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;=== 算术运算符演示 ===\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;整数运算 (a=%d, b=%d):\n&quot;</span>, a, b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a + b = %d\n&quot;</span>, a + b);      <span class="comment">// 加法</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a - b = %d\n&quot;</span>, a - b);      <span class="comment">// 减法</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a * b = %d\n&quot;</span>, a * b);      <span class="comment">// 乘法</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a / b = %d\n&quot;</span>, a / b);      <span class="comment">// 整数除法（截断）</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a %% b = %d\n&quot;</span>, a % b);     <span class="comment">// 取模运算</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n浮点数运算 (x=%.1f, y=%.1f):\n&quot;</span>, x, y);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;x + y = %.2f\n&quot;</span>, x + y);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;x - y = %.2f\n&quot;</span>, x - y);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;x * y = %.2f\n&quot;</span>, x * y);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;x / y = %.2f\n&quot;</span>, x / y);    <span class="comment">// 浮点数除法</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 数学函数示例</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n数学函数:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sqrt(%.1f) = %.2f\n&quot;</span>, x, <span class="built_in">sqrt</span>(x));      <span class="comment">// 平方根</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;pow(%.1f, %.1f) = %.2f\n&quot;</span>, x, y, <span class="built_in">pow</span>(x, y)); <span class="comment">// 幂运算</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sin(%.1f) = %.2f\n&quot;</span>, x, <span class="built_in">sin</span>(x));        <span class="comment">// 正弦函数</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;log(%.1f) = %.2f\n&quot;</span>, x, <span class="built_in">log</span>(x));        <span class="comment">// 自然对数</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 运算符优先级演示</span></span><br><span class="line">    <span class="type">int</span> result = a + b * <span class="number">2</span> - <span class="number">3</span>;  <span class="comment">// 乘法优先于加减法</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n运算符优先级:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d + %d * 2 - 3 = %d\n&quot;</span>, a, b, result);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;等价于: %d + (%d * 2) - 3 = %d\n&quot;</span>, a, b, a + (b * <span class="number">2</span>) - <span class="number">3</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="note warning flat"><p><strong>编译提示</strong>：使用数学函数时，在Linux&#x2F;macOS下编译需要链接数学库：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -std=c11 -Wall -lm program.c -o program</span><br></pre></td></tr></table></figure></div>

<h1 id="四、程序控制结构"><a href="#四、程序控制结构" class="headerlink" title="四、程序控制结构"></a>四、程序控制结构</h1><h2 id="（一）条件语句"><a href="#（一）条件语句" class="headerlink" title="（一）条件语句"></a>（一）条件语句</h2><h3 id="1-if语句的各种形式"><a href="#1-if语句的各种形式" class="headerlink" title="1. if语句的各种形式"></a>1. if语句的各种形式</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数声明：判断年份是否为闰年</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">is_leap_year</span><span class="params">(<span class="type">int</span> year)</span>;</span><br><span class="line"><span class="type">char</span> <span class="title function_">get_grade</span><span class="params">(<span class="type">int</span> score)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="type">int</span> score, year;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取用户输入</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入考试分数 (0-100): &quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;score);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 基本if-else语句</span></span><br><span class="line">    <span class="keyword">if</span> (score &gt;= <span class="number">0</span> &amp;&amp; score &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;分数有效\n&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 嵌套if-else语句</span></span><br><span class="line">        <span class="keyword">if</span> (score &gt;= <span class="number">90</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;优秀！\n&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">80</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;良好\n&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">70</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;中等\n&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;及格\n&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;不及格\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 使用函数简化逻辑</span></span><br><span class="line">        <span class="type">char</span> grade = get_grade(score);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;等级: %c\n&quot;</span>, grade);</span><br><span class="line">        </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;分数无效！请输入0-100之间的数字。\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;  <span class="comment">// 异常退出</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// switch语句示例</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n请输入年份: &quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;year);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (is_leap_year(year)) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d年是闰年\n&quot;</span>, year);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d年不是闰年\n&quot;</span>, year);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 三元运算符（条件运算符）</span></span><br><span class="line">    <span class="type">int</span> max_score = (score &gt; <span class="number">95</span>) ? score : <span class="number">95</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;调整后的最高分: %d\n&quot;</span>, max_score);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断闰年的函数实现</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">is_leap_year</span><span class="params">(<span class="type">int</span> year)</span> &#123;</span><br><span class="line">    <span class="comment">// 闰年规则：能被4整除但不能被100整除，或者能被400整除</span></span><br><span class="line">    <span class="keyword">return</span> (year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span>) || (year % <span class="number">400</span> == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据分数返回等级的函数</span></span><br><span class="line"><span class="type">char</span> <span class="title function_">get_grade</span><span class="params">(<span class="type">int</span> score)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (score &gt;= <span class="number">90</span>) <span class="keyword">return</span> <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">80</span>) <span class="keyword">return</span> <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">70</span>) <span class="keyword">return</span> <span class="string">&#x27;C&#x27;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">60</span>) <span class="keyword">return</span> <span class="string">&#x27;D&#x27;</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="string">&#x27;F&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="（二）循环语句"><a href="#（二）循环语句" class="headerlink" title="（二）循环语句"></a>（二）循环语句</h2><h3 id="1-三种循环的对比和应用"><a href="#1-三种循环的对比和应用" class="headerlink" title="1. 三种循环的对比和应用"></a>1. 三种循环的对比和应用</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 初始化随机数生成器</span></span><br><span class="line">    srand((<span class="type">unsigned</span> <span class="type">int</span>)time(<span class="literal">NULL</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;=== 循环语句演示 ===\n\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// for循环：适用于已知循环次数的情况</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;1. for循环 - 打印乘法表:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d×%d=%2d  &quot;</span>, j, i, i * j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// while循环：适用于根据条件判断的情况</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n2. while循环 - 计算斐波那契数列:\n&quot;</span>);</span><br><span class="line">    <span class="type">int</span> fib1 = <span class="number">0</span>, fib2 = <span class="number">1</span>, next;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;斐波那契数列的前10项: &quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (count &lt; <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, fib1);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (count == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, fib2);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            next = fib1 + fib2;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, next);</span><br><span class="line">            fib1 = fib2;</span><br><span class="line">            fib2 = next;</span><br><span class="line">        &#125;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// do-while循环：至少执行一次的情况</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n3. do-while循环 - 猜数字游戏:\n&quot;</span>);</span><br><span class="line">    <span class="type">int</span> secret = rand() % <span class="number">100</span> + <span class="number">1</span>;  <span class="comment">// 1-100之间的随机数</span></span><br><span class="line">    <span class="type">int</span> guess, attempts = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;我想了一个1-100之间的数字，你来猜猜看！\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请输入你的猜测: &quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;guess);</span><br><span class="line">        attempts++;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (guess &gt; secret) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;太大了！\n&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (guess &lt; secret) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;太小了！\n&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;恭喜你！猜对了！\n&quot;</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;你用了 %d 次尝试。\n&quot;</span>, attempts);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (guess != secret &amp;&amp; attempts &lt; <span class="number">7</span>);  <span class="comment">// 最多7次机会</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (guess != secret) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;很遗憾，机会用完了！答案是 %d\n&quot;</span>, secret);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 循环控制语句：break和continue</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n4. 循环控制 - 寻找质数:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;100以内的质数: &quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num = <span class="number">2</span>; num &lt;= <span class="number">100</span>; num++) &#123;</span><br><span class="line">        <span class="type">bool</span> is_prime = <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 检查是否为质数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i * i &lt;= num; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (num % i == <span class="number">0</span>) &#123;</span><br><span class="line">                is_prime = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;  <span class="comment">// 找到因子，跳出内层循环</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (is_prime) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="五、调试技巧和错误处理"><a href="#五、调试技巧和错误处理" class="headerlink" title="五、调试技巧和错误处理"></a>五、调试技巧和错误处理</h1><h2 id="（一）常见编译错误"><a href="#（一）常见编译错误" class="headerlink" title="（一）常见编译错误"></a>（一）常见编译错误</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 常见错误示例和修正方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误1：语法错误</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">int main() &#123;</span></span><br><span class="line"><span class="comment">    printf(&quot;Hello World&quot;)  // 缺少分号</span></span><br><span class="line"><span class="comment">    return 0</span></span><br><span class="line"><span class="comment">&#125;  // 缺少分号</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确写法：</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello World\n&quot;</span>);  <span class="comment">// 添加分号和换行符</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;                 <span class="comment">// 添加分号</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误2：未声明的变量</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">int main() &#123;</span></span><br><span class="line"><span class="comment">    printf(&quot;%d\n&quot;, x);  // x未声明</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确写法：</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">42</span>;           <span class="comment">// 先声明并初始化</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, x);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误3：类型不匹配</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">int main() &#123;</span></span><br><span class="line"><span class="comment">    int x = 3.14;         // 将浮点数赋给整数</span></span><br><span class="line"><span class="comment">    printf(&quot;%f\n&quot;, x);    // 格式说明符不匹配</span></span><br><span class="line"><span class="comment">    return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确写法：</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="type">double</span> x = <span class="number">3.14</span>;      <span class="comment">// 使用正确的类型</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.2f\n&quot;</span>, x);  <span class="comment">// 使用正确的格式说明符</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="（二）调试技巧"><a href="#（二）调试技巧" class="headerlink" title="（二）调试技巧"></a>（二）调试技巧</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span>  <span class="comment">// 断言库</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调试宏定义</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> DEBUG</span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> DBG_PRINT(fmt, ...) \</span></span><br><span class="line"><span class="meta">        printf(<span class="string">&quot;[DEBUG] %s:%d: &quot;</span> fmt, __FILE__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> DBG_PRINT(fmt, ...)  <span class="comment">// 发布版本中不输出调试信息</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例函数：计算阶乘</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> <span class="title function_">factorial</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="comment">// 使用断言检查输入参数</span></span><br><span class="line">    assert(n &gt;= <span class="number">0</span>);  <span class="comment">// 确保输入非负</span></span><br><span class="line">    </span><br><span class="line">    DBG_PRINT(<span class="string">&quot;计算 %d 的阶乘\n&quot;</span>, n);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span> || n == <span class="number">1</span>) &#123;</span><br><span class="line">        DBG_PRINT(<span class="string">&quot;基础情况: %d! = 1\n&quot;</span>, n);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> result = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        result *= i;</span><br><span class="line">        DBG_PRINT(<span class="string">&quot;步骤 %d: result = %lld\n&quot;</span>, i, result);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;=== 调试技巧演示 ===\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 正常情况测试</span></span><br><span class="line">    <span class="type">int</span> n = <span class="number">5</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> result = factorial(n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d! = %lld\n&quot;</span>, n, result);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 边界情况测试</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;0! = %lld\n&quot;</span>, factorial(<span class="number">0</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;1! = %lld\n&quot;</span>, factorial(<span class="number">1</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 错误情况测试（会触发断言）</span></span><br><span class="line">    <span class="comment">// factorial(-1);  // 取消注释会导致程序终止</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="note info flat"><p><strong>编译调试版本</strong>：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编译调试版本（包含调试信息）</span></span><br><span class="line">gcc -std=c11 -Wall -Wextra -g -DDEBUG program.c -o program_debug</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译发布版本（优化，无调试信息）</span></span><br><span class="line">gcc -std=c11 -Wall -Wextra -O2 program.c -o program_release</span><br></pre></td></tr></table></figure></div>

<h1 id="六、学习路线图"><a href="#六、学习路线图" class="headerlink" title="六、学习路线图"></a>六、学习路线图</h1><h2 id="（一）后续学习计划"><a href="#（一）后续学习计划" class="headerlink" title="（一）后续学习计划"></a>（一）后续学习计划</h2><pre class="mermaid">graph TD
    A[第1篇: C语言完全入门指南] --> B[第2篇: 函数与模块化编程]
    B --> C[第3篇: 数组与字符串深度解析]
    C --> D[第4篇: 指针与内存管理]
    D --> E[第5篇: 结构体与联合体]
    E --> F[第6篇: 文件操作与数据持久化]
    F --> G[第7篇: 高级特性与现代编程]
    G --> H[第8篇: 项目实战]
    
    style A fill:#e1f5fe
    style B fill:#f3e5f5
    style C fill:#e8f5e8
    style D fill:#fff3e0
    style E fill:#fce4ec
    style F fill:#f1f8e9
    style G fill:#e0f2f1
    style H fill:#fff8e1</pre>

<h2 id="（二）实践建议"><a href="#（二）实践建议" class="headerlink" title="（二）实践建议"></a>（二）实践建议</h2><p><strong>每日练习计划：</strong></p>
<ol>
<li><strong>第1-3天</strong>：熟练掌握基本语法和数据类型</li>
<li><strong>第4-7天</strong>：练习条件语句和循环语句</li>
<li><strong>第8-14天</strong>：编写小程序，如计算器、猜数字游戏等</li>
<li><strong>第15-21天</strong>：准备学习下一篇文章内容</li>
</ol>
<p><strong>推荐练习项目：</strong></p>
<ul>
<li>简单计算器</li>
<li>温度转换程序</li>
<li>成绩管理系统（基础版）</li>
<li>数字游戏集合</li>
</ul>
<a class="btn-beautify blue" href="#" title="下一篇：函数与模块化编程"><i class="far fa-hand-point-right"></i><span>下一篇：函数与模块化编程</span></a>

<hr>
<p><strong>参考资料：</strong></p>
<ul>
<li>《C程序设计语言》（第2版）- Brian W. Kernighan &amp; Dennis M. Ritchie</li>
<li>《C Primer Plus》（第6版）- Stephen Prata</li>
<li>《现代C语言程序设计》- K. N. King</li>
<li>ISO&#x2F;IEC 9899:2018 - C语言国际标准</li>
<li>GCC官方文档：<a href="https://gcc.gnu.org/onlinedocs/">https://gcc.gnu.org/onlinedocs/</a></li>
<li>C语言参考手册：<a href="https://en.cppreference.com/w/c">https://en.cppreference.com/w/c</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<div class="note info flat"><p><strong>C语言系统学习系列 - 第1篇</strong><br>本系列将带你从零开始，系统掌握C语言编程的各个方面，从基础语法到高级特性，从简单程序到复杂项目。</p>
</div>

<h1 id="前言">]]>
    </summary>
    
      <category term="C语言" scheme="https://uwakeme.tech/tags/C%E8%AF%AD%E8%A8%80/"/>
    
      <category term="编程入门" scheme="https://uwakeme.tech/tags/%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/"/>
    
      <category term="基础语法" scheme="https://uwakeme.tech/tags/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    
      <category term="环境搭建" scheme="https://uwakeme.tech/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
      <category term="现代C语言" scheme="https://uwakeme.tech/tags/%E7%8E%B0%E4%BB%A3C%E8%AF%AD%E8%A8%80/"/>
    
      <category term="学习" scheme="https://uwakeme.tech/categories/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[【前端】JavaScript节流与防抖详解：性能优化的核心技术]]></title>
    <link href="https://uwakeme.tech/2025/08/06/%E5%89%8D%E7%AB%AF/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91JavaScript%E8%8A%82%E6%B5%81%E4%B8%8E%E9%98%B2%E6%8A%96%E8%AF%A6%E8%A7%A3%EF%BC%9A%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%9A%84%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/"/>
    <id>https://uwakeme.tech/2025/08/06/前端/【前端】JavaScript节流与防抖详解：性能优化的核心技术/</id>
    <published>2025-08-05T16:00:00.000Z</published>
    <updated>2025-08-06T06:36:38.268Z</updated>
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在前端开发中，我们经常遇到需要处理高频事件的场景，比如用户快速点击按钮、滚动页面、调整窗口大小、输入搜索关键词等。如果不加以控制，这些高频事件会导致函数被频繁调用，造成性能问题，甚至可能导致页面卡顿或浏览器崩溃。</p>
<p>节流（Throttle）和防抖（Debounce）是两种重要的性能优化技术，它们通过控制函数的执行频率来解决高频事件带来的性能问题。虽然这两种技术都能限制函数的执行次数，但它们的实现原理和适用场景有所不同。</p>
<p>本文将详细介绍节流和防抖的概念、实现原理、使用场景，并提供完整的代码示例和最佳实践。</p>
<h1 id="一、防抖（Debounce）详解"><a href="#一、防抖（Debounce）详解" class="headerlink" title="一、防抖（Debounce）详解"></a>一、防抖（Debounce）详解</h1><h2 id="（一）什么是防抖"><a href="#（一）什么是防抖" class="headerlink" title="（一）什么是防抖"></a>（一）什么是防抖</h2><p>防抖是指在事件被触发n秒后再执行回调函数，如果在这n秒内又被触发，则重新计时。简单来说，防抖就是”等你不触发了，我再执行”。</p>
<p><strong>生活中的比喻：</strong> 就像电梯等人一样，如果有人进电梯，电梯会等待几秒钟，如果在等待期间又有人进来，就重新开始等待，直到没有人进来了才关门启动。</p>
<h2 id="（二）防抖的实现原理"><a href="#（二）防抖的实现原理" class="headerlink" title="（二）防抖的实现原理"></a>（二）防抖的实现原理</h2><p>防抖的核心思想是使用定时器延迟执行函数，如果在延迟期间再次触发事件，就清除之前的定时器并重新设置。</p>
<h3 id="基础版防抖实现"><a href="#基础版防抖实现" class="headerlink" title="基础版防抖实现"></a>基础版防抖实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 防抖函数 - 基础版</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Function</span>&#125; func 需要防抖的函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; delay 延迟时间（毫秒）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">Function</span>&#125; 防抖后的函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">func, delay</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> timeoutId; <span class="comment">// 存储定时器ID</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">        <span class="comment">// 清除之前的定时器</span></span><br><span class="line">        <span class="built_in">clearTimeout</span>(timeoutId);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 设置新的定时器</span></span><br><span class="line">        timeoutId = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            func.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args); <span class="comment">// 保持this指向和参数传递</span></span><br><span class="line">        &#125;, delay);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">const</span> searchInput = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;search&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> handleSearch = <span class="title function_">debounce</span>(<span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;执行搜索:&#x27;</span>, event.<span class="property">target</span>.<span class="property">value</span>);</span><br><span class="line">    <span class="comment">// 这里可以发送AJAX请求</span></span><br><span class="line">&#125;, <span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">searchInput.<span class="title function_">addEventListener</span>(<span class="string">&#x27;input&#x27;</span>, handleSearch);</span><br></pre></td></tr></table></figure>

<h3 id="增强版防抖实现"><a href="#增强版防抖实现" class="headerlink" title="增强版防抖实现"></a>增强版防抖实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 防抖函数 - 增强版</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Function</span>&#125; func 需要防抖的函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; delay 延迟时间（毫秒）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; options 配置选项</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">boolean</span>&#125; options.immediate 是否立即执行（第一次触发时）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; options.maxWait 最大等待时间，超过此时间强制执行</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">Function</span>&#125; 防抖后的函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">func, delay, options = &#123;&#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> timeoutId;</span><br><span class="line">    <span class="keyword">let</span> lastCallTime;</span><br><span class="line">    <span class="keyword">let</span> lastInvokeTime = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> &#123; immediate = <span class="literal">false</span>, maxWait &#125; = options;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">invokeFunc</span>(<span class="params">time</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> args = lastArgs;</span><br><span class="line">        <span class="keyword">const</span> thisArg = lastThis;</span><br><span class="line">        </span><br><span class="line">        lastArgs = lastThis = <span class="literal">undefined</span>;</span><br><span class="line">        lastInvokeTime = time;</span><br><span class="line">        <span class="keyword">return</span> func.<span class="title function_">apply</span>(thisArg, args);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">shouldInvoke</span>(<span class="params">time</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> timeSinceLastCall = time - lastCallTime;</span><br><span class="line">        <span class="keyword">const</span> timeSinceLastInvoke = time - lastInvokeTime;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 首次调用或者超过延迟时间或者超过最大等待时间</span></span><br><span class="line">        <span class="keyword">return</span> (lastCallTime === <span class="literal">undefined</span> || </span><br><span class="line">                timeSinceLastCall &gt;= delay || </span><br><span class="line">                (maxWait &amp;&amp; timeSinceLastInvoke &gt;= maxWait));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> lastArgs, lastThis;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">debounced</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> time = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">        <span class="keyword">const</span> isInvoking = <span class="title function_">shouldInvoke</span>(time);</span><br><span class="line">        </span><br><span class="line">        lastArgs = args;</span><br><span class="line">        lastThis = <span class="variable language_">this</span>;</span><br><span class="line">        lastCallTime = time;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (isInvoking) &#123;</span><br><span class="line">            <span class="keyword">if</span> (timeoutId === <span class="literal">undefined</span>) &#123;</span><br><span class="line">                <span class="comment">// 立即执行模式</span></span><br><span class="line">                <span class="keyword">if</span> (immediate) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="title function_">invokeFunc</span>(time);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (maxWait) &#123;</span><br><span class="line">                <span class="comment">// 有最大等待时间的情况</span></span><br><span class="line">                timeoutId = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    timeoutId = <span class="literal">undefined</span>;</span><br><span class="line">                    <span class="keyword">if</span> (!immediate) &#123;</span><br><span class="line">                        <span class="title function_">invokeFunc</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, delay);</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> (immediate &amp;&amp; lastInvokeTime === <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="title function_">invokeFunc</span>(time);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (timeoutId === <span class="literal">undefined</span>) &#123;</span><br><span class="line">            timeoutId = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                timeoutId = <span class="literal">undefined</span>;</span><br><span class="line">                <span class="keyword">if</span> (!immediate) &#123;</span><br><span class="line">                    <span class="title function_">invokeFunc</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, delay);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (immediate &amp;&amp; lastInvokeTime === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">invokeFunc</span>(time);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 取消防抖</span></span><br><span class="line">    debounced.<span class="property">cancel</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (timeoutId !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">            <span class="built_in">clearTimeout</span>(timeoutId);</span><br><span class="line">        &#125;</span><br><span class="line">        lastInvokeTime = <span class="number">0</span>;</span><br><span class="line">        lastArgs = lastCallTime = lastThis = timeoutId = <span class="literal">undefined</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 立即执行</span></span><br><span class="line">    debounced.<span class="property">flush</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> timeoutId === <span class="literal">undefined</span> ? <span class="literal">undefined</span> : <span class="title function_">invokeFunc</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>());</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> debounced;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="（三）防抖的应用场景"><a href="#（三）防抖的应用场景" class="headerlink" title="（三）防抖的应用场景"></a>（三）防抖的应用场景</h2><h3 id="1-搜索框输入优化"><a href="#1-搜索框输入优化" class="headerlink" title="1. 搜索框输入优化"></a>1. 搜索框输入优化</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 搜索框防抖 - 避免每次输入都发送请求</span></span><br><span class="line"><span class="keyword">const</span> searchBox = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;searchBox&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> searchAPI = <span class="title function_">debounce</span>(<span class="keyword">async</span> <span class="keyword">function</span>(<span class="params">keyword</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!keyword.<span class="title function_">trim</span>()) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;发送搜索请求:&#x27;</span>, keyword);</span><br><span class="line">        <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">`/api/search?q=<span class="subst">$&#123;<span class="built_in">encodeURIComponent</span>(keyword)&#125;</span>`</span>);</span><br><span class="line">        <span class="keyword">const</span> results = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">        <span class="title function_">displaySearchResults</span>(results);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;搜索失败:&#x27;</span>, error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">searchBox.<span class="title function_">addEventListener</span>(<span class="string">&#x27;input&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="title function_">searchAPI</span>(e.<span class="property">target</span>.<span class="property">value</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">displaySearchResults</span>(<span class="params">results</span>) &#123;</span><br><span class="line">    <span class="comment">// 显示搜索结果的逻辑</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;搜索结果:&#x27;</span>, results);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-表单验证优化"><a href="#2-表单验证优化" class="headerlink" title="2. 表单验证优化"></a>2. 表单验证优化</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 表单验证防抖 - 避免频繁验证</span></span><br><span class="line"><span class="keyword">const</span> emailInput = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;email&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> validateEmail = <span class="title function_">debounce</span>(<span class="keyword">function</span>(<span class="params">email</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> emailRegex = <span class="regexp">/^[^\s@]+@[^\s@]+\.[^\s@]+$/</span>;</span><br><span class="line">    <span class="keyword">const</span> isValid = emailRegex.<span class="title function_">test</span>(email);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> errorElement = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;email-error&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (isValid) &#123;</span><br><span class="line">        errorElement.<span class="property">textContent</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        emailInput.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">        emailInput.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;valid&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        errorElement.<span class="property">textContent</span> = <span class="string">&#x27;请输入有效的邮箱地址&#x27;</span>;</span><br><span class="line">        emailInput.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;valid&#x27;</span>);</span><br><span class="line">        emailInput.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">emailInput.<span class="title function_">addEventListener</span>(<span class="string">&#x27;input&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="title function_">validateEmail</span>(e.<span class="property">target</span>.<span class="property">value</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="3-按钮点击防抖"><a href="#3-按钮点击防抖" class="headerlink" title="3. 按钮点击防抖"></a>3. 按钮点击防抖</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 提交按钮防抖 - 防止重复提交</span></span><br><span class="line"><span class="keyword">const</span> submitButton = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;submitBtn&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> handleSubmit = <span class="title function_">debounce</span>(<span class="keyword">async</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    submitButton.<span class="property">disabled</span> = <span class="literal">true</span>;</span><br><span class="line">    submitButton.<span class="property">textContent</span> = <span class="string">&#x27;提交中...&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myForm&#x27;</span>));</span><br><span class="line">        <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;/api/submit&#x27;</span>, &#123;</span><br><span class="line">            <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">            <span class="attr">body</span>: formData</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (response.<span class="property">ok</span>) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&#x27;提交成功！&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&#x27;提交失败，请重试&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;提交错误:&#x27;</span>, error);</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;网络错误，请重试&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        submitButton.<span class="property">disabled</span> = <span class="literal">false</span>;</span><br><span class="line">        submitButton.<span class="property">textContent</span> = <span class="string">&#x27;提交&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="number">1000</span>, &#123; <span class="attr">immediate</span>: <span class="literal">true</span> &#125;); <span class="comment">// 立即执行，防止重复点击</span></span><br><span class="line"></span><br><span class="line">submitButton.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, handleSubmit);</span><br></pre></td></tr></table></figure>

<h1 id="二、节流（Throttle）详解"><a href="#二、节流（Throttle）详解" class="headerlink" title="二、节流（Throttle）详解"></a>二、节流（Throttle）详解</h1><h2 id="（一）什么是节流"><a href="#（一）什么是节流" class="headerlink" title="（一）什么是节流"></a>（一）什么是节流</h2><p>节流是指规定在一个单位时间内，只能触发一次函数。如果这个单位时间内触发多次函数，只有一次生效。简单来说，节流就是”我有自己的节奏，不管你触发多频繁”。</p>
<p><strong>生活中的比喻：</strong> 就像水龙头限流一样，不管你怎么拧，水流的速度都是固定的，每秒只能流出固定量的水。</p>
<h2 id="（二）节流的实现原理"><a href="#（二）节流的实现原理" class="headerlink" title="（二）节流的实现原理"></a>（二）节流的实现原理</h2><p>节流的核心思想是通过时间戳或定时器来控制函数的执行频率，确保在指定的时间间隔内最多只执行一次。</p>
<h3 id="时间戳版节流"><a href="#时间戳版节流" class="headerlink" title="时间戳版节流"></a>时间戳版节流</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 节流函数 - 时间戳版</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Function</span>&#125; func 需要节流的函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; delay 节流间隔时间（毫秒）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">Function</span>&#125; 节流后的函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">func, delay</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> lastExecTime = <span class="number">0</span>; <span class="comment">// 上次执行时间</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> currentTime = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果距离上次执行时间超过了延迟时间，则执行函数</span></span><br><span class="line">        <span class="keyword">if</span> (currentTime - lastExecTime &gt;= delay) &#123;</span><br><span class="line">            lastExecTime = currentTime;</span><br><span class="line">            <span class="keyword">return</span> func.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">const</span> handleScroll = <span class="title function_">throttle</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;页面滚动事件处理&#x27;</span>);</span><br><span class="line">    <span class="comment">// 处理滚动逻辑，比如懒加载、滚动动画等</span></span><br><span class="line">&#125;, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, handleScroll);</span><br></pre></td></tr></table></figure>

<h3 id="定时器版节流"><a href="#定时器版节流" class="headerlink" title="定时器版节流"></a>定时器版节流</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 节流函数 - 定时器版</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Function</span>&#125; func 需要节流的函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; delay 节流间隔时间（毫秒）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">Function</span>&#125; 节流后的函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">func, delay</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> timeoutId = <span class="literal">null</span>; <span class="comment">// 定时器ID</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果定时器不存在，说明可以执行</span></span><br><span class="line">        <span class="keyword">if</span> (!timeoutId) &#123;</span><br><span class="line">            timeoutId = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                func.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">                timeoutId = <span class="literal">null</span>; <span class="comment">// 执行完毕后清空定时器ID</span></span><br><span class="line">            &#125;, delay);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="完整版节流实现"><a href="#完整版节流实现" class="headerlink" title="完整版节流实现"></a>完整版节流实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 节流函数 - 完整版</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Function</span>&#125; func 需要节流的函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; delay 节流间隔时间（毫秒）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; options 配置选项</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">boolean</span>&#125; options.leading 是否在开始时执行</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">boolean</span>&#125; options.trailing 是否在结束时执行</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">Function</span>&#125; 节流后的函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">func, delay, options = &#123;&#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> timeoutId;</span><br><span class="line">    <span class="keyword">let</span> lastExecTime = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> &#123; leading = <span class="literal">true</span>, trailing = <span class="literal">true</span> &#125; = options;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">throttled</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> currentTime = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果不需要开始时执行，且是第一次调用，记录时间但不执行</span></span><br><span class="line">        <span class="keyword">if</span> (!leading &amp;&amp; lastExecTime === <span class="number">0</span>) &#123;</span><br><span class="line">            lastExecTime = currentTime;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 计算剩余等待时间</span></span><br><span class="line">        <span class="keyword">const</span> remainingTime = delay - (currentTime - lastExecTime);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (remainingTime &lt;= <span class="number">0</span> || remainingTime &gt; delay) &#123;</span><br><span class="line">            <span class="comment">// 可以立即执行</span></span><br><span class="line">            <span class="keyword">if</span> (timeoutId) &#123;</span><br><span class="line">                <span class="built_in">clearTimeout</span>(timeoutId);</span><br><span class="line">                timeoutId = <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            lastExecTime = currentTime;</span><br><span class="line">            <span class="keyword">return</span> func.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!timeoutId &amp;&amp; trailing) &#123;</span><br><span class="line">            <span class="comment">// 设置定时器，在剩余时间后执行</span></span><br><span class="line">            timeoutId = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                lastExecTime = leading ? <span class="title class_">Date</span>.<span class="title function_">now</span>() : <span class="number">0</span>;</span><br><span class="line">                timeoutId = <span class="literal">null</span>;</span><br><span class="line">                func.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">            &#125;, remainingTime);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 取消节流</span></span><br><span class="line">    throttled.<span class="property">cancel</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (timeoutId) &#123;</span><br><span class="line">            <span class="built_in">clearTimeout</span>(timeoutId);</span><br><span class="line">            timeoutId = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        lastExecTime = <span class="number">0</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> throttled;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="（三）节流的应用场景"><a href="#（三）节流的应用场景" class="headerlink" title="（三）节流的应用场景"></a>（三）节流的应用场景</h2><h3 id="1-滚动事件优化"><a href="#1-滚动事件优化" class="headerlink" title="1. 滚动事件优化"></a>1. 滚动事件优化</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 滚动事件节流 - 优化滚动性能</span></span><br><span class="line"><span class="keyword">const</span> handleScroll = <span class="title function_">throttle</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> scrollTop = <span class="variable language_">window</span>.<span class="property">pageYOffset</span> || <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span>;</span><br><span class="line">    <span class="keyword">const</span> windowHeight = <span class="variable language_">window</span>.<span class="property">innerHeight</span>;</span><br><span class="line">    <span class="keyword">const</span> documentHeight = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollHeight</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 计算滚动百分比</span></span><br><span class="line">    <span class="keyword">const</span> scrollPercent = (scrollTop / (documentHeight - windowHeight)) * <span class="number">100</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 更新进度条</span></span><br><span class="line">    <span class="keyword">const</span> progressBar = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;progress-bar&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (progressBar) &#123;</span><br><span class="line">        progressBar.<span class="property">style</span>.<span class="property">width</span> = scrollPercent + <span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 懒加载图片</span></span><br><span class="line">    <span class="title function_">lazyLoadImages</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 显示/隐藏回到顶部按钮</span></span><br><span class="line">    <span class="keyword">const</span> backToTopBtn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;back-to-top&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (backToTopBtn) &#123;</span><br><span class="line">        <span class="keyword">if</span> (scrollTop &gt; <span class="number">300</span>) &#123;</span><br><span class="line">            backToTopBtn.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            backToTopBtn.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="number">16</span>); <span class="comment">// 约60fps</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, handleScroll);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">lazyLoadImages</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> images = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;img[data-src]&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> imageObserver = <span class="keyword">new</span> <span class="title class_">IntersectionObserver</span>(<span class="function">(<span class="params">entries</span>) =&gt;</span> &#123;</span><br><span class="line">        entries.<span class="title function_">forEach</span>(<span class="function"><span class="params">entry</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (entry.<span class="property">isIntersecting</span>) &#123;</span><br><span class="line">                <span class="keyword">const</span> img = entry.<span class="property">target</span>;</span><br><span class="line">                img.<span class="property">src</span> = img.<span class="property">dataset</span>.<span class="property">src</span>;</span><br><span class="line">                img.<span class="title function_">removeAttribute</span>(<span class="string">&#x27;data-src&#x27;</span>);</span><br><span class="line">                imageObserver.<span class="title function_">unobserve</span>(img);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    images.<span class="title function_">forEach</span>(<span class="function"><span class="params">img</span> =&gt;</span> imageObserver.<span class="title function_">observe</span>(img));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-窗口大小调整优化"><a href="#2-窗口大小调整优化" class="headerlink" title="2. 窗口大小调整优化"></a>2. 窗口大小调整优化</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 窗口大小调整节流 - 优化响应式布局</span></span><br><span class="line"><span class="keyword">const</span> handleResize = <span class="title function_">throttle</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> width = <span class="variable language_">window</span>.<span class="property">innerWidth</span>;</span><br><span class="line">    <span class="keyword">const</span> height = <span class="variable language_">window</span>.<span class="property">innerHeight</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`窗口大小变化: <span class="subst">$&#123;width&#125;</span> x <span class="subst">$&#123;height&#125;</span>`</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 重新计算布局</span></span><br><span class="line">    <span class="title function_">recalculateLayout</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 更新图表大小（如果使用了图表库）</span></span><br><span class="line">    <span class="title function_">updateChartsSize</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 调整移动端适配</span></span><br><span class="line">    <span class="title function_">adjustMobileLayout</span>(width);</span><br><span class="line">&#125;, <span class="number">250</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, handleResize);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">recalculateLayout</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 重新计算网格布局、瀑布流等</span></span><br><span class="line">    <span class="keyword">const</span> container = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.masonry-container&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (container) &#123;</span><br><span class="line">        <span class="comment">// 重新排列瀑布流</span></span><br><span class="line">        <span class="title function_">rearrangeMasonry</span>(container);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">updateChartsSize</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 更新图表大小的逻辑</span></span><br><span class="line">    <span class="keyword">const</span> charts = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.chart-container&#x27;</span>);</span><br><span class="line">    charts.<span class="title function_">forEach</span>(<span class="function"><span class="params">chart</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 假设使用了某个图表库</span></span><br><span class="line">        <span class="keyword">if</span> (chart.<span class="property">chartInstance</span>) &#123;</span><br><span class="line">            chart.<span class="property">chartInstance</span>.<span class="title function_">resize</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">adjustMobileLayout</span>(<span class="params">width</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> body = <span class="variable language_">document</span>.<span class="property">body</span>;</span><br><span class="line">    <span class="keyword">if</span> (width &lt;= <span class="number">768</span>) &#123;</span><br><span class="line">        body.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;mobile-layout&#x27;</span>);</span><br><span class="line">        body.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;desktop-layout&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        body.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;desktop-layout&#x27;</span>);</span><br><span class="line">        body.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;mobile-layout&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-鼠标移动事件优化"><a href="#3-鼠标移动事件优化" class="headerlink" title="3. 鼠标移动事件优化"></a>3. 鼠标移动事件优化</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 鼠标移动节流 - 优化鼠标跟随效果</span></span><br><span class="line"><span class="keyword">const</span> cursor = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">cursor.<span class="property">className</span> = <span class="string">&#x27;custom-cursor&#x27;</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(cursor);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handleMouseMove = <span class="title function_">throttle</span>(<span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="comment">// 更新自定义鼠标位置</span></span><br><span class="line">    cursor.<span class="property">style</span>.<span class="property">left</span> = e.<span class="property">clientX</span> + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">    cursor.<span class="property">style</span>.<span class="property">top</span> = e.<span class="property">clientY</span> + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 鼠标悬停效果检测</span></span><br><span class="line">    <span class="keyword">const</span> hoveredElement = <span class="variable language_">document</span>.<span class="title function_">elementFromPoint</span>(e.<span class="property">clientX</span>, e.<span class="property">clientY</span>);</span><br><span class="line">    <span class="keyword">if</span> (hoveredElement &amp;&amp; hoveredElement.<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&#x27;interactive&#x27;</span>)) &#123;</span><br><span class="line">        cursor.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;hover-effect&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        cursor.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;hover-effect&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="number">16</span>); <span class="comment">// 约60fps，保证流畅的动画效果</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, handleMouseMove);</span><br></pre></td></tr></table></figure>

<h1 id="三、节流与防抖的区别与选择"><a href="#三、节流与防抖的区别与选择" class="headerlink" title="三、节流与防抖的区别与选择"></a>三、节流与防抖的区别与选择</h1><h2 id="（一）核心区别对比"><a href="#（一）核心区别对比" class="headerlink" title="（一）核心区别对比"></a>（一）核心区别对比</h2><table>
<thead>
<tr>
<th>特性</th>
<th>防抖（Debounce）</th>
<th>节流（Throttle）</th>
</tr>
</thead>
<tbody><tr>
<td><strong>执行时机</strong></td>
<td>事件停止触发后延迟执行</td>
<td>按固定频率执行</td>
</tr>
<tr>
<td><strong>执行频率</strong></td>
<td>可能一次都不执行</td>
<td>保证一定频率的执行</td>
</tr>
<tr>
<td><strong>适用场景</strong></td>
<td>用户输入、按钮点击</td>
<td>滚动、鼠标移动</td>
</tr>
<tr>
<td><strong>性能影响</strong></td>
<td>可能延迟较长时间</td>
<td>保证及时响应</td>
</tr>
<tr>
<td><strong>实现复杂度</strong></td>
<td>相对简单</td>
<td>稍微复杂</td>
</tr>
</tbody></table>
<h2 id="（二）选择指南"><a href="#（二）选择指南" class="headerlink" title="（二）选择指南"></a>（二）选择指南</h2><h3 id="使用防抖的场景："><a href="#使用防抖的场景：" class="headerlink" title="使用防抖的场景："></a>使用防抖的场景：</h3><ul>
<li><strong>搜索框输入</strong>：用户停止输入后再发送请求</li>
<li><strong>表单验证</strong>：用户停止输入后再验证</li>
<li><strong>按钮点击</strong>：防止重复提交</li>
<li><strong>窗口大小调整</strong>：调整完成后再重新布局</li>
</ul>
<h3 id="使用节流的场景："><a href="#使用节流的场景：" class="headerlink" title="使用节流的场景："></a>使用节流的场景：</h3><ul>
<li><strong>滚动事件</strong>：需要实时响应但控制频率</li>
<li><strong>鼠标移动</strong>：需要流畅的交互效果</li>
<li><strong>拖拽操作</strong>：保证操作的流畅性</li>
<li><strong>动画帧更新</strong>：控制动画的帧率</li>
</ul>
<h2 id="（三）实际应用示例对比"><a href="#（三）实际应用示例对比" class="headerlink" title="（三）实际应用示例对比"></a>（三）实际应用示例对比</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 搜索框：使用防抖</span></span><br><span class="line"><span class="keyword">const</span> searchInput = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;search&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> debouncedSearch = <span class="title function_">debounce</span>(<span class="keyword">function</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;执行搜索:&#x27;</span>, value);</span><br><span class="line">    <span class="comment">// 发送搜索请求</span></span><br><span class="line">&#125;, <span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">searchInput.<span class="title function_">addEventListener</span>(<span class="string">&#x27;input&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">debouncedSearch</span>(e.<span class="property">target</span>.<span class="property">value</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 滚动事件：使用节流</span></span><br><span class="line"><span class="keyword">const</span> throttledScroll = <span class="title function_">throttle</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;处理滚动事件&#x27;</span>);</span><br><span class="line">    <span class="comment">// 更新滚动相关的UI</span></span><br><span class="line">&#125;, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, throttledScroll);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按钮点击：使用防抖（防重复提交）</span></span><br><span class="line"><span class="keyword">const</span> submitBtn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;submit&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> debouncedSubmit = <span class="title function_">debounce</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;提交表单&#x27;</span>);</span><br><span class="line">    <span class="comment">// 提交逻辑</span></span><br><span class="line">&#125;, <span class="number">1000</span>, &#123; <span class="attr">immediate</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"></span><br><span class="line">submitBtn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, debouncedSubmit);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 鼠标移动：使用节流（保证流畅性）</span></span><br><span class="line"><span class="keyword">const</span> throttledMouseMove = <span class="title function_">throttle</span>(<span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;鼠标位置:&#x27;</span>, e.<span class="property">clientX</span>, e.<span class="property">clientY</span>);</span><br><span class="line">    <span class="comment">// 更新鼠标相关效果</span></span><br><span class="line">&#125;, <span class="number">16</span>); <span class="comment">// 60fps</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, throttledMouseMove);</span><br></pre></td></tr></table></figure>

<h1 id="四、最佳实践与注意事项"><a href="#四、最佳实践与注意事项" class="headerlink" title="四、最佳实践与注意事项"></a>四、最佳实践与注意事项</h1><h2 id="（一）性能优化建议"><a href="#（一）性能优化建议" class="headerlink" title="（一）性能优化建议"></a>（一）性能优化建议</h2><h3 id="1-合理设置延迟时间"><a href="#1-合理设置延迟时间" class="headerlink" title="1. 合理设置延迟时间"></a>1. 合理设置延迟时间</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不同场景的推荐延迟时间</span></span><br><span class="line"><span class="keyword">const</span> delays = &#123;</span><br><span class="line">    <span class="attr">search</span>: <span class="number">300</span>,        <span class="comment">// 搜索：300ms，平衡用户体验和请求频率</span></span><br><span class="line">    <span class="attr">validation</span>: <span class="number">500</span>,    <span class="comment">// 表单验证：500ms，给用户足够输入时间</span></span><br><span class="line">    <span class="attr">scroll</span>: <span class="number">16</span>,         <span class="comment">// 滚动：16ms，约60fps，保证流畅性</span></span><br><span class="line">    <span class="attr">resize</span>: <span class="number">250</span>,        <span class="comment">// 窗口调整：250ms，避免频繁重排</span></span><br><span class="line">    <span class="attr">click</span>: <span class="number">1000</span>,        <span class="comment">// 按钮点击：1000ms，防止重复提交</span></span><br><span class="line">    <span class="attr">mousemove</span>: <span class="number">16</span>       <span class="comment">// 鼠标移动：16ms，保证交互流畅</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="2-内存泄漏防护"><a href="#2-内存泄漏防护" class="headerlink" title="2. 内存泄漏防护"></a>2. 内存泄漏防护</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 组件销毁时清理防抖/节流函数</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SearchComponent</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">debouncedSearch</span> = <span class="title function_">debounce</span>(<span class="variable language_">this</span>.<span class="property">search</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>), <span class="number">300</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setupEventListeners</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">setupEventListeners</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">searchInput</span> = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;search&#x27;</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">searchInput</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;input&#x27;</span>, <span class="variable language_">this</span>.<span class="property">debouncedSearch</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">search</span>(<span class="params">value</span>) &#123;</span><br><span class="line">        <span class="comment">// 搜索逻辑</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;搜索:&#x27;</span>, value);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">destroy</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 清理事件监听器</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">searchInput</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;input&#x27;</span>, <span class="variable language_">this</span>.<span class="property">debouncedSearch</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 取消防抖函数</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">debouncedSearch</span>.<span class="property">cancel</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">debouncedSearch</span>.<span class="title function_">cancel</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="（二）错误处理"><a href="#（二）错误处理" class="headerlink" title="（二）错误处理"></a>（二）错误处理</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 带错误处理的防抖函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">safeDebounce</span>(<span class="params">func, delay</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> timeoutId;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timeoutId);</span><br><span class="line">        </span><br><span class="line">        timeoutId = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                func.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;防抖函数执行错误:&#x27;</span>, error);</span><br><span class="line">                <span class="comment">// 可以添加错误上报逻辑</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, delay);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">const</span> safeSearch = <span class="title function_">safeDebounce</span>(<span class="keyword">async</span> <span class="keyword">function</span>(<span class="params">keyword</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">`/api/search?q=<span class="subst">$&#123;keyword&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">if</span> (!response.<span class="property">ok</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`搜索失败: <span class="subst">$&#123;response.status&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">    <span class="title function_">displayResults</span>(data);</span><br><span class="line">&#125;, <span class="number">300</span>);</span><br></pre></td></tr></table></figure>

<h2 id="（三）TypeScript支持"><a href="#（三）TypeScript支持" class="headerlink" title="（三）TypeScript支持"></a>（三）TypeScript支持</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TypeScript版本的防抖和节流</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">DebouncedFunction</span>&lt;T <span class="title function_">extends</span> (...<span class="attr">args</span>: <span class="built_in">any</span>[]) =&gt; <span class="built_in">any</span>&gt; = &#123;</span><br><span class="line">    (...<span class="attr">args</span>: <span class="title class_">Parameters</span>&lt;T&gt;): <span class="built_in">void</span>;</span><br><span class="line">    <span class="title function_">cancel</span>(): <span class="built_in">void</span>;</span><br><span class="line">    <span class="title function_">flush</span>(): <span class="title class_">ReturnType</span>&lt;T&gt; | <span class="literal">undefined</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> debounce&lt;T <span class="title function_">extends</span> (...<span class="attr">args</span>: <span class="built_in">any</span>[]) =&gt; <span class="built_in">any</span>&gt;(</span><br><span class="line">    <span class="attr">func</span>: T,</span><br><span class="line">    <span class="attr">delay</span>: <span class="built_in">number</span>,</span><br><span class="line">    <span class="attr">options</span>: &#123; <span class="attr">immediate</span>?: <span class="built_in">boolean</span>; <span class="attr">maxWait</span>?: <span class="built_in">number</span> &#125; = &#123;&#125;</span><br><span class="line">): <span class="title class_">DebouncedFunction</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">timeoutId</span>: <span class="title class_">NodeJS</span>.<span class="property">Timeout</span> | <span class="literal">undefined</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">lastCallTime</span>: <span class="built_in">number</span> | <span class="literal">undefined</span>;</span><br><span class="line">    <span class="keyword">let</span> lastInvokeTime = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> &#123; immediate = <span class="literal">false</span>, maxWait &#125; = options;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">invokeFunc</span>(<span class="params"><span class="attr">time</span>: <span class="built_in">number</span></span>): <span class="title class_">ReturnType</span>&lt;T&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> args = lastArgs;</span><br><span class="line">        <span class="keyword">const</span> thisArg = lastThis;</span><br><span class="line">        </span><br><span class="line">        lastArgs = lastThis = <span class="literal">undefined</span>;</span><br><span class="line">        lastInvokeTime = time;</span><br><span class="line">        <span class="keyword">return</span> func.<span class="title function_">apply</span>(thisArg, args);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> <span class="attr">lastArgs</span>: <span class="title class_">Parameters</span>&lt;T&gt; | <span class="literal">undefined</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">lastThis</span>: <span class="built_in">any</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">debounced</span>(<span class="params"><span class="attr">this</span>: <span class="built_in">any</span>, ...<span class="attr">args</span>: <span class="title class_">Parameters</span>&lt;T&gt;</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> time = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">        lastArgs = args;</span><br><span class="line">        lastThis = <span class="variable language_">this</span>;</span><br><span class="line">        lastCallTime = time;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (timeoutId === <span class="literal">undefined</span>) &#123;</span><br><span class="line">            timeoutId = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                timeoutId = <span class="literal">undefined</span>;</span><br><span class="line">                <span class="keyword">if</span> (!immediate) &#123;</span><br><span class="line">                    <span class="title function_">invokeFunc</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, delay);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (immediate) &#123;</span><br><span class="line">                <span class="title function_">invokeFunc</span>(time);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    debounced.<span class="property">cancel</span> = <span class="keyword">function</span>(<span class="params"></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (timeoutId !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">            <span class="built_in">clearTimeout</span>(timeoutId);</span><br><span class="line">        &#125;</span><br><span class="line">        lastInvokeTime = <span class="number">0</span>;</span><br><span class="line">        lastArgs = lastCallTime = lastThis = timeoutId = <span class="literal">undefined</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    debounced.<span class="property">flush</span> = <span class="keyword">function</span>(<span class="params"></span>): <span class="title class_">ReturnType</span>&lt;T&gt; | <span class="literal">undefined</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> timeoutId === <span class="literal">undefined</span> ? <span class="literal">undefined</span> : <span class="title function_">invokeFunc</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>());</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> debounced;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h1><p>节流和防抖是前端性能优化中的重要技术，它们通过控制函数的执行频率来解决高频事件带来的性能问题：</p>
<h2 id="（一）核心要点"><a href="#（一）核心要点" class="headerlink" title="（一）核心要点"></a>（一）核心要点</h2><ol>
<li><strong>防抖（Debounce）</strong>：等待用户停止操作后再执行，适用于搜索、表单验证等场景</li>
<li><strong>节流（Throttle）</strong>：按固定频率执行，适用于滚动、鼠标移动等需要实时响应的场景</li>
<li><strong>选择原则</strong>：根据业务需求选择，需要延迟执行用防抖，需要定期执行用节流</li>
</ol>
<h2 id="（二）实践建议"><a href="#（二）实践建议" class="headerlink" title="（二）实践建议"></a>（二）实践建议</h2><ol>
<li><strong>合理设置延迟时间</strong>：平衡用户体验和性能</li>
<li><strong>注意内存泄漏</strong>：组件销毁时清理防抖&#x2F;节流函数</li>
<li><strong>添加错误处理</strong>：确保函数执行的稳定性</li>
<li><strong>使用TypeScript</strong>：提供更好的类型安全</li>
</ol>
<h2 id="（三）性能收益"><a href="#（三）性能收益" class="headerlink" title="（三）性能收益"></a>（三）性能收益</h2><p>正确使用节流和防抖可以带来显著的性能提升：</p>
<ul>
<li>减少不必要的函数调用</li>
<li>降低CPU使用率</li>
<li>减少网络请求次数</li>
<li>提升用户体验</li>
</ul>
<p>掌握这两种技术，能够帮助我们构建更加高效、流畅的Web应用，是每个前端开发者必备的技能。</p>
<hr>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/setTimeout">MDN Web Docs - setTimeout</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/clearTimeout">MDN Web Docs - clearTimeout</a></li>
<li><a href="https://lodash.com/docs/4.17.15#debounce">Lodash - debounce</a></li>
<li><a href="https://lodash.com/docs/4.17.15#throttle">Lodash - throttle</a></li>
<li><a href="https://web.dev/performance/">JavaScript性能优化最佳实践</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在前端开发中，我们经常遇到需要处理高频事件的场景，比如用户快速点击按钮、滚动页面、调整窗口大小、输入搜索关键词等。如果不加以控制，这些高频事]]>
    </summary>
    
      <category term="性能优化" scheme="https://uwakeme.tech/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
      <category term="JavaScript" scheme="https://uwakeme.tech/tags/JavaScript/"/>
    
      <category term="节流" scheme="https://uwakeme.tech/tags/%E8%8A%82%E6%B5%81/"/>
    
      <category term="防抖" scheme="https://uwakeme.tech/tags/%E9%98%B2%E6%8A%96/"/>
    
      <category term="throttle" scheme="https://uwakeme.tech/tags/throttle/"/>
    
      <category term="debounce" scheme="https://uwakeme.tech/tags/debounce/"/>
    
      <category term="前端优化" scheme="https://uwakeme.tech/tags/%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96/"/>
    
      <category term="前端" scheme="https://uwakeme.tech/categories/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[【MySQL】MySQL去重查询详解]]></title>
    <link href="https://uwakeme.tech/2025/08/06/%E6%95%B0%E6%8D%AE%E5%BA%93/%E3%80%90MySQL%E3%80%91MySQL%E5%8E%BB%E9%87%8D%E6%9F%A5%E8%AF%A2%E8%AF%A6%E8%A7%A3/"/>
    <id>https://uwakeme.tech/2025/08/06/数据库/【MySQL】MySQL去重查询详解/</id>
    <published>2025-08-05T16:00:00.000Z</published>
    <updated>2025-08-08T01:16:52.734Z</updated>
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在日常的数据库操作中，数据去重是一个非常常见的需求。无论是查询结果去重、数据清洗，还是统计分析，我们都需要掌握MySQL中的各种去重技术。本文将详细介绍MySQL中常用的去重关键字和操作方法，结合实际业务场景，帮助大家更好地理解和应用这些技术。</p>
<p>MySQL提供了多种去重方式，主要包括DISTINCT关键字、GROUP BY子句、以及一些高级的去重技巧。每种方法都有其适用场景和性能特点，选择合适的去重方式对于提高查询效率至关重要。</p>
<h1 id="一、DISTINCT关键字详解"><a href="#一、DISTINCT关键字详解" class="headerlink" title="一、DISTINCT关键字详解"></a>一、DISTINCT关键字详解</h1><h2 id="（一）基本语法和用法"><a href="#（一）基本语法和用法" class="headerlink" title="（一）基本语法和用法"></a>（一）基本语法和用法</h2><p>DISTINCT是MySQL中最常用的去重关键字，它可以去除查询结果中的重复行。DISTINCT关键字必须放在SELECT语句的最前面，它会对整个查询结果进行去重。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 基本语法</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> column1, column2, ... <span class="keyword">FROM</span> table_name;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 单列去重：查询所有不重复的城市</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> city <span class="keyword">FROM</span> customers;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 多列组合去重：查询不重复的城市和省份组合</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> city, province <span class="keyword">FROM</span> customers;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 结合WHERE条件的去重查询</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> department_id </span><br><span class="line"><span class="keyword">FROM</span> employees </span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="operator">&gt;</span> <span class="number">5000</span>;</span><br></pre></td></tr></table></figure>

<h2 id="（二）DISTINCT的工作原理"><a href="#（二）DISTINCT的工作原理" class="headerlink" title="（二）DISTINCT的工作原理"></a>（二）DISTINCT的工作原理</h2><p>DISTINCT的工作原理是对查询结果进行排序和比较，去除完全相同的行。需要注意的是：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 示例数据表：products</span></span><br><span class="line"><span class="comment">-- id | name     | category | price</span></span><br><span class="line"><span class="comment">-- 1  | iPhone   | 手机     | 6999</span></span><br><span class="line"><span class="comment">-- 2  | iPad     | 平板     | 3999</span></span><br><span class="line"><span class="comment">-- 3  | MacBook  | 电脑     | 9999</span></span><br><span class="line"><span class="comment">-- 4  | iPhone   | 手机     | 6999</span></span><br><span class="line"><span class="comment">-- 5  | Samsung  | 手机     | 5999</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 单列去重：只返回不重复的分类</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> category <span class="keyword">FROM</span> products;</span><br><span class="line"><span class="comment">-- 结果：手机、平板、电脑</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 多列去重：name和category的组合必须完全相同才会被去重</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> name, category <span class="keyword">FROM</span> products;</span><br><span class="line"><span class="comment">-- 结果：iPhone-手机、iPad-平板、MacBook-电脑、Samsung-手机</span></span><br><span class="line"><span class="comment">-- 注意：即使有两个iPhone，但它们的完整记录相同，所以只返回一条</span></span><br></pre></td></tr></table></figure>

<h2 id="（三）DISTINCT的性能考虑"><a href="#（三）DISTINCT的性能考虑" class="headerlink" title="（三）DISTINCT的性能考虑"></a>（三）DISTINCT的性能考虑</h2><p>DISTINCT操作需要对结果集进行排序和比较，在大数据量情况下可能影响性能：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 性能优化建议：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 1. 在有索引的列上使用DISTINCT效果更好</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> customer_id <span class="keyword">FROM</span> orders;  <span class="comment">-- customer_id有索引</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 尽量减少DISTINCT的列数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> city <span class="keyword">FROM</span> customers;  <span class="comment">-- 好于下面的写法</span></span><br><span class="line"><span class="comment">-- SELECT DISTINCT city, address FROM customers;  -- 如果不必要，避免多列</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3. 结合LIMIT使用，避免处理过多数据</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> category <span class="keyword">FROM</span> products LIMIT <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 4. 使用EXISTS替代DISTINCT IN子查询（某些情况下性能更好）</span></span><br><span class="line"><span class="comment">-- 不推荐：</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> customers <span class="keyword">WHERE</span> city <span class="keyword">IN</span> (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> city <span class="keyword">FROM</span> stores);</span><br><span class="line"><span class="comment">-- 推荐：</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> customers c <span class="keyword">WHERE</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">FROM</span> stores s <span class="keyword">WHERE</span> s.city <span class="operator">=</span> c.city);</span><br></pre></td></tr></table></figure>

<h1 id="二、GROUP-BY去重操作"><a href="#二、GROUP-BY去重操作" class="headerlink" title="二、GROUP BY去重操作"></a>二、GROUP BY去重操作</h1><h2 id="（一）GROUP-BY基本去重"><a href="#（一）GROUP-BY基本去重" class="headerlink" title="（一）GROUP BY基本去重"></a>（一）GROUP BY基本去重</h2><p>GROUP BY不仅可以用于分组统计，也是一种强大的去重工具。相比DISTINCT，GROUP BY提供了更多的灵活性：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 使用GROUP BY实现去重</span></span><br><span class="line"><span class="keyword">SELECT</span> city <span class="keyword">FROM</span> customers <span class="keyword">GROUP</span> <span class="keyword">BY</span> city;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 等价于DISTINCT的写法</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> city <span class="keyword">FROM</span> customers;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- GROUP BY的优势：可以同时进行统计</span></span><br><span class="line"><span class="keyword">SELECT</span> city, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">as</span> customer_count </span><br><span class="line"><span class="keyword">FROM</span> customers </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> city;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 多列分组去重</span></span><br><span class="line"><span class="keyword">SELECT</span> department_id, job_title, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">as</span> employee_count</span><br><span class="line"><span class="keyword">FROM</span> employees </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id, job_title;</span><br></pre></td></tr></table></figure>

<h2 id="（二）GROUP-BY与聚合函数结合"><a href="#（二）GROUP-BY与聚合函数结合" class="headerlink" title="（二）GROUP BY与聚合函数结合"></a>（二）GROUP BY与聚合函数结合</h2><p>GROUP BY的真正威力在于与聚合函数的结合使用：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 统计每个分类的产品数量和平均价格</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    category,</span><br><span class="line">    <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">as</span> product_count,           <span class="comment">-- 统计每个分类的产品数量</span></span><br><span class="line">    <span class="built_in">AVG</span>(price) <span class="keyword">as</span> avg_price,            <span class="comment">-- 计算平均价格</span></span><br><span class="line">    <span class="built_in">MIN</span>(price) <span class="keyword">as</span> min_price,            <span class="comment">-- 最低价格</span></span><br><span class="line">    <span class="built_in">MAX</span>(price) <span class="keyword">as</span> max_price             <span class="comment">-- 最高价格</span></span><br><span class="line"><span class="keyword">FROM</span> products </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> category;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查找每个部门薪资最高的员工信息</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    department_id,</span><br><span class="line">    <span class="built_in">MAX</span>(salary) <span class="keyword">as</span> max_salary,</span><br><span class="line">    <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">as</span> employee_count</span><br><span class="line"><span class="keyword">FROM</span> employees </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 统计每个客户的订单数量和总金额</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    customer_id,</span><br><span class="line">    <span class="built_in">COUNT</span>(order_id) <span class="keyword">as</span> order_count,     <span class="comment">-- 订单数量</span></span><br><span class="line">    <span class="built_in">SUM</span>(total_amount) <span class="keyword">as</span> total_spent,   <span class="comment">-- 总消费金额</span></span><br><span class="line">    <span class="built_in">AVG</span>(total_amount) <span class="keyword">as</span> avg_order      <span class="comment">-- 平均订单金额</span></span><br><span class="line"><span class="keyword">FROM</span> orders </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> customer_id</span><br><span class="line"><span class="keyword">HAVING</span> total_spent <span class="operator">&gt;</span> <span class="number">10000</span>;            <span class="comment">-- 只显示消费超过1万的客户</span></span><br></pre></td></tr></table></figure>

<h2 id="（三）HAVING子句过滤分组结果"><a href="#（三）HAVING子句过滤分组结果" class="headerlink" title="（三）HAVING子句过滤分组结果"></a>（三）HAVING子句过滤分组结果</h2><p>HAVING子句用于过滤GROUP BY的结果，类似于WHERE，但作用于分组后的数据：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查找订单数量超过5个的客户</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    customer_id,</span><br><span class="line">    <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">as</span> order_count</span><br><span class="line"><span class="keyword">FROM</span> orders </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> customer_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&gt;</span> <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查找平均薪资超过8000的部门</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    department_id,</span><br><span class="line">    <span class="built_in">AVG</span>(salary) <span class="keyword">as</span> avg_salary,</span><br><span class="line">    <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">as</span> employee_count</span><br><span class="line"><span class="keyword">FROM</span> employees </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">AVG</span>(salary) <span class="operator">&gt;</span> <span class="number">8000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 复杂的HAVING条件：多个聚合函数条件</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    category,</span><br><span class="line">    <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">as</span> product_count,</span><br><span class="line">    <span class="built_in">AVG</span>(price) <span class="keyword">as</span> avg_price</span><br><span class="line"><span class="keyword">FROM</span> products </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> category</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&gt;=</span> <span class="number">3</span> <span class="keyword">AND</span> <span class="built_in">AVG</span>(price) <span class="operator">&gt;</span> <span class="number">1000</span>;</span><br></pre></td></tr></table></figure>

<h1 id="三、高级去重技巧"><a href="#三、高级去重技巧" class="headerlink" title="三、高级去重技巧"></a>三、高级去重技巧</h1><h2 id="（一）什么是窗口函数"><a href="#（一）什么是窗口函数" class="headerlink" title="（一）什么是窗口函数"></a>（一）什么是窗口函数</h2><p>在介绍ROW_NUMBER()之前，我们先了解一下什么是窗口函数。</p>
<p><strong>窗口函数就像是透过一个”窗口”来观察和处理数据。</strong> 想象一下你站在楼里透过窗户看外面的风景，这个”窗户”就是你观察的范围，你可以看到窗户范围内的所有景物并对它们进行分析。</p>
<p>在数据库中：</p>
<ul>
<li><strong>窗口</strong> &#x3D; 数据的观察范围（可以是整个表，也可以是按某个字段分组的数据）</li>
<li><strong>窗口函数</strong> &#x3D; 在这个范围内进行计算的函数</li>
<li><strong>关键特点</strong> &#x3D; 不会减少行数，每一行都会保留，只是在每行上添加计算结果</li>
</ul>
<h3 id="窗口函数与聚合函数的区别"><a href="#窗口函数与聚合函数的区别" class="headerlink" title="窗口函数与聚合函数的区别"></a>窗口函数与聚合函数的区别</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 普通聚合函数：会合并数据，减少行数</span></span><br><span class="line"><span class="keyword">SELECT</span> department_id, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">as</span> emp_count</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id;</span><br><span class="line"><span class="comment">-- 结果：如果有3个部门，只返回3行数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 窗口函数：保持原有行数，在每行上添加计算结果</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    department_id,</span><br><span class="line">    employee_name,</span><br><span class="line">    salary,</span><br><span class="line">    <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> department_id) <span class="keyword">as</span> dept_emp_count</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="comment">-- 结果：如果有100个员工，仍然返回100行，但每行都知道自己部门有多少人</span></span><br></pre></td></tr></table></figure>

<p><strong>生活中的比喻：班级排名</strong></p>
<ul>
<li><strong>传统GROUP BY方式</strong>：把学生按班级分组，只告诉你每个班有多少人</li>
<li><strong>窗口函数方式</strong>：每个学生都知道自己在班级中的排名，同时保留所有学生的完整信息</li>
</ul>
<h2 id="（二）使用ROW-NUMBER-进行去重"><a href="#（二）使用ROW-NUMBER-进行去重" class="headerlink" title="（二）使用ROW_NUMBER()进行去重"></a>（二）使用ROW_NUMBER()进行去重</h2><p>ROW_NUMBER()是MySQL的窗口函数，可以为每个分组内的行分配一个唯一的序号，常用于复杂的去重场景。</p>
<h3 id="窗口函数语法详解"><a href="#窗口函数语法详解" class="headerlink" title="窗口函数语法详解"></a>窗口函数语法详解</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 窗口函数的基本语法结构</span></span><br><span class="line"><span class="built_in">ROW_NUMBER</span>() <span class="keyword">OVER</span> (</span><br><span class="line">    <span class="keyword">PARTITION</span> <span class="keyword">BY</span> column1, column2, ...  <span class="comment">-- 分组字段（可选）</span></span><br><span class="line">    <span class="keyword">ORDER</span> <span class="keyword">BY</span> column3, column4, ...      <span class="comment">-- 排序字段（必需）</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><strong>语法说明：</strong></p>
<ul>
<li><strong>OVER</strong>：窗口函数的关键字，定义窗口的范围和规则</li>
<li><strong>PARTITION BY</strong>：类似于GROUP BY，将数据分成不同的组，在每个组内独立计算</li>
<li><strong>ORDER BY</strong>：在每个分组内按指定字段排序，ROW_NUMBER()根据这个顺序分配序号</li>
</ul>
<h3 id="OVER子句详细说明"><a href="#OVER子句详细说明" class="headerlink" title="OVER子句详细说明"></a>OVER子句详细说明</h3><p>OVER子句是窗口函数的核心，它定义了函数的计算范围：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1. 只有ORDER BY，没有PARTITION BY：对整个结果集排序编号</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    name,</span><br><span class="line">    salary,</span><br><span class="line">    <span class="built_in">ROW_NUMBER</span>() <span class="keyword">OVER</span> (<span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span>) <span class="keyword">as</span> salary_rank</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="comment">-- 结果：所有员工按薪资从高到低编号 1,2,3,4,5...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 有PARTITION BY和ORDER BY：分组内排序编号</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    department_id,</span><br><span class="line">    name,</span><br><span class="line">    salary,</span><br><span class="line">    <span class="built_in">ROW_NUMBER</span>() <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> department_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span>) <span class="keyword">as</span> dept_rank</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="comment">-- 结果：每个部门内的员工按薪资排序，每个部门都从1开始编号</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>PARTITION BY与GROUP BY的区别：</strong></p>
<p><strong>GROUP BY：</strong> 会合并行，减少结果集的行数</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> department_id, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> employees <span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id;</span><br></pre></td></tr></table></figure>

<p><strong>PARTITION BY：</strong> 不会合并行，保持原有行数，只是在每个分组内计算</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    department_id,</span><br><span class="line">    name,</span><br><span class="line">    <span class="built_in">ROW_NUMBER</span>() <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> department_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> hire_date) <span class="keyword">as</span> hire_order</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure>

<h3 id="常用窗口函数对比"><a href="#常用窗口函数对比" class="headerlink" title="常用窗口函数对比"></a>常用窗口函数对比</h3><p><strong>示例数据：员工薪资表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dept_id | name | salary</span><br><span class="line">1       | 张三 | 8000</span><br><span class="line">1       | 李四 | 9000</span><br><span class="line">1       | 王五 | 9000</span><br><span class="line">2       | 赵六 | 7000</span><br></pre></td></tr></table></figure>

<p><strong>ROW_NUMBER()：</strong> 连续唯一编号，相同值也会分配不同序号</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    dept_id, name, salary,</span><br><span class="line">    <span class="built_in">ROW_NUMBER</span>() <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> dept_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span>) <span class="keyword">as</span> row_num</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure>
<p>执行结果：李四&#x3D;1, 王五&#x3D;2, 张三&#x3D;3（即使李四和王五薪资相同）</p>
<p><strong>RANK()：</strong> 相同值分配相同排名，但会跳过后续排名</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    dept_id, name, salary,</span><br><span class="line">    <span class="built_in">RANK</span>() <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> dept_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span>) <span class="keyword">as</span> rank_num</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure>
<p>执行结果：李四&#x3D;1, 王五&#x3D;1, 张三&#x3D;3（跳过了排名2）</p>
<p><strong>DENSE_RANK()：</strong> 相同值分配相同排名，不跳过后续排名</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    dept_id, name, salary,</span><br><span class="line">    <span class="built_in">DENSE_RANK</span>() <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> dept_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span>) <span class="keyword">as</span> dense_rank</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure>
<p>执行结果：李四&#x3D;1, 王五&#x3D;1, 张三&#x3D;2（不跳过排名）</p>
<h3 id="实际应用示例"><a href="#实际应用示例" class="headerlink" title="实际应用示例"></a>实际应用示例</h3><p>ROW_NUMBER()窗口函数可以为每个分组内的行分配一个唯一的序号，常用于复杂的去重场景：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除重复数据，保留ID最小的记录</span></span><br><span class="line"><span class="comment">-- 假设customers表中有重复的email记录</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 1. 先查看重复数据</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    email,</span><br><span class="line">    <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">as</span> duplicate_count</span><br><span class="line"><span class="keyword">FROM</span> customers</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> email</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&gt;</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 使用ROW_NUMBER()标记重复数据</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    id,</span><br><span class="line">    name,</span><br><span class="line">    email,</span><br><span class="line">    <span class="comment">-- PARTITION BY email：按邮箱分组，相同邮箱的记录在同一组</span></span><br><span class="line">    <span class="comment">-- ORDER BY id：在每个邮箱组内按ID升序排列</span></span><br><span class="line">    <span class="comment">-- 结果：每个邮箱组内的记录被分配序号1,2,3...</span></span><br><span class="line">    <span class="built_in">ROW_NUMBER</span>() <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> email <span class="keyword">ORDER</span> <span class="keyword">BY</span> id) <span class="keyword">as</span> row_num</span><br><span class="line"><span class="keyword">FROM</span> customers;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>执行结果示例：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">id | name  | email        | row_num</span><br><span class="line">1  | 张三  | zhang@qq.com | 1</span><br><span class="line">3  | 李四  | zhang@qq.com | 2      -- 相同邮箱的第2条记录</span><br><span class="line">2  | 王五  | wang@qq.com  | 1</span><br><span class="line">4  | 赵六  | zhao@qq.com  | 1</span><br><span class="line"></span><br><span class="line">-- 3. 删除重复数据（保留row_num=1的记录）</span><br><span class="line">DELETE c1 FROM customers c1</span><br><span class="line">INNER JOIN (</span><br><span class="line">    SELECT</span><br><span class="line">        id,</span><br><span class="line">        ROW_NUMBER() OVER (PARTITION BY email ORDER BY id) as row_num</span><br><span class="line">    FROM customers</span><br><span class="line">) c2 ON c1.id = c2.id</span><br><span class="line">WHERE c2.row_num &gt; 1;</span><br></pre></td></tr></table></figure>

<h2 id="（三）获取每组最新记录的去重"><a href="#（三）获取每组最新记录的去重" class="headerlink" title="（三）获取每组最新记录的去重"></a>（三）获取每组最新记录的去重</h2><p>这是业务中非常常见的去重场景：获取每个用户、每个分类等的最新一条记录。这种去重不是简单的删除重复，而是从每个分组中选择符合条件的特定记录：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 场景：查询每个用户的最新购买记录</span></span><br><span class="line"><span class="comment">-- 使用ROW_NUMBER()窗口函数（推荐方法）</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    user_id,</span><br><span class="line">    user_name,</span><br><span class="line">    order_id,</span><br><span class="line">    product_name,</span><br><span class="line">    order_date,</span><br><span class="line">    amount</span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">        u.user_id,</span><br><span class="line">        u.user_name,</span><br><span class="line">        o.order_id,</span><br><span class="line">        o.product_name,</span><br><span class="line">        o.order_date,</span><br><span class="line">        o.amount,</span><br><span class="line">        <span class="comment">-- PARTITION BY u.user_id：按用户ID分组，每个用户的记录独立编号</span></span><br><span class="line">        <span class="comment">-- ORDER BY o.order_date DESC：在每个用户组内按订单日期降序排列（最新的在前）</span></span><br><span class="line">        <span class="comment">-- 结果：每个用户的最新订单获得序号1，次新的获得序号2，以此类推</span></span><br><span class="line">        <span class="built_in">ROW_NUMBER</span>() <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> u.user_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> o.order_date <span class="keyword">DESC</span>) <span class="keyword">as</span> rn</span><br><span class="line">    <span class="keyword">FROM</span> users u</span><br><span class="line">    <span class="keyword">INNER</span> <span class="keyword">JOIN</span> orders o <span class="keyword">ON</span> u.user_id <span class="operator">=</span> o.user_id</span><br><span class="line">) ranked_orders</span><br><span class="line"><span class="keyword">WHERE</span> rn <span class="operator">=</span> <span class="number">1</span>;  <span class="comment">-- 只取每个用户的第一条记录（最新的）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 处理同一时间多条记录的情况</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    user_id,</span><br><span class="line">    user_name,</span><br><span class="line">    order_id,</span><br><span class="line">    product_name,</span><br><span class="line">    order_date,</span><br><span class="line">    amount</span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">        u.user_id,</span><br><span class="line">        u.user_name,</span><br><span class="line">        o.order_id,</span><br><span class="line">        o.product_name,</span><br><span class="line">        o.order_date,</span><br><span class="line">        o.amount,</span><br><span class="line">        <span class="comment">-- PARTITION BY u.user_id：按用户分组</span></span><br><span class="line">        <span class="comment">-- ORDER BY多个字段：先按日期降序，再按订单ID降序</span></span><br><span class="line">        <span class="comment">-- 这样确保即使同一天有多个订单，也能选出唯一的&quot;最新&quot;记录</span></span><br><span class="line">        <span class="built_in">ROW_NUMBER</span>() <span class="keyword">OVER</span> (</span><br><span class="line">            <span class="keyword">PARTITION</span> <span class="keyword">BY</span> u.user_id</span><br><span class="line">            <span class="keyword">ORDER</span> <span class="keyword">BY</span> o.order_date <span class="keyword">DESC</span>, o.order_id <span class="keyword">DESC</span></span><br><span class="line">        ) <span class="keyword">as</span> rn</span><br><span class="line">    <span class="keyword">FROM</span> users u</span><br><span class="line">    <span class="keyword">INNER</span> <span class="keyword">JOIN</span> orders o <span class="keyword">ON</span> u.user_id <span class="operator">=</span> o.user_id</span><br><span class="line">) ranked_orders</span><br><span class="line"><span class="keyword">WHERE</span> rn <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 其他常见的最新记录查询场景：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 1. 查询每个商品的最新价格记录</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    product_id,</span><br><span class="line">    product_name,</span><br><span class="line">    price,</span><br><span class="line">    effective_date</span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">        product_id,</span><br><span class="line">        product_name,</span><br><span class="line">        price,</span><br><span class="line">        effective_date,</span><br><span class="line">        <span class="built_in">ROW_NUMBER</span>() <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> product_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> effective_date <span class="keyword">DESC</span>) <span class="keyword">as</span> rn</span><br><span class="line">    <span class="keyword">FROM</span> product_price_history</span><br><span class="line">) latest_prices</span><br><span class="line"><span class="keyword">WHERE</span> rn <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 查询每个部门最新入职的员工</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    department_id,</span><br><span class="line">    employee_name,</span><br><span class="line">    hire_date,</span><br><span class="line">    salary</span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">        department_id,</span><br><span class="line">        employee_name,</span><br><span class="line">        hire_date,</span><br><span class="line">        salary,</span><br><span class="line">        <span class="built_in">ROW_NUMBER</span>() <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> department_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> hire_date <span class="keyword">DESC</span>) <span class="keyword">as</span> rn</span><br><span class="line">    <span class="keyword">FROM</span> employees</span><br><span class="line">) latest_hires</span><br><span class="line"><span class="keyword">WHERE</span> rn <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<h3 id="替代方法：使用相关子查询"><a href="#替代方法：使用相关子查询" class="headerlink" title="替代方法：使用相关子查询"></a>替代方法：使用相关子查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 使用相关子查询实现相同功能（性能可能较差）</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    u.user_id,</span><br><span class="line">    u.user_name,</span><br><span class="line">    o.order_id,</span><br><span class="line">    o.product_name,</span><br><span class="line">    o.order_date,</span><br><span class="line">    o.amount</span><br><span class="line"><span class="keyword">FROM</span> users u</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> orders o <span class="keyword">ON</span> u.user_id <span class="operator">=</span> o.user_id</span><br><span class="line"><span class="keyword">WHERE</span> o.order_date <span class="operator">=</span> (</span><br><span class="line">    <span class="comment">-- 子查询：找到该用户的最新订单日期</span></span><br><span class="line">    <span class="keyword">SELECT</span> <span class="built_in">MAX</span>(order_date)</span><br><span class="line">    <span class="keyword">FROM</span> orders o2</span><br><span class="line">    <span class="keyword">WHERE</span> o2.user_id <span class="operator">=</span> u.user_id</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 注意：如果同一天有多条记录，上述查询可能返回多条结果</span></span><br><span class="line"><span class="comment">-- 需要进一步处理：</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    u.user_id,</span><br><span class="line">    u.user_name,</span><br><span class="line">    o.order_id,</span><br><span class="line">    o.product_name,</span><br><span class="line">    o.order_date,</span><br><span class="line">    o.amount</span><br><span class="line"><span class="keyword">FROM</span> users u</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> orders o <span class="keyword">ON</span> u.user_id <span class="operator">=</span> o.user_id</span><br><span class="line"><span class="keyword">WHERE</span> (o.order_date, o.order_id) <span class="operator">=</span> (</span><br><span class="line">    <span class="comment">-- 使用复合条件确保唯一性</span></span><br><span class="line">    <span class="keyword">SELECT</span> order_date, <span class="built_in">MAX</span>(order_id)</span><br><span class="line">    <span class="keyword">FROM</span> orders o2</span><br><span class="line">    <span class="keyword">WHERE</span> o2.user_id <span class="operator">=</span> u.user_id</span><br><span class="line">    <span class="keyword">AND</span> o2.order_date <span class="operator">=</span> (</span><br><span class="line">        <span class="keyword">SELECT</span> <span class="built_in">MAX</span>(order_date) <span class="keyword">FROM</span> orders o3 <span class="keyword">WHERE</span> o3.user_id <span class="operator">=</span> u.user_id</span><br><span class="line">    )</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h2 id="（四）使用UNION去重"><a href="#（四）使用UNION去重" class="headerlink" title="（四）使用UNION去重"></a>（四）使用UNION去重</h2><p>UNION操作符会自动去除重复行，而UNION ALL则保留所有行：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- UNION自动去重</span></span><br><span class="line"><span class="keyword">SELECT</span> city <span class="keyword">FROM</span> customers_north</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> city <span class="keyword">FROM</span> customers_south;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- UNION ALL保留重复</span></span><br><span class="line"><span class="keyword">SELECT</span> city <span class="keyword">FROM</span> customers_north</span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> city <span class="keyword">FROM</span> customers_south;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 复杂的UNION去重查询</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;VIP客户&#x27;</span> <span class="keyword">as</span> customer_type, name, email <span class="keyword">FROM</span> vip_customers</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;普通客户&#x27;</span> <span class="keyword">as</span> customer_type, name, email <span class="keyword">FROM</span> regular_customers</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> customer_type, name;</span><br></pre></td></tr></table></figure>

<h2 id="（五）临时表去重方法"><a href="#（五）临时表去重方法" class="headerlink" title="（五）临时表去重方法"></a>（五）临时表去重方法</h2><p>对于大量数据的去重操作，有时使用临时表会更高效：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建临时表存储去重结果</span></span><br><span class="line"><span class="keyword">CREATE</span> TEMPORARY <span class="keyword">TABLE</span> temp_unique_customers <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> customer_id, name, email </span><br><span class="line"><span class="keyword">FROM</span> customers;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 清空原表</span></span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> customers;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 将去重数据插入回原表</span></span><br><span class="line"><span class="keyword">INSERT INTO</span> customers (customer_id, name, email)</span><br><span class="line"><span class="keyword">SELECT</span> customer_id, name, email <span class="keyword">FROM</span> temp_unique_customers;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除临时表</span></span><br><span class="line"><span class="keyword">DROP</span> TEMPORARY <span class="keyword">TABLE</span> temp_unique_customers;</span><br></pre></td></tr></table></figure>

<h1 id="四、实际应用场景"><a href="#四、实际应用场景" class="headerlink" title="四、实际应用场景"></a>四、实际应用场景</h1><h2 id="（一）电商系统中的去重应用"><a href="#（一）电商系统中的去重应用" class="headerlink" title="（一）电商系统中的去重应用"></a>（一）电商系统中的去重应用</h2><p>在电商系统中，去重操作非常常见，以下是一些典型场景：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 场景1：统计每个商品的销售情况（去重订单项）</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    product_id,</span><br><span class="line">    product_name,</span><br><span class="line">    <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> order_id) <span class="keyword">as</span> order_count,    <span class="comment">-- 有多少个不同订单购买了此商品</span></span><br><span class="line">    <span class="built_in">SUM</span>(quantity) <span class="keyword">as</span> total_sold,               <span class="comment">-- 总销售数量</span></span><br><span class="line">    <span class="built_in">SUM</span>(quantity <span class="operator">*</span> price) <span class="keyword">as</span> total_revenue     <span class="comment">-- 总销售额</span></span><br><span class="line"><span class="keyword">FROM</span> order_items oi</span><br><span class="line"><span class="keyword">JOIN</span> products p <span class="keyword">ON</span> oi.product_id <span class="operator">=</span> p.id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> product_id, product_name</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> total_revenue <span class="keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 场景2：查找活跃用户（去重登录记录）</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    user_id,</span><br><span class="line">    <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> <span class="type">DATE</span>(login_time)) <span class="keyword">as</span> active_days,  <span class="comment">-- 活跃天数</span></span><br><span class="line">    <span class="built_in">MIN</span>(login_time) <span class="keyword">as</span> first_login,                   <span class="comment">-- 首次登录</span></span><br><span class="line">    <span class="built_in">MAX</span>(login_time) <span class="keyword">as</span> last_login                     <span class="comment">-- 最后登录</span></span><br><span class="line"><span class="keyword">FROM</span> user_login_logs </span><br><span class="line"><span class="keyword">WHERE</span> login_time <span class="operator">&gt;=</span> DATE_SUB(NOW(), <span class="type">INTERVAL</span> <span class="number">30</span> <span class="keyword">DAY</span>)</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> user_id</span><br><span class="line"><span class="keyword">HAVING</span> active_days <span class="operator">&gt;=</span> <span class="number">10</span>;  <span class="comment">-- 30天内至少活跃10天的用户</span></span><br></pre></td></tr></table></figure>

<h2 id="（二）数据分析中的去重统计"><a href="#（二）数据分析中的去重统计" class="headerlink" title="（二）数据分析中的去重统计"></a>（二）数据分析中的去重统计</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 场景3：网站流量分析（去重访问统计）</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    <span class="type">DATE</span>(visit_time) <span class="keyword">as</span> visit_date,</span><br><span class="line">    <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">as</span> total_visits,                    <span class="comment">-- 总访问次数（包含重复）</span></span><br><span class="line">    <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> user_id) <span class="keyword">as</span> unique_visitors,  <span class="comment">-- 独立访客数</span></span><br><span class="line">    <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> session_id) <span class="keyword">as</span> unique_sessions <span class="comment">-- 独立会话数</span></span><br><span class="line"><span class="keyword">FROM</span> website_visits </span><br><span class="line"><span class="keyword">WHERE</span> visit_time <span class="operator">&gt;=</span> DATE_SUB(NOW(), <span class="type">INTERVAL</span> <span class="number">7</span> <span class="keyword">DAY</span>)</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="type">DATE</span>(visit_time)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> visit_date;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 场景4：用户行为分析（去重行为统计）</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    user_id,</span><br><span class="line">    <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> action_type) <span class="keyword">as</span> action_types,     <span class="comment">-- 用户执行了多少种不同行为</span></span><br><span class="line">    <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> product_id) <span class="keyword">as</span> viewed_products,   <span class="comment">-- 查看了多少不同商品</span></span><br><span class="line">    <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">as</span> total_actions                        <span class="comment">-- 总行为次数</span></span><br><span class="line"><span class="keyword">FROM</span> user_actions </span><br><span class="line"><span class="keyword">WHERE</span> action_date <span class="operator">&gt;=</span> DATE_SUB(NOW(), <span class="type">INTERVAL</span> <span class="number">30</span> <span class="keyword">DAY</span>)</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> user_id</span><br><span class="line"><span class="keyword">HAVING</span> action_types <span class="operator">&gt;=</span> <span class="number">3</span>;  <span class="comment">-- 至少执行了3种不同行为的用户</span></span><br></pre></td></tr></table></figure>

<h1 id="五、性能优化建议"><a href="#五、性能优化建议" class="headerlink" title="五、性能优化建议"></a>五、性能优化建议</h1><h2 id="（一）索引优化"><a href="#（一）索引优化" class="headerlink" title="（一）索引优化"></a>（一）索引优化</h2><p>合理的索引设计对去重操作的性能至关重要：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 为经常用于去重的列创建索引</span></span><br><span class="line"><span class="keyword">CREATE</span> INDEX idx_customer_email <span class="keyword">ON</span> customers(email);</span><br><span class="line"><span class="keyword">CREATE</span> INDEX idx_product_category <span class="keyword">ON</span> products(category);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 复合索引用于多列去重</span></span><br><span class="line"><span class="keyword">CREATE</span> INDEX idx_order_customer_date <span class="keyword">ON</span> orders(customer_id, order_date);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看索引使用情况</span></span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> category <span class="keyword">FROM</span> products;</span><br></pre></td></tr></table></figure>

<h2 id="（二）查询优化技巧"><a href="#（二）查询优化技巧" class="headerlink" title="（二）查询优化技巧"></a>（二）查询优化技巧</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1. 使用EXISTS替代DISTINCT子查询</span></span><br><span class="line"><span class="comment">-- 不推荐：</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> category <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> category <span class="keyword">FROM</span> featured_products</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 推荐：</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> products p <span class="keyword">WHERE</span> <span class="keyword">EXISTS</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">FROM</span> featured_products fp <span class="keyword">WHERE</span> fp.category <span class="operator">=</span> p.category</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 合理使用LIMIT</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> category <span class="keyword">FROM</span> products LIMIT <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3. 避免在大表上进行全表DISTINCT</span></span><br><span class="line"><span class="comment">-- 如果可能，先用WHERE条件过滤数据</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> customer_id </span><br><span class="line"><span class="keyword">FROM</span> orders </span><br><span class="line"><span class="keyword">WHERE</span> order_date <span class="operator">&gt;=</span> <span class="string">&#x27;2024-01-01&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h1 id="六、常见问题与解决方案"><a href="#六、常见问题与解决方案" class="headerlink" title="六、常见问题与解决方案"></a>六、常见问题与解决方案</h1><h2 id="（一）NULL值处理"><a href="#（一）NULL值处理" class="headerlink" title="（一）NULL值处理"></a>（一）NULL值处理</h2><p>在去重操作中，NULL值的处理需要特别注意：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- DISTINCT会将NULL视为相同值</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> phone <span class="keyword">FROM</span> customers;  <span class="comment">-- 多个NULL只会返回一个NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 如果要排除NULL值</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> phone <span class="keyword">FROM</span> customers <span class="keyword">WHERE</span> phone <span class="keyword">IS</span> <span class="keyword">NOT NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- GROUP BY也会将NULL归为一组</span></span><br><span class="line"><span class="keyword">SELECT</span> phone, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> customers <span class="keyword">GROUP</span> <span class="keyword">BY</span> phone;</span><br></pre></td></tr></table></figure>

<h2 id="（二）性能问题排查"><a href="#（二）性能问题排查" class="headerlink" title="（二）性能问题排查"></a>（二）性能问题排查</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 使用EXPLAIN分析查询性能</span></span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> category <span class="keyword">FROM</span> products;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看查询执行时间</span></span><br><span class="line"><span class="keyword">SET</span> profiling <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> customer_id <span class="keyword">FROM</span> orders;</span><br><span class="line"><span class="keyword">SHOW</span> PROFILES;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 对于大数据量，考虑分批处理</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> customer_id <span class="keyword">FROM</span> orders </span><br><span class="line"><span class="keyword">WHERE</span> order_date <span class="keyword">BETWEEN</span> <span class="string">&#x27;2024-01-01&#x27;</span> <span class="keyword">AND</span> <span class="string">&#x27;2024-01-31&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h1 id="七、总结"><a href="#七、总结" class="headerlink" title="七、总结"></a>七、总结</h1><p>MySQL中的去重操作是数据处理的基础技能，掌握不同去重方法的特点和适用场景非常重要：</p>
<ol>
<li><strong>DISTINCT</strong>：适用于简单的结果去重，语法简洁，但功能相对单一</li>
<li><strong>GROUP BY</strong>：功能强大，可以结合聚合函数进行统计分析，是数据分析的利器</li>
<li>**窗口函数ROW_NUMBER()**：适用于复杂的去重场景，如删除重复数据、获取每组最新记录等</li>
<li><strong>UNION</strong>：适用于合并多个查询结果并去重</li>
<li><strong>获取每组最新记录</strong>：这是业务中最常见的去重需求，推荐使用ROW_NUMBER()窗口函数实现</li>
</ol>
<p>在实际应用中，应该根据具体的业务需求和数据特点选择合适的去重方法，同时注意性能优化，合理使用索引，避免在大数据量上进行低效的去重操作。</p>
<p>通过本文的学习，相信大家对MySQL的去重操作有了更深入的理解，能够在实际工作中灵活运用这些技术，提高数据处理的效率和准确性。</p>
<hr>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://dev.mysql.com/doc/refman/8.0/en/select.html">MySQL官方文档 - SELECT语句</a></li>
<li><a href="https://dev.mysql.com/doc/refman/8.0/en/group-by-optimization.html">MySQL官方文档 - GROUP BY优化</a></li>
<li><a href="https://dev.mysql.com/doc/refman/8.0/en/distinct-optimization.html">MySQL官方文档 - DISTINCT优化</a></li>
<li><a href="https://dev.mysql.com/doc/refman/8.0/en/optimization.html">MySQL性能优化最佳实践</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在日常的数据库操作中，数据去重是一个非常常见的需求。无论是查询结果去重、数据清洗，还是统计分析，我们都需要掌握MySQL中的各种去重技术。本]]>
    </summary>
    
      <category term="MySQL" scheme="https://uwakeme.tech/tags/MySQL/"/>
    
      <category term="数据库" scheme="https://uwakeme.tech/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MySQL" scheme="https://uwakeme.tech/categories/MySQL/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[【软件功能解析】B站弹幕系统技术实现深度剖析：从前端渲染到后端存储]]></title>
    <link href="https://uwakeme.tech/2025/08/06/%E8%BD%AF%E4%BB%B6%E5%8A%9F%E8%83%BD%E8%A7%A3%E6%9E%90/%E3%80%90%E8%BD%AF%E4%BB%B6%E5%8A%9F%E8%83%BD%E8%A7%A3%E6%9E%90%E3%80%91B%E7%AB%99%E5%BC%B9%E5%B9%95%E7%B3%BB%E7%BB%9F%E6%8A%80%E6%9C%AF%E5%AE%9E%E7%8E%B0%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90%EF%BC%9A%E4%BB%8E%E5%89%8D%E7%AB%AF%E6%B8%B2%E6%9F%93%E5%88%B0%E5%90%8E%E7%AB%AF%E5%AD%98%E5%82%A8/"/>
    <id>https://uwakeme.tech/2025/08/06/软件功能解析/【软件功能解析】B站弹幕系统技术实现深度剖析：从前端渲染到后端存储/</id>
    <published>2025-08-05T16:00:00.000Z</published>
    <updated>2025-08-06T01:18:08.130Z</updated>
    <content type="html"><![CDATA[<h1 id="一、弹幕系统概述与技术挑战"><a href="#一、弹幕系统概述与技术挑战" class="headerlink" title="一、弹幕系统概述与技术挑战"></a>一、弹幕系统概述与技术挑战</h1><h2 id="（一）弹幕系统的核心特征"><a href="#（一）弹幕系统的核心特征" class="headerlink" title="（一）弹幕系统的核心特征"></a>（一）弹幕系统的核心特征</h2><ul>
<li><p><strong>实时性要求</strong></p>
<ul>
<li>毫秒级延迟：弹幕发送到显示延迟需控制在100ms内</li>
<li>时间同步：弹幕与视频播放进度精确同步</li>
<li>并发处理：支持数万用户同时观看和发送弹幕</li>
<li>流畅体验：高频弹幕不影响视频播放性能</li>
</ul>
</li>
<li><p><strong>数据特点</strong></p>
<ul>
<li>海量数据：热门视频可产生数十万条弹幕</li>
<li>时序性：弹幕与视频时间轴强绑定</li>
<li>短文本：单条弹幕通常20-50字符</li>
<li>高并发：热门直播间同时在线用户可达百万级</li>
</ul>
</li>
<li><p><strong>业务复杂性</strong></p>
<ul>
<li>多端同步：Web、移动端、TV端弹幕同步显示</li>
<li>个性化：弹幕屏蔽、过滤、样式自定义</li>
<li>内容审核：实时敏感词过滤、人工审核</li>
<li>互动功能：弹幕点赞、回复、举报</li>
</ul>
</li>
</ul>
<h2 id="（二）技术架构挑战"><a href="#（二）技术架构挑战" class="headerlink" title="（二）技术架构挑战"></a>（二）技术架构挑战</h2><ul>
<li><p><strong>性能挑战</strong></p>
<ul>
<li>前端渲染：大量DOM元素的高效渲染和回收</li>
<li>内存管理：避免弹幕积累导致的内存泄漏</li>
<li>CPU优化：动画计算不能影响视频解码</li>
<li>网络优化：减少弹幕数据传输带宽消耗</li>
</ul>
</li>
<li><p><strong>可扩展性挑战</strong></p>
<ul>
<li>水平扩展：支持用户量和视频数量的线性增长</li>
<li>存储扩展：历史弹幕数据的分布式存储</li>
<li>计算扩展：实时弹幕处理的分布式计算</li>
<li>缓存策略：多级缓存提升访问性能</li>
</ul>
</li>
</ul>
<h1 id="二、前端弹幕渲染系统"><a href="#二、前端弹幕渲染系统" class="headerlink" title="二、前端弹幕渲染系统"></a>二、前端弹幕渲染系统</h1><h2 id="（一）弹幕渲染引擎设计"><a href="#（一）弹幕渲染引擎设计" class="headerlink" title="（一）弹幕渲染引擎设计"></a>（一）弹幕渲染引擎设计</h2><ul>
<li><strong>Canvas渲染方案</strong><ul>
<li>高性能：直接操作像素，避免DOM操作开销</li>
<li>动画流畅：60FPS的弹幕移动动画</li>
<li>内存可控：统一的渲染缓冲区管理</li>
<li>碰撞检测：弹幕轨道分配和重叠避免</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Canvas弹幕渲染核心代码</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DanmakuRenderer</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">canvas, video</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">canvas</span> = canvas;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">ctx</span> = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">video</span> = video;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">danmakuList</span> = [];</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">tracks</span> = []; <span class="comment">// 弹幕轨道</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">isRunning</span> = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 添加弹幕</span></span><br><span class="line">    <span class="title function_">addDanmaku</span>(<span class="params">danmaku</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> track = <span class="variable language_">this</span>.<span class="title function_">findAvailableTrack</span>(danmaku);</span><br><span class="line">        <span class="keyword">if</span> (track !== -<span class="number">1</span>) &#123;</span><br><span class="line">            danmaku.<span class="property">track</span> = track;</span><br><span class="line">            danmaku.<span class="property">x</span> = <span class="variable language_">this</span>.<span class="property">canvas</span>.<span class="property">width</span>;</span><br><span class="line">            danmaku.<span class="property">y</span> = track * <span class="number">30</span> + <span class="number">25</span>; <span class="comment">// 每行高度30px</span></span><br><span class="line">            danmaku.<span class="property">speed</span> = <span class="variable language_">this</span>.<span class="title function_">calculateSpeed</span>(danmaku.<span class="property">text</span>);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">danmakuList</span>.<span class="title function_">push</span>(danmaku);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 查找可用轨道</span></span><br><span class="line">    <span class="title function_">findAvailableTrack</span>(<span class="params">newDanmaku</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> trackCount = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="variable language_">this</span>.<span class="property">canvas</span>.<span class="property">height</span> / <span class="number">30</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; trackCount; i++) &#123;</span><br><span class="line">            <span class="keyword">let</span> canUse = <span class="literal">true</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 检查该轨道是否有冲突的弹幕</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> danmaku <span class="keyword">of</span> <span class="variable language_">this</span>.<span class="property">danmakuList</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (danmaku.<span class="property">track</span> === i) &#123;</span><br><span class="line">                    <span class="keyword">const</span> danmakuRight = danmaku.<span class="property">x</span> + danmaku.<span class="property">width</span>;</span><br><span class="line">                    <span class="keyword">const</span> newDanmakuSpeed = <span class="variable language_">this</span>.<span class="title function_">calculateSpeed</span>(newDanmaku.<span class="property">text</span>);</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">// 计算是否会发生碰撞</span></span><br><span class="line">                    <span class="keyword">if</span> (danmakuRight &gt; <span class="variable language_">this</span>.<span class="property">canvas</span>.<span class="property">width</span> - <span class="number">100</span> &amp;&amp; </span><br><span class="line">                        danmaku.<span class="property">speed</span> &lt;= newDanmakuSpeed) &#123;</span><br><span class="line">                        canUse = <span class="literal">false</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (canUse) <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>; <span class="comment">// 无可用轨道</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 计算弹幕移动速度</span></span><br><span class="line">    <span class="title function_">calculateSpeed</span>(<span class="params">text</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> baseSpeed = <span class="number">2</span>; <span class="comment">// 基础速度</span></span><br><span class="line">        <span class="keyword">const</span> textWidth = <span class="variable language_">this</span>.<span class="property">ctx</span>.<span class="title function_">measureText</span>(text).<span class="property">width</span>;</span><br><span class="line">        <span class="comment">// 根据文本长度调整速度，确保显示时间相对一致</span></span><br><span class="line">        <span class="keyword">return</span> baseSpeed + (textWidth / <span class="variable language_">this</span>.<span class="property">canvas</span>.<span class="property">width</span>) * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 渲染循环</span></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">isRunning</span>) <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 清空画布</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">ctx</span>.<span class="title function_">clearRect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="variable language_">this</span>.<span class="property">canvas</span>.<span class="property">width</span>, <span class="variable language_">this</span>.<span class="property">canvas</span>.<span class="property">height</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 渲染所有弹幕</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="variable language_">this</span>.<span class="property">danmakuList</span>.<span class="property">length</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">const</span> danmaku = <span class="variable language_">this</span>.<span class="property">danmakuList</span>[i];</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 更新位置</span></span><br><span class="line">            danmaku.<span class="property">x</span> -= danmaku.<span class="property">speed</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 移除屏幕外的弹幕</span></span><br><span class="line">            <span class="keyword">if</span> (danmaku.<span class="property">x</span> + danmaku.<span class="property">width</span> &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">danmakuList</span>.<span class="title function_">splice</span>(i, <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 绘制弹幕</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">drawDanmaku</span>(danmaku);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 下一帧</span></span><br><span class="line">        <span class="title function_">requestAnimationFrame</span>(<span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">render</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 绘制单条弹幕</span></span><br><span class="line">    <span class="title function_">drawDanmaku</span>(<span class="params">danmaku</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">ctx</span>.<span class="title function_">save</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 设置字体样式</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">ctx</span>.<span class="property">font</span> = <span class="string">`<span class="subst">$&#123;danmaku.fontSize&#125;</span>px <span class="subst">$&#123;danmaku.fontFamily&#125;</span>`</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">ctx</span>.<span class="property">fillStyle</span> = danmaku.<span class="property">color</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">ctx</span>.<span class="property">strokeStyle</span> = <span class="string">&#x27;#000&#x27;</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">ctx</span>.<span class="property">lineWidth</span> = <span class="number">2</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 绘制描边（提高可读性）</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">ctx</span>.<span class="title function_">strokeText</span>(danmaku.<span class="property">text</span>, danmaku.<span class="property">x</span>, danmaku.<span class="property">y</span>);</span><br><span class="line">        <span class="comment">// 绘制文字</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">ctx</span>.<span class="title function_">fillText</span>(danmaku.<span class="property">text</span>, danmaku.<span class="property">x</span>, danmaku.<span class="property">y</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">ctx</span>.<span class="title function_">restore</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 启动渲染</span></span><br><span class="line">    <span class="title function_">start</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">isRunning</span> = <span class="literal">true</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">render</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 停止渲染</span></span><br><span class="line">    <span class="title function_">stop</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">isRunning</span> = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="（二）弹幕与视频同步机制"><a href="#（二）弹幕与视频同步机制" class="headerlink" title="（二）弹幕与视频同步机制"></a>（二）弹幕与视频同步机制</h2><ul>
<li><strong>时间轴同步</strong><ul>
<li>弹幕时间戳：记录弹幕在视频中的精确时间点</li>
<li>播放进度监听：监听video元素的timeupdate事件</li>
<li>缓冲预加载：提前加载即将显示的弹幕</li>
<li>跳转处理：视频跳转时清理当前弹幕并重新加载</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 弹幕时间同步管理器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DanmakuTimeSync</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">video, renderer</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">video</span> = video;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">renderer</span> = renderer;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">danmakuData</span> = []; <span class="comment">// 所有弹幕数据</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">currentIndex</span> = <span class="number">0</span>; <span class="comment">// 当前播放位置的弹幕索引</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">preloadTime</span> = <span class="number">5</span>; <span class="comment">// 预加载5秒的弹幕</span></span><br><span class="line">        </span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">bindEvents</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 绑定视频事件</span></span><br><span class="line">    <span class="title function_">bindEvents</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 监听播放进度</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">video</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;timeupdate&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">syncDanmaku</span>();</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 监听跳转</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">video</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;seeked&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">handleSeek</span>();</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 监听播放状态</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">video</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;play&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">renderer</span>.<span class="title function_">start</span>();</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">video</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;pause&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">renderer</span>.<span class="title function_">stop</span>();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 同步弹幕显示</span></span><br><span class="line">    <span class="title function_">syncDanmaku</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> currentTime = <span class="variable language_">this</span>.<span class="property">video</span>.<span class="property">currentTime</span>;</span><br><span class="line">        <span class="keyword">const</span> endTime = currentTime + <span class="variable language_">this</span>.<span class="property">preloadTime</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 查找需要显示的弹幕</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="variable language_">this</span>.<span class="property">currentIndex</span> &lt; <span class="variable language_">this</span>.<span class="property">danmakuData</span>.<span class="property">length</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> danmaku = <span class="variable language_">this</span>.<span class="property">danmakuData</span>[<span class="variable language_">this</span>.<span class="property">currentIndex</span>];</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (danmaku.<span class="property">time</span> &lt;= endTime) &#123;</span><br><span class="line">                <span class="comment">// 计算延迟显示时间</span></span><br><span class="line">                <span class="keyword">const</span> delay = (danmaku.<span class="property">time</span> - currentTime) * <span class="number">1000</span>;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> (delay &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">// 立即显示</span></span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">renderer</span>.<span class="title function_">addDanmaku</span>(danmaku);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 延迟显示</span></span><br><span class="line">                    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="title class_">Math</span>.<span class="title function_">abs</span>(<span class="variable language_">this</span>.<span class="property">video</span>.<span class="property">currentTime</span> - danmaku.<span class="property">time</span>) &lt; <span class="number">0.5</span>) &#123;</span><br><span class="line">                            <span class="variable language_">this</span>.<span class="property">renderer</span>.<span class="title function_">addDanmaku</span>(danmaku);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;, delay);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">currentIndex</span>++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 处理视频跳转</span></span><br><span class="line">    <span class="title function_">handleSeek</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> currentTime = <span class="variable language_">this</span>.<span class="property">video</span>.<span class="property">currentTime</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 清空当前显示的弹幕</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">renderer</span>.<span class="title function_">clear</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 重新定位弹幕索引</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">currentIndex</span> = <span class="variable language_">this</span>.<span class="title function_">findDanmakuIndex</span>(currentTime);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 立即同步弹幕</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">syncDanmaku</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 二分查找弹幕索引</span></span><br><span class="line">    <span class="title function_">findDanmakuIndex</span>(<span class="params">time</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> right = <span class="variable language_">this</span>.<span class="property">danmakuData</span>.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="keyword">const</span> mid = <span class="title class_">Math</span>.<span class="title function_">floor</span>((left + right) / <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">const</span> danmaku = <span class="variable language_">this</span>.<span class="property">danmakuData</span>[mid];</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (danmaku.<span class="property">time</span> &lt; time) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 加载弹幕数据</span></span><br><span class="line">    <span class="title function_">loadDanmakuData</span>(<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="comment">// 按时间排序</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">danmakuData</span> = data.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.<span class="property">time</span> - b.<span class="property">time</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">currentIndex</span> = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="（三）弹幕性能优化策略"><a href="#（三）弹幕性能优化策略" class="headerlink" title="（三）弹幕性能优化策略"></a>（三）弹幕性能优化策略</h2><ul>
<li><p><strong>渲染优化</strong></p>
<ul>
<li>对象池：复用弹幕对象减少GC压力</li>
<li>离屏渲染：预渲染弹幕文本到离屏Canvas</li>
<li>分层渲染：静态背景和动态弹幕分层</li>
<li>帧率控制：根据设备性能动态调整帧率</li>
</ul>
</li>
<li><p><strong>内存优化</strong></p>
<ul>
<li>及时清理：移出屏幕的弹幕立即销毁</li>
<li>数据分页：大量弹幕数据分批加载</li>
<li>缓存策略：LRU缓存常用弹幕样式</li>
<li>内存监控：监控内存使用避免泄漏</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 弹幕对象池优化</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DanmakuPool</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">maxSize = <span class="number">1000</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">pool</span> = [];</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">maxSize</span> = maxSize;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取弹幕对象</span></span><br><span class="line">    <span class="title function_">getDanmaku</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">pool</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">pool</span>.<span class="title function_">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">createDanmaku</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 回收弹幕对象</span></span><br><span class="line">    <span class="title function_">recycleDanmaku</span>(<span class="params">danmaku</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">pool</span>.<span class="property">length</span> &lt; <span class="variable language_">this</span>.<span class="property">maxSize</span>) &#123;</span><br><span class="line">            <span class="comment">// 重置对象状态</span></span><br><span class="line">            danmaku.<span class="title function_">reset</span>();</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">pool</span>.<span class="title function_">push</span>(danmaku);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建新的弹幕对象</span></span><br><span class="line">    <span class="title function_">createDanmaku</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">text</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="attr">x</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">y</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">speed</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">color</span>: <span class="string">&#x27;#ffffff&#x27;</span>,</span><br><span class="line">            <span class="attr">fontSize</span>: <span class="number">16</span>,</span><br><span class="line">            <span class="attr">fontFamily</span>: <span class="string">&#x27;Arial&#x27;</span>,</span><br><span class="line">            <span class="attr">time</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">track</span>: -<span class="number">1</span>,</span><br><span class="line">            <span class="attr">width</span>: <span class="number">0</span>,</span><br><span class="line">            </span><br><span class="line">            <span class="title function_">reset</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">text</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">x</span> = <span class="number">0</span>;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">y</span> = <span class="number">0</span>;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">speed</span> = <span class="number">0</span>;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">color</span> = <span class="string">&#x27;#ffffff&#x27;</span>;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">fontSize</span> = <span class="number">16</span>;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">fontFamily</span> = <span class="string">&#x27;Arial&#x27;</span>;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">time</span> = <span class="number">0</span>;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">track</span> = -<span class="number">1</span>;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">width</span> = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="三、实时通信与数据传输"><a href="#三、实时通信与数据传输" class="headerlink" title="三、实时通信与数据传输"></a>三、实时通信与数据传输</h1><h2 id="（一）WebSocket实时通信"><a href="#（一）WebSocket实时通信" class="headerlink" title="（一）WebSocket实时通信"></a>（一）WebSocket实时通信</h2><ul>
<li><strong>连接管理</strong><ul>
<li>连接建立：用户进入视频页面时建立WebSocket连接</li>
<li>心跳保活：定期发送ping&#x2F;pong消息保持连接</li>
<li>断线重连：网络异常时自动重连机制</li>
<li>连接池：服务端管理大量并发连接</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// WebSocket弹幕客户端</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DanmakuWebSocket</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">videoId, userId</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">videoId</span> = videoId;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">userId</span> = userId;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">ws</span> = <span class="literal">null</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">reconnectAttempts</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">maxReconnectAttempts</span> = <span class="number">5</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">heartbeatInterval</span> = <span class="literal">null</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">messageHandlers</span> = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">connect</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 建立WebSocket连接</span></span><br><span class="line">    <span class="title function_">connect</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> wsUrl = <span class="string">`wss://api.bilibili.com/danmaku/ws?video_id=<span class="subst">$&#123;<span class="variable language_">this</span>.videoId&#125;</span>&amp;user_id=<span class="subst">$&#123;<span class="variable language_">this</span>.userId&#125;</span>`</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">ws</span> = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(wsUrl);</span><br><span class="line">        </span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">ws</span>.<span class="property">onopen</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;弹幕WebSocket连接已建立&#x27;</span>);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">reconnectAttempts</span> = <span class="number">0</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">startHeartbeat</span>();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 发送认证信息</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">send</span>(&#123;</span><br><span class="line">                <span class="attr">type</span>: <span class="string">&#x27;auth&#x27;</span>,</span><br><span class="line">                <span class="attr">data</span>: &#123;</span><br><span class="line">                    <span class="attr">token</span>: <span class="variable language_">this</span>.<span class="title function_">getAuthToken</span>(),</span><br><span class="line">                    <span class="attr">videoId</span>: <span class="variable language_">this</span>.<span class="property">videoId</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">ws</span>.<span class="property">onmessage</span> = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">handleMessage</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(event.<span class="property">data</span>));</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">ws</span>.<span class="property">onclose</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;弹幕WebSocket连接已关闭&#x27;</span>);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">stopHeartbeat</span>();</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">reconnect</span>();</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">ws</span>.<span class="property">onerror</span> = <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;弹幕WebSocket错误:&#x27;</span>, error);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 处理接收到的消息</span></span><br><span class="line">    <span class="title function_">handleMessage</span>(<span class="params">message</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; type, data &#125; = message;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;danmaku&#x27;</span>:</span><br><span class="line">                <span class="comment">// 新弹幕消息</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">emit</span>(<span class="string">&#x27;newDanmaku&#x27;</span>, data);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;danmaku_count&#x27;</span>:</span><br><span class="line">                <span class="comment">// 弹幕统计信息</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">emit</span>(<span class="string">&#x27;danmakuCount&#x27;</span>, data);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;user_count&#x27;</span>:</span><br><span class="line">                <span class="comment">// 在线用户数</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">emit</span>(<span class="string">&#x27;userCount&#x27;</span>, data);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;pong&#x27;</span>:</span><br><span class="line">                <span class="comment">// 心跳响应</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">                </span><br><span class="line">            <span class="attr">default</span>:</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&#x27;未知消息类型:&#x27;</span>, type);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 发送弹幕</span></span><br><span class="line">    <span class="title function_">sendDanmaku</span>(<span class="params">text, time, color = <span class="string">&#x27;#ffffff&#x27;</span></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">ws</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">ws</span>.<span class="property">readyState</span> === <span class="title class_">WebSocket</span>.<span class="property">OPEN</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">send</span>(&#123;</span><br><span class="line">                <span class="attr">type</span>: <span class="string">&#x27;send_danmaku&#x27;</span>,</span><br><span class="line">                <span class="attr">data</span>: &#123;</span><br><span class="line">                    <span class="attr">text</span>: text,</span><br><span class="line">                    <span class="attr">time</span>: time,</span><br><span class="line">                    <span class="attr">color</span>: color,</span><br><span class="line">                    <span class="attr">timestamp</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 发送消息</span></span><br><span class="line">    <span class="title function_">send</span>(<span class="params">message</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">ws</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">ws</span>.<span class="property">readyState</span> === <span class="title class_">WebSocket</span>.<span class="property">OPEN</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">ws</span>.<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(message));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 开始心跳</span></span><br><span class="line">    <span class="title function_">startHeartbeat</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">heartbeatInterval</span> = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">send</span>(&#123; <span class="attr">type</span>: <span class="string">&#x27;ping&#x27;</span> &#125;);</span><br><span class="line">        &#125;, <span class="number">30000</span>); <span class="comment">// 30秒心跳</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 停止心跳</span></span><br><span class="line">    <span class="title function_">stopHeartbeat</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">heartbeatInterval</span>) &#123;</span><br><span class="line">            <span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">heartbeatInterval</span>);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">heartbeatInterval</span> = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 重连机制</span></span><br><span class="line">    <span class="title function_">reconnect</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">reconnectAttempts</span> &lt; <span class="variable language_">this</span>.<span class="property">maxReconnectAttempts</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">reconnectAttempts</span>++;</span><br><span class="line">            <span class="keyword">const</span> delay = <span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">2</span>, <span class="variable language_">this</span>.<span class="property">reconnectAttempts</span>) * <span class="number">1000</span>; <span class="comment">// 指数退避</span></span><br><span class="line">            </span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`尝试重连弹幕WebSocket (<span class="subst">$&#123;<span class="variable language_">this</span>.reconnectAttempts&#125;</span>/<span class="subst">$&#123;<span class="variable language_">this</span>.maxReconnectAttempts&#125;</span>)`</span>);</span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">connect</span>();</span><br><span class="line">            &#125;, delay);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 事件监听</span></span><br><span class="line">    <span class="title function_">on</span>(<span class="params">event, handler</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">messageHandlers</span>.<span class="title function_">has</span>(event)) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">messageHandlers</span>.<span class="title function_">set</span>(event, []);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">messageHandlers</span>.<span class="title function_">get</span>(event).<span class="title function_">push</span>(handler);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 触发事件</span></span><br><span class="line">    <span class="title function_">emit</span>(<span class="params">event, data</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> handlers = <span class="variable language_">this</span>.<span class="property">messageHandlers</span>.<span class="title function_">get</span>(event);</span><br><span class="line">        <span class="keyword">if</span> (handlers) &#123;</span><br><span class="line">            handlers.<span class="title function_">forEach</span>(<span class="function"><span class="params">handler</span> =&gt;</span> <span class="title function_">handler</span>(data));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 关闭连接</span></span><br><span class="line">    <span class="title function_">close</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">stopHeartbeat</span>();</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">ws</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">ws</span>.<span class="title function_">close</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取认证Token</span></span><br><span class="line">    <span class="title function_">getAuthToken</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 从cookie或localStorage获取用户认证token</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;auth_token&#x27;</span>) || <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="（二）数据协议设计"><a href="#（二）数据协议设计" class="headerlink" title="（二）数据协议设计"></a>（二）数据协议设计</h2><ul>
<li><p><strong>消息格式</strong></p>
<ul>
<li>JSON协议：易于解析和调试</li>
<li>消息类型：区分弹幕、系统消息、控制消息</li>
<li>数据压缩：gzip压缩减少传输量</li>
<li>版本兼容：协议版本号支持向后兼容</li>
</ul>
</li>
<li><p><strong>弹幕数据结构</strong></p>
<ul>
<li>基础字段：文本内容、时间戳、用户ID</li>
<li>样式字段：颜色、字体大小、特效</li>
<li>元数据：IP地址、设备信息、审核状态</li>
<li>扩展字段：预留字段支持功能扩展</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 弹幕数据结构定义</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">DanmakuMessage</span> = &#123;</span><br><span class="line">    <span class="comment">// 消息头</span></span><br><span class="line">    <span class="attr">version</span>: <span class="string">&#x27;1.0&#x27;</span>,           <span class="comment">// 协议版本</span></span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;danmaku&#x27;</span>,          <span class="comment">// 消息类型</span></span><br><span class="line">    <span class="attr">timestamp</span>: <span class="number">1640995200000</span>, <span class="comment">// 服务器时间戳</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 弹幕数据</span></span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&#x27;dm_123456789&#x27;</span>,        <span class="comment">// 弹幕唯一ID</span></span><br><span class="line">        <span class="attr">video_id</span>: <span class="string">&#x27;BV1234567890&#x27;</span>,  <span class="comment">// 视频ID</span></span><br><span class="line">        <span class="attr">user_id</span>: <span class="string">&#x27;uid_987654321&#x27;</span>,  <span class="comment">// 用户ID</span></span><br><span class="line">        <span class="attr">username</span>: <span class="string">&#x27;用户昵称&#x27;</span>,       <span class="comment">// 用户昵称</span></span><br><span class="line">        <span class="attr">text</span>: <span class="string">&#x27;这是一条弹幕&#x27;</span>,       <span class="comment">// 弹幕内容</span></span><br><span class="line">        <span class="attr">time</span>: <span class="number">120.5</span>,               <span class="comment">// 视频时间点(秒)</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 样式信息</span></span><br><span class="line">        <span class="attr">style</span>: &#123;</span><br><span class="line">            <span class="attr">color</span>: <span class="string">&#x27;#ffffff&#x27;</span>,      <span class="comment">// 文字颜色</span></span><br><span class="line">            <span class="attr">fontSize</span>: <span class="number">16</span>,          <span class="comment">// 字体大小</span></span><br><span class="line">            <span class="attr">fontFamily</span>: <span class="string">&#x27;Arial&#x27;</span>,   <span class="comment">// 字体</span></span><br><span class="line">            <span class="attr">mode</span>: <span class="string">&#x27;scroll&#x27;</span>,        <span class="comment">// 弹幕模式: scroll/top/bottom</span></span><br><span class="line">            <span class="attr">speed</span>: <span class="string">&#x27;normal&#x27;</span>        <span class="comment">// 移动速度: slow/normal/fast</span></span><br><span class="line">        &#125;,</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 元数据</span></span><br><span class="line">        <span class="attr">meta</span>: &#123;</span><br><span class="line">            <span class="attr">ip</span>: <span class="string">&#x27;192.168.1.1&#x27;</span>,     <span class="comment">// 用户IP</span></span><br><span class="line">            <span class="attr">device</span>: <span class="string">&#x27;web&#x27;</span>,         <span class="comment">// 设备类型</span></span><br><span class="line">            <span class="attr">client_version</span>: <span class="string">&#x27;1.0&#x27;</span>, <span class="comment">// 客户端版本</span></span><br><span class="line">            <span class="attr">audit_status</span>: <span class="string">&#x27;pass&#x27;</span>   <span class="comment">// 审核状态</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="四、后端架构与数据存储"><a href="#四、后端架构与数据存储" class="headerlink" title="四、后端架构与数据存储"></a>四、后端架构与数据存储</h1><h2 id="（一）微服务架构设计"><a href="#（一）微服务架构设计" class="headerlink" title="（一）微服务架构设计"></a>（一）微服务架构设计</h2><ul>
<li><strong>服务拆分</strong><ul>
<li>弹幕接收服务：处理弹幕发送请求</li>
<li>弹幕分发服务：实时推送弹幕到客户端</li>
<li>弹幕存储服务：持久化弹幕数据</li>
<li>审核服务：内容审核和过滤</li>
<li>统计服务：弹幕数据统计分析</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 弹幕接收服务 (Python Flask示例)</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify</span><br><span class="line"><span class="keyword">from</span> flask_socketio <span class="keyword">import</span> SocketIO, emit, join_room</span><br><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = <span class="string">&#x27;your-secret-key&#x27;</span></span><br><span class="line">socketio = SocketIO(app, cors_allowed_origins=<span class="string">&quot;*&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Redis连接</span></span><br><span class="line">redis_client = redis.Redis(host=<span class="string">&#x27;localhost&#x27;</span>, port=<span class="number">6379</span>, db=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DanmakuService</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.audit_service = AuditService()</span><br><span class="line">        <span class="variable language_">self</span>.storage_service = StorageService()</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @socketio.on(<span class="params"><span class="string">&#x27;send_danmaku&#x27;</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle_send_danmaku</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;处理弹幕发送请求&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 验证用户权限</span></span><br><span class="line">            user_id = <span class="variable language_">self</span>.verify_user_token(data.get(<span class="string">&#x27;token&#x27;</span>))</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> user_id:</span><br><span class="line">                emit(<span class="string">&#x27;error&#x27;</span>, &#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;用户认证失败&#x27;</span>&#125;)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 构造弹幕对象</span></span><br><span class="line">            danmaku = &#123;</span><br><span class="line">                <span class="string">&#x27;id&#x27;</span>: <span class="variable language_">self</span>.generate_danmaku_id(),</span><br><span class="line">                <span class="string">&#x27;video_id&#x27;</span>: data[<span class="string">&#x27;video_id&#x27;</span>],</span><br><span class="line">                <span class="string">&#x27;user_id&#x27;</span>: user_id,</span><br><span class="line">                <span class="string">&#x27;text&#x27;</span>: data[<span class="string">&#x27;text&#x27;</span>],</span><br><span class="line">                <span class="string">&#x27;time&#x27;</span>: data[<span class="string">&#x27;time&#x27;</span>],</span><br><span class="line">                <span class="string">&#x27;color&#x27;</span>: data.get(<span class="string">&#x27;color&#x27;</span>, <span class="string">&#x27;#ffffff&#x27;</span>),</span><br><span class="line">                <span class="string">&#x27;timestamp&#x27;</span>: datetime.now().isoformat(),</span><br><span class="line">                <span class="string">&#x27;ip&#x27;</span>: request.remote_addr</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 内容审核</span></span><br><span class="line">            audit_result = <span class="variable language_">self</span>.audit_service.check_content(danmaku[<span class="string">&#x27;text&#x27;</span>])</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> audit_result[<span class="string">&#x27;pass&#x27;</span>]:</span><br><span class="line">                emit(<span class="string">&#x27;error&#x27;</span>, &#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;弹幕内容不符合规范&#x27;</span>&#125;)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 频率限制检查</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.check_rate_limit(user_id):</span><br><span class="line">                emit(<span class="string">&#x27;error&#x27;</span>, &#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;发送频率过快，请稍后再试&#x27;</span>&#125;)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 存储弹幕</span></span><br><span class="line">            <span class="variable language_">self</span>.storage_service.save_danmaku(danmaku)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 实时分发</span></span><br><span class="line">            <span class="variable language_">self</span>.broadcast_danmaku(danmaku)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 返回成功响应</span></span><br><span class="line">            emit(<span class="string">&#x27;danmaku_sent&#x27;</span>, &#123;<span class="string">&#x27;id&#x27;</span>: danmaku[<span class="string">&#x27;id&#x27;</span>]&#125;)</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            emit(<span class="string">&#x27;error&#x27;</span>, &#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;发送失败，请重试&#x27;</span>&#125;)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;弹幕发送错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">broadcast_danmaku</span>(<span class="params">self, danmaku</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;广播弹幕到所有观看者&quot;&quot;&quot;</span></span><br><span class="line">        room = <span class="string">f&quot;video_<span class="subst">&#123;danmaku[<span class="string">&#x27;video_id&#x27;</span>]&#125;</span>&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 构造广播消息</span></span><br><span class="line">        broadcast_data = &#123;</span><br><span class="line">            <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;danmaku&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;data&#x27;</span>: &#123;</span><br><span class="line">                <span class="string">&#x27;id&#x27;</span>: danmaku[<span class="string">&#x27;id&#x27;</span>],</span><br><span class="line">                <span class="string">&#x27;text&#x27;</span>: danmaku[<span class="string">&#x27;text&#x27;</span>],</span><br><span class="line">                <span class="string">&#x27;time&#x27;</span>: danmaku[<span class="string">&#x27;time&#x27;</span>],</span><br><span class="line">                <span class="string">&#x27;color&#x27;</span>: danmaku[<span class="string">&#x27;color&#x27;</span>],</span><br><span class="line">                <span class="string">&#x27;username&#x27;</span>: <span class="variable language_">self</span>.get_username(danmaku[<span class="string">&#x27;user_id&#x27;</span>])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 发送到房间内所有用户</span></span><br><span class="line">        socketio.emit(<span class="string">&#x27;new_danmaku&#x27;</span>, broadcast_data, room=room)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 同时推送到Redis队列供其他服务消费</span></span><br><span class="line">        redis_client.lpush(</span><br><span class="line">            <span class="string">f&quot;danmaku_queue_<span class="subst">&#123;danmaku[<span class="string">&#x27;video_id&#x27;</span>]&#125;</span>&quot;</span>, </span><br><span class="line">            json.dumps(broadcast_data)</span><br><span class="line">        )</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check_rate_limit</span>(<span class="params">self, user_id</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;检查用户发送频率限制&quot;&quot;&quot;</span></span><br><span class="line">        key = <span class="string">f&quot;rate_limit_<span class="subst">&#123;user_id&#125;</span>&quot;</span></span><br><span class="line">        current_count = redis_client.get(key)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> current_count <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># 第一次发送，设置计数器</span></span><br><span class="line">            redis_client.setex(key, <span class="number">60</span>, <span class="number">1</span>)  <span class="comment"># 1分钟内限制</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">int</span>(current_count) &gt;= <span class="number">10</span>:  <span class="comment"># 每分钟最多10条</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">        redis_client.incr(key)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">    @socketio.on(<span class="params"><span class="string">&#x27;join_video&#x27;</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle_join_video</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;用户加入视频房间&quot;&quot;&quot;</span></span><br><span class="line">        video_id = data[<span class="string">&#x27;video_id&#x27;</span>]</span><br><span class="line">        room = <span class="string">f&quot;video_<span class="subst">&#123;video_id&#125;</span>&quot;</span></span><br><span class="line">        join_room(room)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 发送历史弹幕</span></span><br><span class="line">        <span class="variable language_">self</span>.send_history_danmaku(video_id)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 更新在线人数</span></span><br><span class="line">        <span class="variable language_">self</span>.update_online_count(video_id)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send_history_danmaku</span>(<span class="params">self, video_id</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;发送历史弹幕数据&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 从缓存或数据库获取弹幕数据</span></span><br><span class="line">        history_danmaku = <span class="variable language_">self</span>.storage_service.get_video_danmaku(video_id)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 分批发送，避免一次性发送过多数据</span></span><br><span class="line">        batch_size = <span class="number">1000</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(history_danmaku), batch_size):</span><br><span class="line">            batch = history_danmaku[i:i + batch_size]</span><br><span class="line">            emit(<span class="string">&#x27;history_danmaku&#x27;</span>, &#123;<span class="string">&#x27;data&#x27;</span>: batch&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 内容审核服务</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AuditService</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.sensitive_words = <span class="variable language_">self</span>.load_sensitive_words()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check_content</span>(<span class="params">self, text</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;检查弹幕内容&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 敏感词过滤</span></span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> <span class="variable language_">self</span>.sensitive_words:</span><br><span class="line">            <span class="keyword">if</span> word <span class="keyword">in</span> text:</span><br><span class="line">                <span class="keyword">return</span> &#123;<span class="string">&#x27;pass&#x27;</span>: <span class="literal">False</span>, <span class="string">&#x27;reason&#x27;</span>: <span class="string">&#x27;包含敏感词&#x27;</span>&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 长度检查</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(text) &gt; <span class="number">100</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="string">&#x27;pass&#x27;</span>: <span class="literal">False</span>, <span class="string">&#x27;reason&#x27;</span>: <span class="string">&#x27;内容过长&#x27;</span>&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 其他规则检查...</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&#x27;pass&#x27;</span>: <span class="literal">True</span>&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">load_sensitive_words</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;加载敏感词库&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 从数据库或文件加载敏感词</span></span><br><span class="line">        <span class="keyword">return</span> [<span class="string">&#x27;敏感词1&#x27;</span>, <span class="string">&#x27;敏感词2&#x27;</span>]  <span class="comment"># 示例</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    socketio.run(app, debug=<span class="literal">True</span>, port=<span class="number">5000</span>)</span><br></pre></td></tr></table></figure>

<h2 id="（二）数据存储策略"><a href="#（二）数据存储策略" class="headerlink" title="（二）数据存储策略"></a>（二）数据存储策略</h2><ul>
<li><p><strong>分布式存储</strong></p>
<ul>
<li>主数据库：MySQL存储弹幕基础信息</li>
<li>时序数据库：InfluxDB存储弹幕时间序列数据</li>
<li>缓存层：Redis缓存热点弹幕数据</li>
<li>对象存储：OSS存储弹幕文件和备份</li>
</ul>
</li>
<li><p><strong>数据分片策略</strong></p>
<ul>
<li>按视频ID分片：相同视频的弹幕存储在同一分片</li>
<li>按时间分片：历史弹幕按月份归档</li>
<li>读写分离：主库写入，从库读取</li>
<li>冷热分离：热点数据SSD，冷数据HDD</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 弹幕数据表设计</span></span><br><span class="line"><span class="comment">-- 主弹幕表</span></span><br><span class="line"><span class="keyword">CREATE TABLE</span> danmaku (</span><br><span class="line">    id <span class="type">BIGINT</span> <span class="keyword">PRIMARY KEY</span> AUTO_INCREMENT,</span><br><span class="line">    video_id <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">    user_id <span class="type">BIGINT</span> <span class="keyword">NOT NULL</span>,</span><br><span class="line">    content TEXT <span class="keyword">NOT NULL</span>,</span><br><span class="line">    time_offset <span class="type">DECIMAL</span>(<span class="number">10</span>,<span class="number">3</span>) <span class="keyword">NOT NULL</span>,  <span class="comment">-- 视频时间点(秒)</span></span><br><span class="line">    color <span class="type">VARCHAR</span>(<span class="number">7</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;#ffffff&#x27;</span>,</span><br><span class="line">    font_size TINYINT <span class="keyword">DEFAULT</span> <span class="number">16</span>,</span><br><span class="line">    mode TINYINT <span class="keyword">DEFAULT</span> <span class="number">1</span>,  <span class="comment">-- 1:滚动 2:顶部 3:底部</span></span><br><span class="line">    created_at <span class="type">TIMESTAMP</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">    updated_at <span class="type">TIMESTAMP</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">    status TINYINT <span class="keyword">DEFAULT</span> <span class="number">1</span>,  <span class="comment">-- 1:正常 2:隐藏 3:删除</span></span><br><span class="line">    audit_status TINYINT <span class="keyword">DEFAULT</span> <span class="number">0</span>,  <span class="comment">-- 0:待审核 1:通过 2:拒绝</span></span><br><span class="line">    ip_address <span class="type">VARCHAR</span>(<span class="number">45</span>),</span><br><span class="line">    user_agent TEXT,</span><br><span class="line">    </span><br><span class="line">    INDEX idx_video_time (video_id, time_offset),</span><br><span class="line">    INDEX idx_user_created (user_id, created_at),</span><br><span class="line">    INDEX idx_created_status (created_at, status)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 弹幕统计表</span></span><br><span class="line"><span class="keyword">CREATE TABLE</span> danmaku_stats (</span><br><span class="line">    video_id <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">PRIMARY KEY</span>,</span><br><span class="line">    total_count <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>,</span><br><span class="line">    today_count <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>,</span><br><span class="line">    peak_count <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>,  <span class="comment">-- 峰值弹幕数</span></span><br><span class="line">    last_updated <span class="type">TIMESTAMP</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span></span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 用户弹幕统计表</span></span><br><span class="line"><span class="keyword">CREATE TABLE</span> user_danmaku_stats (</span><br><span class="line">    user_id <span class="type">BIGINT</span> <span class="keyword">PRIMARY KEY</span>,</span><br><span class="line">    total_sent <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>,</span><br><span class="line">    today_sent <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>,</span><br><span class="line">    last_sent_at <span class="type">TIMESTAMP</span> <span class="keyword">NULL</span>,</span><br><span class="line">    is_banned TINYINT <span class="keyword">DEFAULT</span> <span class="number">0</span>,</span><br><span class="line">    ban_until <span class="type">TIMESTAMP</span> <span class="keyword">NULL</span></span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br></pre></td></tr></table></figure>

<h2 id="（三）缓存与性能优化"><a href="#（三）缓存与性能优化" class="headerlink" title="（三）缓存与性能优化"></a>（三）缓存与性能优化</h2><ul>
<li><p><strong>多级缓存架构</strong></p>
<ul>
<li>L1缓存：浏览器本地缓存</li>
<li>L2缓存：CDN边缘缓存</li>
<li>L3缓存：Redis集群缓存</li>
<li>L4缓存：应用内存缓存</li>
</ul>
</li>
<li><p><strong>缓存策略</strong></p>
<ul>
<li>热点数据：实时弹幕数据缓存1小时</li>
<li>历史数据：按视频ID缓存，TTL 24小时</li>
<li>用户数据：用户权限信息缓存30分钟</li>
<li>统计数据：弹幕统计信息缓存5分钟</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Redis缓存管理</span></span><br><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Optional</span>, <span class="type">List</span>, <span class="type">Dict</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DanmakuCache</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.redis_client = redis.Redis(</span><br><span class="line">            host=<span class="string">&#x27;redis-cluster&#x27;</span>,</span><br><span class="line">            port=<span class="number">6379</span>,</span><br><span class="line">            decode_responses=<span class="literal">True</span></span><br><span class="line">        )</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">cache_video_danmaku</span>(<span class="params">self, video_id: <span class="built_in">str</span>, danmaku_list: <span class="type">List</span>[<span class="type">Dict</span>], ttl: <span class="built_in">int</span> = <span class="number">3600</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;缓存视频弹幕数据&quot;&quot;&quot;</span></span><br><span class="line">        key = <span class="string">f&quot;danmaku:video:<span class="subst">&#123;video_id&#125;</span>&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 使用Pipeline批量操作</span></span><br><span class="line">        pipe = <span class="variable language_">self</span>.redis_client.pipeline()</span><br><span class="line">        pipe.delete(key)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 按时间分段存储，便于范围查询</span></span><br><span class="line">        <span class="keyword">for</span> danmaku <span class="keyword">in</span> danmaku_list:</span><br><span class="line">            time_segment = <span class="built_in">int</span>(danmaku[<span class="string">&#x27;time&#x27;</span>] // <span class="number">10</span>)  <span class="comment"># 10秒一个段</span></span><br><span class="line">            segment_key = <span class="string">f&quot;<span class="subst">&#123;key&#125;</span>:segment:<span class="subst">&#123;time_segment&#125;</span>&quot;</span></span><br><span class="line">            pipe.lpush(segment_key, json.dumps(danmaku))</span><br><span class="line">            pipe.expire(segment_key, ttl)</span><br><span class="line">        </span><br><span class="line">        pipe.execute()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_video_danmaku</span>(<span class="params">self, video_id: <span class="built_in">str</span>, start_time: <span class="built_in">float</span> = <span class="number">0</span>, end_time: <span class="built_in">float</span> = <span class="literal">None</span></span>) -&gt; <span class="type">List</span>[<span class="type">Dict</span>]:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;获取视频弹幕数据&quot;&quot;&quot;</span></span><br><span class="line">        start_segment = <span class="built_in">int</span>(start_time // <span class="number">10</span>)</span><br><span class="line">        end_segment = <span class="built_in">int</span>(end_time // <span class="number">10</span>) <span class="keyword">if</span> end_time <span class="keyword">else</span> start_segment + <span class="number">100</span></span><br><span class="line">        </span><br><span class="line">        danmaku_list = []</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> segment <span class="keyword">in</span> <span class="built_in">range</span>(start_segment, end_segment + <span class="number">1</span>):</span><br><span class="line">            segment_key = <span class="string">f&quot;danmaku:video:<span class="subst">&#123;video_id&#125;</span>:segment:<span class="subst">&#123;segment&#125;</span>&quot;</span></span><br><span class="line">            segment_data = <span class="variable language_">self</span>.redis_client.lrange(segment_key, <span class="number">0</span>, -<span class="number">1</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> segment_data:</span><br><span class="line">                danmaku = json.loads(item)</span><br><span class="line">                <span class="keyword">if</span> start_time &lt;= danmaku[<span class="string">&#x27;time&#x27;</span>] &lt;= (end_time <span class="keyword">or</span> <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)):</span><br><span class="line">                    danmaku_list.append(danmaku)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sorted</span>(danmaku_list, key=<span class="keyword">lambda</span> x: x[<span class="string">&#x27;time&#x27;</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">cache_user_rate_limit</span>(<span class="params">self, user_id: <span class="built_in">str</span>, count: <span class="built_in">int</span>, ttl: <span class="built_in">int</span> = <span class="number">60</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;缓存用户发送频率限制&quot;&quot;&quot;</span></span><br><span class="line">        key = <span class="string">f&quot;rate_limit:user:<span class="subst">&#123;user_id&#125;</span>&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.redis_client.setex(key, ttl, count)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_user_rate_limit</span>(<span class="params">self, user_id: <span class="built_in">str</span></span>) -&gt; <span class="type">Optional</span>[<span class="built_in">int</span>]:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;获取用户发送频率&quot;&quot;&quot;</span></span><br><span class="line">        key = <span class="string">f&quot;rate_limit:user:<span class="subst">&#123;user_id&#125;</span>&quot;</span></span><br><span class="line">        count = <span class="variable language_">self</span>.redis_client.get(key)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>(count) <span class="keyword">if</span> count <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">cache_online_count</span>(<span class="params">self, video_id: <span class="built_in">str</span>, count: <span class="built_in">int</span>, ttl: <span class="built_in">int</span> = <span class="number">30</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;缓存在线人数&quot;&quot;&quot;</span></span><br><span class="line">        key = <span class="string">f&quot;online:video:<span class="subst">&#123;video_id&#125;</span>&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.redis_client.setex(key, ttl, count)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">increment_online_count</span>(<span class="params">self, video_id: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;增加在线人数&quot;&quot;&quot;</span></span><br><span class="line">        key = <span class="string">f&quot;online:video:<span class="subst">&#123;video_id&#125;</span>&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.redis_client.incr(key)</span><br></pre></td></tr></table></figure>

<h1 id="五、系统监控与运维"><a href="#五、系统监控与运维" class="headerlink" title="五、系统监控与运维"></a>五、系统监控与运维</h1><h2 id="（一）实时监控指标"><a href="#（一）实时监控指标" class="headerlink" title="（一）实时监控指标"></a>（一）实时监控指标</h2><ul>
<li><p><strong>业务指标</strong></p>
<ul>
<li>弹幕发送量：每秒弹幕发送数量</li>
<li>在线用户数：实时观看人数统计</li>
<li>延迟监控：弹幕从发送到显示的延迟</li>
<li>成功率：弹幕发送成功率统计</li>
</ul>
</li>
<li><p><strong>技术指标</strong></p>
<ul>
<li>WebSocket连接数：并发连接数监控</li>
<li>服务器性能：CPU、内存、网络使用率</li>
<li>数据库性能：查询响应时间、连接池状态</li>
<li>缓存命中率：Redis缓存命中率统计</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 监控数据收集</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> psutil</span><br><span class="line"><span class="keyword">from</span> prometheus_client <span class="keyword">import</span> Counter, Histogram, Gauge, start_http_server</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DanmakuMetrics</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 业务指标</span></span><br><span class="line">        <span class="variable language_">self</span>.danmaku_sent_total = Counter(<span class="string">&#x27;danmaku_sent_total&#x27;</span>, <span class="string">&#x27;弹幕发送总数&#x27;</span>, [<span class="string">&#x27;video_id&#x27;</span>])</span><br><span class="line">        <span class="variable language_">self</span>.danmaku_latency = Histogram(<span class="string">&#x27;danmaku_latency_seconds&#x27;</span>, <span class="string">&#x27;弹幕延迟分布&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.online_users = Gauge(<span class="string">&#x27;online_users_total&#x27;</span>, <span class="string">&#x27;在线用户数&#x27;</span>, [<span class="string">&#x27;video_id&#x27;</span>])</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 技术指标</span></span><br><span class="line">        <span class="variable language_">self</span>.websocket_connections = Gauge(<span class="string">&#x27;websocket_connections_total&#x27;</span>, <span class="string">&#x27;WebSocket连接数&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.cpu_usage = Gauge(<span class="string">&#x27;cpu_usage_percent&#x27;</span>, <span class="string">&#x27;CPU使用率&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.memory_usage = Gauge(<span class="string">&#x27;memory_usage_percent&#x27;</span>, <span class="string">&#x27;内存使用率&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 启动指标收集</span></span><br><span class="line">        <span class="variable language_">self</span>.start_system_metrics_collection()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">record_danmaku_sent</span>(<span class="params">self, video_id: <span class="built_in">str</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;记录弹幕发送&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.danmaku_sent_total.labels(video_id=video_id).inc()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">record_danmaku_latency</span>(<span class="params">self, latency: <span class="built_in">float</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;记录弹幕延迟&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.danmaku_latency.observe(latency)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update_online_users</span>(<span class="params">self, video_id: <span class="built_in">str</span>, count: <span class="built_in">int</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;更新在线用户数&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.online_users.labels(video_id=video_id).<span class="built_in">set</span>(count)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update_websocket_connections</span>(<span class="params">self, count: <span class="built_in">int</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;更新WebSocket连接数&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.websocket_connections.<span class="built_in">set</span>(count)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">start_system_metrics_collection</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;启动系统指标收集&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">collect_system_metrics</span>():</span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                <span class="comment"># CPU使用率</span></span><br><span class="line">                cpu_percent = psutil.cpu_percent(interval=<span class="number">1</span>)</span><br><span class="line">                <span class="variable language_">self</span>.cpu_usage.<span class="built_in">set</span>(cpu_percent)</span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 内存使用率</span></span><br><span class="line">                memory = psutil.virtual_memory()</span><br><span class="line">                <span class="variable language_">self</span>.memory_usage.<span class="built_in">set</span>(memory.percent)</span><br><span class="line">                </span><br><span class="line">                time.sleep(<span class="number">10</span>)  <span class="comment"># 每10秒收集一次</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">import</span> threading</span><br><span class="line">        thread = threading.Thread(target=collect_system_metrics, daemon=<span class="literal">True</span>)</span><br><span class="line">        thread.start()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动Prometheus指标服务器</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    start_http_server(<span class="number">8000</span>)  <span class="comment"># 在8000端口提供指标</span></span><br><span class="line">    metrics = DanmakuMetrics()</span><br></pre></td></tr></table></figure>

<h2 id="（二）故障处理与容灾"><a href="#（二）故障处理与容灾" class="headerlink" title="（二）故障处理与容灾"></a>（二）故障处理与容灾</h2><ul>
<li><p><strong>故障检测</strong></p>
<ul>
<li>健康检查：定期检查服务健康状态</li>
<li>异常告警：关键指标异常时自动告警</li>
<li>日志监控：错误日志实时分析</li>
<li>用户反馈：用户投诉和反馈收集</li>
</ul>
</li>
<li><p><strong>容灾机制</strong></p>
<ul>
<li>服务降级：高峰期关闭非核心功能</li>
<li>限流保护：防止系统过载</li>
<li>熔断机制：故障服务自动隔离</li>
<li>数据备份：定期备份关键数据</li>
</ul>
</li>
</ul>
<hr>
<p><strong>总结</strong>：B站弹幕系统是一个复杂的实时通信系统，涉及前端高性能渲染、实时数据传输、后端分布式架构、海量数据存储等多个技术领域。其核心挑战在于在保证实时性的同时，处理海量并发用户和数据。</p>
<p>通过Canvas渲染引擎实现高性能的弹幕显示，WebSocket保证实时通信，微服务架构支持系统的可扩展性，多级缓存提升系统性能，完善的监控体系保证系统稳定运行。这些技术的综合运用，才能支撑起B站每天数亿条弹幕的处理需求。</p>
<p>弹幕系统的设计思路和技术方案，对于其他需要实时交互的应用（如直播聊天、在线协作、实时游戏等）都有很好的参考价值。关键是要根据具体业务场景，在实时性、一致性、可用性之间找到合适的平衡点。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="一、弹幕系统概述与技术挑战"><a href="#一、弹幕系统概述与技术挑战" class="headerlink" title="一、弹幕系统概述与技术挑战"></a>一、弹幕系统概述与技术挑战</h1><h2 id="（一）弹幕系统的核心特征"><a href]]>
    </summary>
    
      <category term="WebSocket" scheme="https://uwakeme.tech/tags/WebSocket/"/>
    
      <category term="实时通信" scheme="https://uwakeme.tech/tags/%E5%AE%9E%E6%97%B6%E9%80%9A%E4%BF%A1/"/>
    
      <category term="弹幕系统" scheme="https://uwakeme.tech/tags/%E5%BC%B9%E5%B9%95%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="B站" scheme="https://uwakeme.tech/tags/B%E7%AB%99/"/>
    
      <category term="前端渲染" scheme="https://uwakeme.tech/tags/%E5%89%8D%E7%AB%AF%E6%B8%B2%E6%9F%93/"/>
    
      <category term="后端架构" scheme="https://uwakeme.tech/tags/%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84/"/>
    
      <category term="视频同步" scheme="https://uwakeme.tech/tags/%E8%A7%86%E9%A2%91%E5%90%8C%E6%AD%A5/"/>
    
      <category term="软件功能解析" scheme="https://uwakeme.tech/categories/%E8%BD%AF%E4%BB%B6%E5%8A%9F%E8%83%BD%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[【软件功能解析】游戏抽奖系统技术实现：概率算法、防作弊与用户心理设计]]></title>
    <link href="https://uwakeme.tech/2025/08/06/%E8%BD%AF%E4%BB%B6%E5%8A%9F%E8%83%BD%E8%A7%A3%E6%9E%90/%E3%80%90%E8%BD%AF%E4%BB%B6%E5%8A%9F%E8%83%BD%E8%A7%A3%E6%9E%90%E3%80%91%E6%B8%B8%E6%88%8F%E6%8A%BD%E5%A5%96%E7%B3%BB%E7%BB%9F%E6%8A%80%E6%9C%AF%E5%AE%9E%E7%8E%B0%EF%BC%9A%E6%A6%82%E7%8E%87%E7%AE%97%E6%B3%95%E3%80%81%E9%98%B2%E4%BD%9C%E5%BC%8A%E4%B8%8E%E7%94%A8%E6%88%B7%E5%BF%83%E7%90%86%E8%AE%BE%E8%AE%A1/"/>
    <id>https://uwakeme.tech/2025/08/06/软件功能解析/【软件功能解析】游戏抽奖系统技术实现：概率算法、防作弊与用户心理设计/</id>
    <published>2025-08-05T16:00:00.000Z</published>
    <updated>2025-08-06T01:18:08.131Z</updated>
    <content type="html"><![CDATA[<h1 id="一、游戏抽奖系统概述"><a href="#一、游戏抽奖系统概述" class="headerlink" title="一、游戏抽奖系统概述"></a>一、游戏抽奖系统概述</h1><h2 id="（一）抽奖系统的核心作用"><a href="#（一）抽奖系统的核心作用" class="headerlink" title="（一）抽奖系统的核心作用"></a>（一）抽奖系统的核心作用</h2><ul>
<li><p><strong>商业价值</strong></p>
<ul>
<li>收入驱动：抽奖是手游的主要收入来源之一</li>
<li>用户留存：通过奖励机制提高用户粘性</li>
<li>付费转化：免费用户向付费用户的转化工具</li>
<li>生命周期延长：持续的抽奖活动延长游戏生命周期</li>
</ul>
</li>
<li><p><strong>游戏设计价值</strong></p>
<ul>
<li>资源分发：控制游戏内稀有资源的分发速度</li>
<li>平衡调节：通过概率调整维持游戏平衡</li>
<li>社交互动：抽奖结果分享增加社交传播</li>
<li>成就感营造：稀有物品获得带来的满足感</li>
</ul>
</li>
<li><p><strong>技术挑战</strong></p>
<ul>
<li>公平性保证：确保抽奖结果的真实随机性</li>
<li>防作弊：防止外挂、内部作弊等行为</li>
<li>高并发：支持大量用户同时抽奖</li>
<li>数据一致性：确保奖品库存和用户数据一致</li>
</ul>
</li>
</ul>
<h2 id="（二）抽奖系统分类"><a href="#（二）抽奖系统分类" class="headerlink" title="（二）抽奖系统分类"></a>（二）抽奖系统分类</h2><ul>
<li><p><strong>按触发方式分类</strong></p>
<ul>
<li>付费抽奖：钻石、代币等虚拟货币抽奖</li>
<li>免费抽奖：每日免费次数、活动赠送</li>
<li>任务抽奖：完成特定任务后的奖励抽奖</li>
<li>时间抽奖：定时刷新的限时抽奖</li>
</ul>
</li>
<li><p><strong>按奖品类型分类</strong></p>
<ul>
<li>装备抽奖：武器、防具、饰品等装备</li>
<li>角色抽奖：英雄、宠物、卡牌等角色</li>
<li>资源抽奖：金币、经验、材料等资源</li>
<li>道具抽奖：消耗品、强化材料等道具</li>
</ul>
</li>
<li><p><strong>按概率机制分类</strong></p>
<ul>
<li>固定概率：每次抽奖概率固定不变</li>
<li>保底机制：一定次数内必出指定品质</li>
<li>概率UP：特定时间内某些奖品概率提升</li>
<li>累积概率：连续未中奖时概率逐渐提升</li>
</ul>
</li>
</ul>
<h1 id="二、核心概率算法实现"><a href="#二、核心概率算法实现" class="headerlink" title="二、核心概率算法实现"></a>二、核心概率算法实现</h1><h2 id="（一）基础随机数生成"><a href="#（一）基础随机数生成" class="headerlink" title="（一）基础随机数生成"></a>（一）基础随机数生成</h2><ul>
<li><strong>伪随机数生成器</strong><ul>
<li>线性同余生成器（LCG）：简单快速，适合基础应用</li>
<li>梅森旋转算法（MT19937）：周期长，分布均匀</li>
<li>密码学安全随机数：防止预测，适合高安全要求</li>
<li>硬件随机数：基于物理噪声，真正随机</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span>, <span class="type">Dict</span>, <span class="type">Tuple</span></span><br><span class="line"><span class="keyword">from</span> dataclasses <span class="keyword">import</span> dataclass</span><br><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RarityLevel</span>(<span class="title class_ inherited__">Enum</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;稀有度等级&quot;&quot;&quot;</span></span><br><span class="line">    COMMON = <span class="number">1</span>      <span class="comment"># 普通 - 白色</span></span><br><span class="line">    UNCOMMON = <span class="number">2</span>    <span class="comment"># 不常见 - 绿色</span></span><br><span class="line">    RARE = <span class="number">3</span>        <span class="comment"># 稀有 - 蓝色</span></span><br><span class="line">    EPIC = <span class="number">4</span>        <span class="comment"># 史诗 - 紫色</span></span><br><span class="line">    LEGENDARY = <span class="number">5</span>   <span class="comment"># 传说 - 橙色</span></span><br><span class="line">    MYTHIC = <span class="number">6</span>      <span class="comment"># 神话 - 红色</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@dataclass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LootItem</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;抽奖物品&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">id</span>: <span class="built_in">int</span></span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line">    rarity: RarityLevel</span><br><span class="line">    base_probability: <span class="built_in">float</span>  <span class="comment"># 基础概率</span></span><br><span class="line">    current_probability: <span class="built_in">float</span>  <span class="comment"># 当前概率</span></span><br><span class="line">    max_count: <span class="built_in">int</span> = -<span class="number">1</span>  <span class="comment"># 最大数量，-1表示无限</span></span><br><span class="line">    current_count: <span class="built_in">int</span> = <span class="number">0</span>  <span class="comment"># 当前已发放数量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SecureRandomGenerator</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;安全随机数生成器&quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, seed: <span class="built_in">str</span> = <span class="literal">None</span></span>):</span><br><span class="line">        <span class="keyword">if</span> seed <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># 使用时间戳和系统随机数作为种子</span></span><br><span class="line">            seed = <span class="built_in">str</span>(time.time()) + <span class="built_in">str</span>(random.random())</span><br><span class="line">        </span><br><span class="line">        <span class="variable language_">self</span>.seed = seed</span><br><span class="line">        <span class="variable language_">self</span>.counter = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next_random</span>(<span class="params">self</span>) -&gt; <span class="built_in">float</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;生成下一个随机数 [0, 1)&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 使用SHA256哈希生成伪随机数</span></span><br><span class="line">        <span class="variable language_">self</span>.counter += <span class="number">1</span></span><br><span class="line">        hash_input = <span class="string">f&quot;<span class="subst">&#123;self.seed&#125;</span>_<span class="subst">&#123;self.counter&#125;</span>&quot;</span>.encode()</span><br><span class="line">        hash_result = hashlib.sha256(hash_input).hexdigest()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 取哈希值的前16位转换为浮点数</span></span><br><span class="line">        hex_value = <span class="built_in">int</span>(hash_result[:<span class="number">16</span>], <span class="number">16</span>)</span><br><span class="line">        max_value = <span class="number">16</span> ** <span class="number">16</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> hex_value / max_value</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">random_int</span>(<span class="params">self, min_val: <span class="built_in">int</span>, max_val: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;生成指定范围的随机整数&quot;&quot;&quot;</span></span><br><span class="line">        range_size = max_val - min_val + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> min_val + <span class="built_in">int</span>(<span class="variable language_">self</span>.next_random() * range_size)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LootBoxSystem</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;抽奖箱系统&quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, box_id: <span class="built_in">str</span>, items: <span class="type">List</span>[LootItem]</span>):</span><br><span class="line">        <span class="variable language_">self</span>.box_id = box_id</span><br><span class="line">        <span class="variable language_">self</span>.items = items</span><br><span class="line">        <span class="variable language_">self</span>.total_probability = <span class="built_in">sum</span>(item.current_probability <span class="keyword">for</span> item <span class="keyword">in</span> items)</span><br><span class="line">        <span class="variable language_">self</span>.random_generator = SecureRandomGenerator()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 保底机制配置</span></span><br><span class="line">        <span class="variable language_">self</span>.pity_config = &#123;</span><br><span class="line">            RarityLevel.EPIC: <span class="number">50</span>,      <span class="comment"># 50抽必出紫色</span></span><br><span class="line">            RarityLevel.LEGENDARY: <span class="number">90</span>,  <span class="comment"># 90抽必出橙色</span></span><br><span class="line">            RarityLevel.MYTHIC: <span class="number">300</span>    <span class="comment"># 300抽必出红色</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 用户抽奖历史（实际应用中应存储在数据库）</span></span><br><span class="line">        <span class="variable language_">self</span>.user_pity_counters = &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">draw_single</span>(<span class="params">self, user_id: <span class="built_in">str</span></span>) -&gt; LootItem:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;单次抽奖&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 检查保底机制</span></span><br><span class="line">        guaranteed_item = <span class="variable language_">self</span>._check_pity_system(user_id)</span><br><span class="line">        <span class="keyword">if</span> guaranteed_item:</span><br><span class="line">            <span class="variable language_">self</span>._reset_pity_counter(user_id, guaranteed_item.rarity)</span><br><span class="line">            <span class="keyword">return</span> guaranteed_item</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 正常概率抽奖</span></span><br><span class="line">        random_value = <span class="variable language_">self</span>.random_generator.next_random()</span><br><span class="line">        cumulative_probability = <span class="number">0.0</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 按概率选择物品</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> <span class="variable language_">self</span>.items:</span><br><span class="line">            cumulative_probability += item.current_probability / <span class="variable language_">self</span>.total_probability</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> random_value &lt;= cumulative_probability:</span><br><span class="line">                <span class="comment"># 检查物品数量限制</span></span><br><span class="line">                <span class="keyword">if</span> item.max_count &gt; <span class="number">0</span> <span class="keyword">and</span> item.current_count &gt;= item.max_count:</span><br><span class="line">                    <span class="keyword">continue</span>  <span class="comment"># 跳过已达上限的物品</span></span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 更新抽奖计数器</span></span><br><span class="line">                <span class="variable language_">self</span>._update_pity_counters(user_id)</span><br><span class="line">                <span class="variable language_">self</span>._reset_pity_counter(user_id, item.rarity)</span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 更新物品数量</span></span><br><span class="line">                item.current_count += <span class="number">1</span></span><br><span class="line">                </span><br><span class="line">                <span class="keyword">return</span> item</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 兜底：返回最后一个物品（通常是最低级别）</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.items[-<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">draw_multiple</span>(<span class="params">self, user_id: <span class="built_in">str</span>, count: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[LootItem]:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;多次抽奖&quot;&quot;&quot;</span></span><br><span class="line">        results = []</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(count):</span><br><span class="line">            item = <span class="variable language_">self</span>.draw_single(user_id)</span><br><span class="line">            results.append(item)</span><br><span class="line">        <span class="keyword">return</span> results</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_check_pity_system</span>(<span class="params">self, user_id: <span class="built_in">str</span></span>) -&gt; LootItem:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;检查保底机制&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> user_id <span class="keyword">not</span> <span class="keyword">in</span> <span class="variable language_">self</span>.user_pity_counters:</span><br><span class="line">            <span class="variable language_">self</span>.user_pity_counters[user_id] = &#123;rarity: <span class="number">0</span> <span class="keyword">for</span> rarity <span class="keyword">in</span> RarityLevel&#125;</span><br><span class="line">        </span><br><span class="line">        counters = <span class="variable language_">self</span>.user_pity_counters[user_id]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 按稀有度从高到低检查保底</span></span><br><span class="line">        <span class="keyword">for</span> rarity <span class="keyword">in</span> [RarityLevel.MYTHIC, RarityLevel.LEGENDARY, RarityLevel.EPIC]:</span><br><span class="line">            <span class="keyword">if</span> rarity <span class="keyword">in</span> <span class="variable language_">self</span>.pity_config:</span><br><span class="line">                <span class="keyword">if</span> counters[rarity] &gt;= <span class="variable language_">self</span>.pity_config[rarity]:</span><br><span class="line">                    <span class="comment"># 触发保底，返回该稀有度的物品</span></span><br><span class="line">                    eligible_items = [item <span class="keyword">for</span> item <span class="keyword">in</span> <span class="variable language_">self</span>.items <span class="keyword">if</span> item.rarity == rarity]</span><br><span class="line">                    <span class="keyword">if</span> eligible_items:</span><br><span class="line">                        <span class="keyword">return</span> random.choice(eligible_items)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_update_pity_counters</span>(<span class="params">self, user_id: <span class="built_in">str</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;更新保底计数器&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> user_id <span class="keyword">not</span> <span class="keyword">in</span> <span class="variable language_">self</span>.user_pity_counters:</span><br><span class="line">            <span class="variable language_">self</span>.user_pity_counters[user_id] = &#123;rarity: <span class="number">0</span> <span class="keyword">for</span> rarity <span class="keyword">in</span> RarityLevel&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 所有稀有度计数器+1</span></span><br><span class="line">        <span class="keyword">for</span> rarity <span class="keyword">in</span> RarityLevel:</span><br><span class="line">            <span class="variable language_">self</span>.user_pity_counters[user_id][rarity] += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_reset_pity_counter</span>(<span class="params">self, user_id: <span class="built_in">str</span>, obtained_rarity: RarityLevel</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;重置保底计数器&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> user_id <span class="keyword">not</span> <span class="keyword">in</span> <span class="variable language_">self</span>.user_pity_counters:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 重置获得稀有度及以下等级的计数器</span></span><br><span class="line">        <span class="keyword">for</span> rarity <span class="keyword">in</span> RarityLevel:</span><br><span class="line">            <span class="keyword">if</span> rarity.value &lt;= obtained_rarity.value:</span><br><span class="line">                <span class="variable language_">self</span>.user_pity_counters[user_id][rarity] = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_probability_display</span>(<span class="params">self, user_id: <span class="built_in">str</span></span>) -&gt; <span class="type">Dict</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;获取概率显示信息（用于前端展示）&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> user_id <span class="keyword">not</span> <span class="keyword">in</span> <span class="variable language_">self</span>.user_pity_counters:</span><br><span class="line">            <span class="variable language_">self</span>.user_pity_counters[user_id] = &#123;rarity: <span class="number">0</span> <span class="keyword">for</span> rarity <span class="keyword">in</span> RarityLevel&#125;</span><br><span class="line">        </span><br><span class="line">        counters = <span class="variable language_">self</span>.user_pity_counters[user_id]</span><br><span class="line">        display_info = &#123;&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> rarity <span class="keyword">in</span> RarityLevel:</span><br><span class="line">            items_of_rarity = [item <span class="keyword">for</span> item <span class="keyword">in</span> <span class="variable language_">self</span>.items <span class="keyword">if</span> item.rarity == rarity]</span><br><span class="line">            <span class="keyword">if</span> items_of_rarity:</span><br><span class="line">                total_prob = <span class="built_in">sum</span>(item.current_probability <span class="keyword">for</span> item <span class="keyword">in</span> items_of_rarity)</span><br><span class="line">                </span><br><span class="line">                display_info[rarity.name] = &#123;</span><br><span class="line">                    <span class="string">&#x27;probability&#x27;</span>: <span class="string">f&quot;<span class="subst">&#123;total_prob:<span class="number">.3</span>f&#125;</span>%&quot;</span>,</span><br><span class="line">                    <span class="string">&#x27;pity_count&#x27;</span>: counters.get(rarity, <span class="number">0</span>),</span><br><span class="line">                    <span class="string">&#x27;pity_threshold&#x27;</span>: <span class="variable language_">self</span>.pity_config.get(rarity, <span class="number">0</span>),</span><br><span class="line">                    <span class="string">&#x27;items&#x27;</span>: [&#123;<span class="string">&#x27;name&#x27;</span>: item.name, <span class="string">&#x27;probability&#x27;</span>: <span class="string">f&quot;<span class="subst">&#123;item.current_probability:<span class="number">.3</span>f&#125;</span>%&quot;</span>&#125; </span><br><span class="line">                             <span class="keyword">for</span> item <span class="keyword">in</span> items_of_rarity]</span><br><span class="line">                &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> display_info</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用示例</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_sample_loot_box</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;创建示例抽奖箱&quot;&quot;&quot;</span></span><br><span class="line">    items = [</span><br><span class="line">        <span class="comment"># 神话级 - 0.1%</span></span><br><span class="line">        LootItem(<span class="number">1</span>, <span class="string">&quot;神话武器&quot;</span>, RarityLevel.MYTHIC, <span class="number">0.1</span>, <span class="number">0.1</span>),</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 传说级 - 1.5%</span></span><br><span class="line">        LootItem(<span class="number">2</span>, <span class="string">&quot;传说剑&quot;</span>, RarityLevel.LEGENDARY, <span class="number">0.8</span>, <span class="number">0.8</span>),</span><br><span class="line">        LootItem(<span class="number">3</span>, <span class="string">&quot;传说法杖&quot;</span>, RarityLevel.LEGENDARY, <span class="number">0.7</span>, <span class="number">0.7</span>),</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 史诗级 - 8%</span></span><br><span class="line">        LootItem(<span class="number">4</span>, <span class="string">&quot;史诗护甲&quot;</span>, RarityLevel.EPIC, <span class="number">3.0</span>, <span class="number">3.0</span>),</span><br><span class="line">        LootItem(<span class="number">5</span>, <span class="string">&quot;史诗饰品&quot;</span>, RarityLevel.EPIC, <span class="number">5.0</span>, <span class="number">5.0</span>),</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 稀有级 - 20%</span></span><br><span class="line">        LootItem(<span class="number">6</span>, <span class="string">&quot;稀有材料&quot;</span>, RarityLevel.RARE, <span class="number">20.0</span>, <span class="number">20.0</span>),</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 不常见 - 30%</span></span><br><span class="line">        LootItem(<span class="number">7</span>, <span class="string">&quot;强化石&quot;</span>, RarityLevel.UNCOMMON, <span class="number">30.0</span>, <span class="number">30.0</span>),</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 普通 - 40.4%</span></span><br><span class="line">        LootItem(<span class="number">8</span>, <span class="string">&quot;金币&quot;</span>, RarityLevel.COMMON, <span class="number">40.4</span>, <span class="number">40.4</span>),</span><br><span class="line">    ]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> LootBoxSystem(<span class="string">&quot;premium_box&quot;</span>, items)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试抽奖系统</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    loot_box = create_sample_loot_box()</span><br><span class="line">    user_id = <span class="string">&quot;test_user_001&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 模拟100次抽奖</span></span><br><span class="line">    results = loot_box.draw_multiple(user_id, <span class="number">100</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 统计结果</span></span><br><span class="line">    rarity_counts = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> results:</span><br><span class="line">        rarity = item.rarity.name</span><br><span class="line">        rarity_counts[rarity] = rarity_counts.get(rarity, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;100次抽奖结果统计:&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> rarity, count <span class="keyword">in</span> rarity_counts.items():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;rarity&#125;</span>: <span class="subst">&#123;count&#125;</span>次 (<span class="subst">&#123;count&#125;</span>%)&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 显示当前概率信息</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n当前概率信息:&quot;</span>)</span><br><span class="line">    prob_info = loot_box.get_probability_display(user_id)</span><br><span class="line">    <span class="keyword">for</span> rarity, info <span class="keyword">in</span> prob_info.items():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;rarity&#125;</span>: <span class="subst">&#123;info[<span class="string">&#x27;probability&#x27;</span>]&#125;</span>, 保底计数: <span class="subst">&#123;info[<span class="string">&#x27;pity_count&#x27;</span>]&#125;</span>/<span class="subst">&#123;info[<span class="string">&#x27;pity_threshold&#x27;</span>]&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="（二）高级概率机制"><a href="#（二）高级概率机制" class="headerlink" title="（二）高级概率机制"></a>（二）高级概率机制</h2><ul>
<li><strong>动态概率调整</strong><ul>
<li>时间衰减：长时间未抽到高级物品时提升概率</li>
<li>用户行为分析：根据用户付费意愿调整概率</li>
<li>库存控制：根据物品库存动态调整概率</li>
<li>活动加成：特定时间段内概率提升</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DynamicProbabilitySystem</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;动态概率系统&quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, base_loot_box: LootBoxSystem</span>):</span><br><span class="line">        <span class="variable language_">self</span>.base_loot_box = base_loot_box</span><br><span class="line">        <span class="variable language_">self</span>.user_profiles = &#123;&#125;  <span class="comment"># 用户画像数据</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">calculate_dynamic_probability</span>(<span class="params">self, user_id: <span class="built_in">str</span>, item: LootItem</span>) -&gt; <span class="built_in">float</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;计算动态概率&quot;&quot;&quot;</span></span><br><span class="line">        base_prob = item.base_probability</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 获取用户画像</span></span><br><span class="line">        profile = <span class="variable language_">self</span>._get_user_profile(user_id)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 1. 时间衰减加成</span></span><br><span class="line">        time_multiplier = <span class="variable language_">self</span>._calculate_time_multiplier(user_id, item.rarity)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 2. 付费意愿加成</span></span><br><span class="line">        payment_multiplier = <span class="variable language_">self</span>._calculate_payment_multiplier(profile)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 3. 库存控制</span></span><br><span class="line">        inventory_multiplier = <span class="variable language_">self</span>._calculate_inventory_multiplier(item)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 4. 活动加成</span></span><br><span class="line">        event_multiplier = <span class="variable language_">self</span>._calculate_event_multiplier(item)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 综合计算最终概率</span></span><br><span class="line">        final_probability = base_prob * time_multiplier * payment_multiplier * inventory_multiplier * event_multiplier</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 确保概率在合理范围内</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(final_probability, base_prob * <span class="number">5.0</span>)  <span class="comment"># 最多5倍加成</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_get_user_profile</span>(<span class="params">self, user_id: <span class="built_in">str</span></span>) -&gt; <span class="type">Dict</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;获取用户画像&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> user_id <span class="keyword">not</span> <span class="keyword">in</span> <span class="variable language_">self</span>.user_profiles:</span><br><span class="line">            <span class="variable language_">self</span>.user_profiles[user_id] = &#123;</span><br><span class="line">                <span class="string">&#x27;total_spent&#x27;</span>: <span class="number">0.0</span>,        <span class="comment"># 总消费金额</span></span><br><span class="line">                <span class="string">&#x27;last_payment_time&#x27;</span>: <span class="number">0</span>,    <span class="comment"># 最后付费时间</span></span><br><span class="line">                <span class="string">&#x27;draw_count&#x27;</span>: <span class="number">0</span>,           <span class="comment"># 总抽奖次数</span></span><br><span class="line">                <span class="string">&#x27;last_rare_time&#x27;</span>: <span class="number">0</span>,       <span class="comment"># 最后获得稀有物品时间</span></span><br><span class="line">                <span class="string">&#x27;session_count&#x27;</span>: <span class="number">0</span>,        <span class="comment"># 会话次数</span></span><br><span class="line">                <span class="string">&#x27;avg_session_duration&#x27;</span>: <span class="number">0</span>  <span class="comment"># 平均会话时长</span></span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.user_profiles[user_id]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_calculate_time_multiplier</span>(<span class="params">self, user_id: <span class="built_in">str</span>, rarity: RarityLevel</span>) -&gt; <span class="built_in">float</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;计算时间衰减加成&quot;&quot;&quot;</span></span><br><span class="line">        profile = <span class="variable language_">self</span>._get_user_profile(user_id)</span><br><span class="line">        current_time = time.time()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 距离上次获得该稀有度物品的时间</span></span><br><span class="line">        time_since_last = current_time - profile.get(<span class="string">&#x27;last_rare_time&#x27;</span>, current_time - <span class="number">86400</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 根据稀有度设置不同的时间阈值</span></span><br><span class="line">        time_thresholds = &#123;</span><br><span class="line">            RarityLevel.EPIC: <span class="number">3600</span>,      <span class="comment"># 1小时</span></span><br><span class="line">            RarityLevel.LEGENDARY: <span class="number">7200</span>,  <span class="comment"># 2小时</span></span><br><span class="line">            RarityLevel.MYTHIC: <span class="number">14400</span>    <span class="comment"># 4小时</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        threshold = time_thresholds.get(rarity, <span class="number">3600</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> time_since_last &gt; threshold:</span><br><span class="line">            <span class="comment"># 超过阈值时间，开始增加概率</span></span><br><span class="line">            multiplier = <span class="number">1.0</span> + <span class="built_in">min</span>((time_since_last - threshold) / threshold * <span class="number">0.5</span>, <span class="number">2.0</span>)</span><br><span class="line">            <span class="keyword">return</span> multiplier</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="number">1.0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_calculate_payment_multiplier</span>(<span class="params">self, profile: <span class="type">Dict</span></span>) -&gt; <span class="built_in">float</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;计算付费意愿加成&quot;&quot;&quot;</span></span><br><span class="line">        total_spent = profile.get(<span class="string">&#x27;total_spent&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">        last_payment_time = profile.get(<span class="string">&#x27;last_payment_time&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">        current_time = time.time()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 高付费用户给予一定加成</span></span><br><span class="line">        <span class="keyword">if</span> total_spent &gt; <span class="number">1000</span>:  <span class="comment"># 高付费用户</span></span><br><span class="line">            base_multiplier = <span class="number">1.2</span></span><br><span class="line">        <span class="keyword">elif</span> total_spent &gt; <span class="number">100</span>:  <span class="comment"># 中付费用户</span></span><br><span class="line">            base_multiplier = <span class="number">1.1</span></span><br><span class="line">        <span class="keyword">else</span>:  <span class="comment"># 低付费用户</span></span><br><span class="line">            base_multiplier = <span class="number">1.0</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 长时间未付费的用户给予诱导性加成</span></span><br><span class="line">        days_since_payment = (current_time - last_payment_time) / <span class="number">86400</span></span><br><span class="line">        <span class="keyword">if</span> days_since_payment &gt; <span class="number">7</span>:  <span class="comment"># 7天未付费</span></span><br><span class="line">            base_multiplier *= <span class="number">1.3</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> base_multiplier</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_calculate_inventory_multiplier</span>(<span class="params">self, item: LootItem</span>) -&gt; <span class="built_in">float</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;计算库存控制加成&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> item.max_count &lt;= <span class="number">0</span>:  <span class="comment"># 无限制物品</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">1.0</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 计算库存剩余比例</span></span><br><span class="line">        remaining_ratio = (item.max_count - item.current_count) / item.max_count</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> remaining_ratio &lt; <span class="number">0.1</span>:  <span class="comment"># 库存不足10%</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0.1</span>  <span class="comment"># 大幅降低概率</span></span><br><span class="line">        <span class="keyword">elif</span> remaining_ratio &lt; <span class="number">0.3</span>:  <span class="comment"># 库存不足30%</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0.5</span>  <span class="comment"># 适度降低概率</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="number">1.0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_calculate_event_multiplier</span>(<span class="params">self, item: LootItem</span>) -&gt; <span class="built_in">float</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;计算活动加成&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 这里可以根据当前活动配置返回不同的加成</span></span><br><span class="line">        <span class="comment"># 示例：周末双倍概率</span></span><br><span class="line">        <span class="keyword">import</span> datetime</span><br><span class="line">        current_time = datetime.datetime.now()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> current_time.weekday() &gt;= <span class="number">5</span>:  <span class="comment"># 周六日</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">2.0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="number">1.0</span></span><br></pre></td></tr></table></figure>

<h2 id="（三）保底机制实现"><a href="#（三）保底机制实现" class="headerlink" title="（三）保底机制实现"></a>（三）保底机制实现</h2><ul>
<li><strong>硬保底</strong>：固定次数内必定获得指定品质物品</li>
<li><strong>软保底</strong>：接近保底次数时概率逐渐提升</li>
<li><strong>分层保底</strong>：不同稀有度有独立的保底计数</li>
<li><strong>重置机制</strong>：获得高品质物品后重置相应保底计数</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AdvancedPitySystem</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;高级保底系统&quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 保底配置</span></span><br><span class="line">        <span class="variable language_">self</span>.pity_configs = &#123;</span><br><span class="line">            RarityLevel.EPIC: &#123;</span><br><span class="line">                <span class="string">&#x27;hard_pity&#x27;</span>: <span class="number">50</span>,      <span class="comment"># 硬保底50抽</span></span><br><span class="line">                <span class="string">&#x27;soft_pity_start&#x27;</span>: <span class="number">40</span>, <span class="comment"># 软保底从40抽开始</span></span><br><span class="line">                <span class="string">&#x27;soft_pity_increment&#x27;</span>: <span class="number">0.06</span>  <span class="comment"># 每抽增加6%概率</span></span><br><span class="line">            &#125;,</span><br><span class="line">            RarityLevel.LEGENDARY: &#123;</span><br><span class="line">                <span class="string">&#x27;hard_pity&#x27;</span>: <span class="number">90</span>,</span><br><span class="line">                <span class="string">&#x27;soft_pity_start&#x27;</span>: <span class="number">75</span>,</span><br><span class="line">                <span class="string">&#x27;soft_pity_increment&#x27;</span>: <span class="number">0.06</span></span><br><span class="line">            &#125;,</span><br><span class="line">            RarityLevel.MYTHIC: &#123;</span><br><span class="line">                <span class="string">&#x27;hard_pity&#x27;</span>: <span class="number">300</span>,</span><br><span class="line">                <span class="string">&#x27;soft_pity_start&#x27;</span>: <span class="number">250</span>,</span><br><span class="line">                <span class="string">&#x27;soft_pity_increment&#x27;</span>: <span class="number">0.02</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">calculate_pity_probability</span>(<span class="params">self, user_id: <span class="built_in">str</span>, rarity: RarityLevel, </span></span><br><span class="line"><span class="params">                                 base_probability: <span class="built_in">float</span>, current_count: <span class="built_in">int</span></span>) -&gt; <span class="built_in">float</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;计算保底概率&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> rarity <span class="keyword">not</span> <span class="keyword">in</span> <span class="variable language_">self</span>.pity_configs:</span><br><span class="line">            <span class="keyword">return</span> base_probability</span><br><span class="line">        </span><br><span class="line">        config = <span class="variable language_">self</span>.pity_configs[rarity]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 硬保底检查</span></span><br><span class="line">        <span class="keyword">if</span> current_count &gt;= config[<span class="string">&#x27;hard_pity&#x27;</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1.0</span>  <span class="comment"># 100%概率</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 软保底检查</span></span><br><span class="line">        <span class="keyword">if</span> current_count &gt;= config[<span class="string">&#x27;soft_pity_start&#x27;</span>]:</span><br><span class="line">            <span class="comment"># 软保底期间，每抽增加一定概率</span></span><br><span class="line">            additional_draws = current_count - config[<span class="string">&#x27;soft_pity_start&#x27;</span>]</span><br><span class="line">            additional_probability = additional_draws * config[<span class="string">&#x27;soft_pity_increment&#x27;</span>]</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">min</span>(base_probability + additional_probability, <span class="number">0.5</span>)  <span class="comment"># 最高50%</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> base_probability</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">should_trigger_pity</span>(<span class="params">self, user_id: <span class="built_in">str</span>, rarity: RarityLevel, current_count: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;判断是否触发保底&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> rarity <span class="keyword">not</span> <span class="keyword">in</span> <span class="variable language_">self</span>.pity_configs:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> current_count &gt;= <span class="variable language_">self</span>.pity_configs[rarity][<span class="string">&#x27;hard_pity&#x27;</span>]</span><br></pre></td></tr></table></figure>

<h1 id="三、防作弊与安全机制"><a href="#三、防作弊与安全机制" class="headerlink" title="三、防作弊与安全机制"></a>三、防作弊与安全机制</h1><h2 id="（一）服务端验证"><a href="#（一）服务端验证" class="headerlink" title="（一）服务端验证"></a>（一）服务端验证</h2><ul>
<li><strong>双重验证</strong>：客户端请求+服务端验证</li>
<li><strong>时间戳验证</strong>：防止重放攻击</li>
<li><strong>签名验证</strong>：请求参数数字签名</li>
<li><strong>频率限制</strong>：防止异常高频抽奖</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hmac</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Optional</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AntiCheatSystem</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;防作弊系统&quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, secret_key: <span class="built_in">str</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.secret_key = secret_key</span><br><span class="line">        <span class="variable language_">self</span>.user_request_history = &#123;&#125;  <span class="comment"># 用户请求历史</span></span><br><span class="line">        <span class="variable language_">self</span>.rate_limits = &#123;</span><br><span class="line">            <span class="string">&#x27;draw_single&#x27;</span>: &#123;<span class="string">&#x27;count&#x27;</span>: <span class="number">100</span>, <span class="string">&#x27;window&#x27;</span>: <span class="number">3600</span>&#125;,    <span class="comment"># 1小时100次单抽</span></span><br><span class="line">            <span class="string">&#x27;draw_multiple&#x27;</span>: &#123;<span class="string">&#x27;count&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;window&#x27;</span>: <span class="number">3600</span>&#125;,   <span class="comment"># 1小时20次十连抽</span></span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">validate_draw_request</span>(<span class="params">self, user_id: <span class="built_in">str</span>, request_data: <span class="type">Dict</span></span>) -&gt; <span class="type">Tuple</span>[<span class="built_in">bool</span>, <span class="built_in">str</span>]:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;验证抽奖请求&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 1. 验证请求签名</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>._verify_signature(request_data):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span>, <span class="string">&quot;请求签名验证失败&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 2. 验证时间戳</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>._verify_timestamp(request_data.get(<span class="string">&#x27;timestamp&#x27;</span>)):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span>, <span class="string">&quot;请求时间戳无效&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 3. 验证用户权限</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>._verify_user_permission(user_id, request_data):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span>, <span class="string">&quot;用户权限不足&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 4. 验证频率限制</span></span><br><span class="line">        action = request_data.get(<span class="string">&#x27;action&#x27;</span>, <span class="string">&#x27;draw_single&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>._check_rate_limit(user_id, action):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span>, <span class="string">&quot;请求频率过高&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 5. 验证游戏状态</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>._verify_game_state(user_id, request_data):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span>, <span class="string">&quot;游戏状态异常&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span>, <span class="string">&quot;验证通过&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_verify_signature</span>(<span class="params">self, request_data: <span class="type">Dict</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;验证请求签名&quot;&quot;&quot;</span></span><br><span class="line">        received_signature = request_data.pop(<span class="string">&#x27;signature&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 按键名排序并拼接参数</span></span><br><span class="line">        sorted_params = <span class="built_in">sorted</span>(request_data.items())</span><br><span class="line">        param_string = <span class="string">&#x27;&amp;&#x27;</span>.join([<span class="string">f&quot;<span class="subst">&#123;k&#125;</span>=<span class="subst">&#123;v&#125;</span>&quot;</span> <span class="keyword">for</span> k, v <span class="keyword">in</span> sorted_params])</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 计算HMAC签名</span></span><br><span class="line">        expected_signature = hmac.new(</span><br><span class="line">            <span class="variable language_">self</span>.secret_key.encode(),</span><br><span class="line">            param_string.encode(),</span><br><span class="line">            hashlib.sha256</span><br><span class="line">        ).hexdigest()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> hmac.compare_digest(received_signature, expected_signature)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_verify_timestamp</span>(<span class="params">self, timestamp: <span class="type">Optional</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;验证时间戳&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> timestamp:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">        current_time = <span class="built_in">int</span>(datetime.now().timestamp())</span><br><span class="line">        time_diff = <span class="built_in">abs</span>(current_time - timestamp)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 允许5分钟的时间偏差</span></span><br><span class="line">        <span class="keyword">return</span> time_diff &lt;= <span class="number">300</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_verify_user_permission</span>(<span class="params">self, user_id: <span class="built_in">str</span>, request_data: <span class="type">Dict</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;验证用户权限&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 检查用户是否被封禁</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>._is_user_banned(user_id):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 检查用户资源是否足够</span></span><br><span class="line">        required_currency = request_data.get(<span class="string">&#x27;cost&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>._check_user_currency(user_id, required_currency):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_check_rate_limit</span>(<span class="params">self, user_id: <span class="built_in">str</span>, action: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;检查频率限制&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> action <span class="keyword">not</span> <span class="keyword">in</span> <span class="variable language_">self</span>.rate_limits:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line">        limit_config = <span class="variable language_">self</span>.rate_limits[action]</span><br><span class="line">        current_time = datetime.now()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 初始化用户请求历史</span></span><br><span class="line">        <span class="keyword">if</span> user_id <span class="keyword">not</span> <span class="keyword">in</span> <span class="variable language_">self</span>.user_request_history:</span><br><span class="line">            <span class="variable language_">self</span>.user_request_history[user_id] = &#123;&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> action <span class="keyword">not</span> <span class="keyword">in</span> <span class="variable language_">self</span>.user_request_history[user_id]:</span><br><span class="line">            <span class="variable language_">self</span>.user_request_history[user_id][action] = []</span><br><span class="line">        </span><br><span class="line">        request_history = <span class="variable language_">self</span>.user_request_history[user_id][action]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 清理过期的请求记录</span></span><br><span class="line">        window_start = current_time - timedelta(seconds=limit_config[<span class="string">&#x27;window&#x27;</span>])</span><br><span class="line">        request_history[:] = [req_time <span class="keyword">for</span> req_time <span class="keyword">in</span> request_history <span class="keyword">if</span> req_time &gt; window_start]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 检查是否超过限制</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(request_history) &gt;= limit_config[<span class="string">&#x27;count&#x27;</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 记录当前请求</span></span><br><span class="line">        request_history.append(current_time)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_verify_game_state</span>(<span class="params">self, user_id: <span class="built_in">str</span>, request_data: <span class="type">Dict</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;验证游戏状态&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 检查用户是否在线</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>._is_user_online(user_id):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 检查客户端版本</span></span><br><span class="line">        client_version = request_data.get(<span class="string">&#x27;client_version&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>._is_version_supported(client_version):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 检查设备信息一致性</span></span><br><span class="line">        device_id = request_data.get(<span class="string">&#x27;device_id&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>._verify_device_consistency(user_id, device_id):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_is_user_banned</span>(<span class="params">self, user_id: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;检查用户是否被封禁&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 实际实现中应查询数据库</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_check_user_currency</span>(<span class="params">self, user_id: <span class="built_in">str</span>, required_amount: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;检查用户货币是否足够&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 实际实现中应查询用户资产</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_is_user_online</span>(<span class="params">self, user_id: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;检查用户是否在线&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 实际实现中应检查用户会话状态</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_is_version_supported</span>(<span class="params">self, version: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;检查客户端版本是否支持&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 实际实现中应检查版本兼容性</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_verify_device_consistency</span>(<span class="params">self, user_id: <span class="built_in">str</span>, device_id: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;验证设备信息一致性&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 实际实现中应检查设备绑定信息</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ServerSideLootSystem</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;服务端抽奖系统&quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, anti_cheat: AntiCheatSystem</span>):</span><br><span class="line">        <span class="variable language_">self</span>.anti_cheat = anti_cheat</span><br><span class="line">        <span class="variable language_">self</span>.loot_boxes = &#123;&#125;  <span class="comment"># 抽奖箱配置</span></span><br><span class="line">        <span class="variable language_">self</span>.user_inventories = &#123;&#125;  <span class="comment"># 用户背包</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_draw_request</span>(<span class="params">self, user_id: <span class="built_in">str</span>, request_data: <span class="type">Dict</span></span>) -&gt; <span class="type">Dict</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;处理抽奖请求&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 1. 防作弊验证</span></span><br><span class="line">        is_valid, error_msg = <span class="variable language_">self</span>.anti_cheat.validate_draw_request(user_id, request_data)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> is_valid:</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="string">&#x27;success&#x27;</span>: <span class="literal">False</span>,</span><br><span class="line">                <span class="string">&#x27;error&#x27;</span>: error_msg,</span><br><span class="line">                <span class="string">&#x27;error_code&#x27;</span>: <span class="string">&#x27;VALIDATION_FAILED&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 2. 扣除用户资源</span></span><br><span class="line">            cost = request_data.get(<span class="string">&#x27;cost&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>._deduct_user_currency(user_id, cost):</span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    <span class="string">&#x27;success&#x27;</span>: <span class="literal">False</span>,</span><br><span class="line">                    <span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;资源不足&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;error_code&#x27;</span>: <span class="string">&#x27;INSUFFICIENT_CURRENCY&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 3. 执行抽奖</span></span><br><span class="line">            box_id = request_data.get(<span class="string">&#x27;box_id&#x27;</span>)</span><br><span class="line">            draw_count = request_data.get(<span class="string">&#x27;count&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">            </span><br><span class="line">            loot_box = <span class="variable language_">self</span>.loot_boxes.get(box_id)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> loot_box:</span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    <span class="string">&#x27;success&#x27;</span>: <span class="literal">False</span>,</span><br><span class="line">                    <span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;抽奖箱不存在&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;error_code&#x27;</span>: <span class="string">&#x27;INVALID_LOOT_BOX&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 执行抽奖逻辑</span></span><br><span class="line">            results = loot_box.draw_multiple(user_id, draw_count)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 4. 发放奖励到用户背包</span></span><br><span class="line">            <span class="variable language_">self</span>._add_items_to_inventory(user_id, results)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 5. 记录抽奖日志</span></span><br><span class="line">            <span class="variable language_">self</span>._log_draw_result(user_id, box_id, results, cost)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 6. 返回结果</span></span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="string">&#x27;success&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">                <span class="string">&#x27;results&#x27;</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">&#x27;item_id&#x27;</span>: item.<span class="built_in">id</span>,</span><br><span class="line">                        <span class="string">&#x27;name&#x27;</span>: item.name,</span><br><span class="line">                        <span class="string">&#x27;rarity&#x27;</span>: item.rarity.name,</span><br><span class="line">                        <span class="string">&#x27;count&#x27;</span>: <span class="number">1</span></span><br><span class="line">                    &#125; <span class="keyword">for</span> item <span class="keyword">in</span> results</span><br><span class="line">                ],</span><br><span class="line">                <span class="string">&#x27;remaining_currency&#x27;</span>: <span class="variable language_">self</span>._get_user_currency(user_id)</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="comment"># 异常处理：回滚用户资源</span></span><br><span class="line">            <span class="variable language_">self</span>._refund_user_currency(user_id, cost)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="string">&#x27;success&#x27;</span>: <span class="literal">False</span>,</span><br><span class="line">                <span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;系统错误，请重试&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;error_code&#x27;</span>: <span class="string">&#x27;SYSTEM_ERROR&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_deduct_user_currency</span>(<span class="params">self, user_id: <span class="built_in">str</span>, amount: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;扣除用户货币&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 实际实现中应操作数据库</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_add_items_to_inventory</span>(<span class="params">self, user_id: <span class="built_in">str</span>, items: <span class="type">List</span>[LootItem]</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;添加物品到用户背包&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> user_id <span class="keyword">not</span> <span class="keyword">in</span> <span class="variable language_">self</span>.user_inventories:</span><br><span class="line">            <span class="variable language_">self</span>.user_inventories[user_id] = &#123;&#125;</span><br><span class="line">        </span><br><span class="line">        inventory = <span class="variable language_">self</span>.user_inventories[user_id]</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">            <span class="keyword">if</span> item.<span class="built_in">id</span> <span class="keyword">in</span> inventory:</span><br><span class="line">                inventory[item.<span class="built_in">id</span>][<span class="string">&#x27;count&#x27;</span>] += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                inventory[item.<span class="built_in">id</span>] = &#123;</span><br><span class="line">                    <span class="string">&#x27;name&#x27;</span>: item.name,</span><br><span class="line">                    <span class="string">&#x27;rarity&#x27;</span>: item.rarity.name,</span><br><span class="line">                    <span class="string">&#x27;count&#x27;</span>: <span class="number">1</span></span><br><span class="line">                &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_log_draw_result</span>(<span class="params">self, user_id: <span class="built_in">str</span>, box_id: <span class="built_in">str</span>, results: <span class="type">List</span>[LootItem], cost: <span class="built_in">int</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;记录抽奖日志&quot;&quot;&quot;</span></span><br><span class="line">        log_entry = &#123;</span><br><span class="line">            <span class="string">&#x27;user_id&#x27;</span>: user_id,</span><br><span class="line">            <span class="string">&#x27;box_id&#x27;</span>: box_id,</span><br><span class="line">            <span class="string">&#x27;timestamp&#x27;</span>: datetime.now().isoformat(),</span><br><span class="line">            <span class="string">&#x27;cost&#x27;</span>: cost,</span><br><span class="line">            <span class="string">&#x27;results&#x27;</span>: [&#123;<span class="string">&#x27;item_id&#x27;</span>: item.<span class="built_in">id</span>, <span class="string">&#x27;rarity&#x27;</span>: item.rarity.name&#125; <span class="keyword">for</span> item <span class="keyword">in</span> results]</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 实际实现中应写入日志系统</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;抽奖日志: <span class="subst">&#123;json.dumps(log_entry, ensure_ascii=<span class="literal">False</span>)&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_get_user_currency</span>(<span class="params">self, user_id: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;获取用户货币余额&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 实际实现中应查询数据库</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1000</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_refund_user_currency</span>(<span class="params">self, user_id: <span class="built_in">str</span>, amount: <span class="built_in">int</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;退还用户货币&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 实际实现中应操作数据库</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<h2 id="（二）数据完整性保护"><a href="#（二）数据完整性保护" class="headerlink" title="（二）数据完整性保护"></a>（二）数据完整性保护</h2><ul>
<li><strong>数据库事务</strong>：确保抽奖操作的原子性</li>
<li><strong>日志审计</strong>：完整记录所有抽奖操作</li>
<li><strong>数据备份</strong>：定期备份关键数据</li>
<li><strong>异常监控</strong>：监控异常的抽奖行为</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> contextlib <span class="keyword">import</span> contextmanager</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LootSystemDatabase</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;抽奖系统数据库&quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, db_path: <span class="built_in">str</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.db_path = db_path</span><br><span class="line">        <span class="variable language_">self</span>._init_database()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_init_database</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化数据库表&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">with</span> <span class="variable language_">self</span>.get_connection() <span class="keyword">as</span> conn:</span><br><span class="line">            <span class="comment"># 用户资产表</span></span><br><span class="line">            conn.execute(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">                CREATE TABLE IF NOT EXISTS user_assets (</span></span><br><span class="line"><span class="string">                    user_id TEXT PRIMARY KEY,</span></span><br><span class="line"><span class="string">                    currency INTEGER DEFAULT 0,</span></span><br><span class="line"><span class="string">                    last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP</span></span><br><span class="line"><span class="string">                )</span></span><br><span class="line"><span class="string">            &#x27;&#x27;&#x27;</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 用户背包表</span></span><br><span class="line">            conn.execute(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">                CREATE TABLE IF NOT EXISTS user_inventory (</span></span><br><span class="line"><span class="string">                    id INTEGER PRIMARY KEY AUTOINCREMENT,</span></span><br><span class="line"><span class="string">                    user_id TEXT,</span></span><br><span class="line"><span class="string">                    item_id INTEGER,</span></span><br><span class="line"><span class="string">                    item_name TEXT,</span></span><br><span class="line"><span class="string">                    rarity TEXT,</span></span><br><span class="line"><span class="string">                    count INTEGER DEFAULT 1,</span></span><br><span class="line"><span class="string">                    obtained_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP</span></span><br><span class="line"><span class="string">                )</span></span><br><span class="line"><span class="string">            &#x27;&#x27;&#x27;</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 抽奖记录表</span></span><br><span class="line">            conn.execute(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">                CREATE TABLE IF NOT EXISTS draw_logs (</span></span><br><span class="line"><span class="string">                    id INTEGER PRIMARY KEY AUTOINCREMENT,</span></span><br><span class="line"><span class="string">                    user_id TEXT,</span></span><br><span class="line"><span class="string">                    box_id TEXT,</span></span><br><span class="line"><span class="string">                    cost INTEGER,</span></span><br><span class="line"><span class="string">                    results TEXT,  -- JSON格式的抽奖结果</span></span><br><span class="line"><span class="string">                    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,</span></span><br><span class="line"><span class="string">                    ip_address TEXT,</span></span><br><span class="line"><span class="string">                    device_id TEXT</span></span><br><span class="line"><span class="string">                )</span></span><br><span class="line"><span class="string">            &#x27;&#x27;&#x27;</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 保底计数表</span></span><br><span class="line">            conn.execute(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">                CREATE TABLE IF NOT EXISTS pity_counters (</span></span><br><span class="line"><span class="string">                    user_id TEXT,</span></span><br><span class="line"><span class="string">                    rarity TEXT,</span></span><br><span class="line"><span class="string">                    count INTEGER DEFAULT 0,</span></span><br><span class="line"><span class="string">                    last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP,</span></span><br><span class="line"><span class="string">                    PRIMARY KEY (user_id, rarity)</span></span><br><span class="line"><span class="string">                )</span></span><br><span class="line"><span class="string">            &#x27;&#x27;&#x27;</span>)</span><br><span class="line">            </span><br><span class="line">            conn.commit()</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @contextmanager</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_connection</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;获取数据库连接（上下文管理器）&quot;&quot;&quot;</span></span><br><span class="line">        conn = sqlite3.connect(<span class="variable language_">self</span>.db_path)</span><br><span class="line">        conn.row_factory = sqlite3.Row  <span class="comment"># 使结果可以按列名访问</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">yield</span> conn</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            conn.close()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">execute_draw_transaction</span>(<span class="params">self, user_id: <span class="built_in">str</span>, box_id: <span class="built_in">str</span>, cost: <span class="built_in">int</span>, </span></span><br><span class="line"><span class="params">                               results: <span class="type">List</span>[LootItem]</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;执行抽奖事务&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> <span class="variable language_">self</span>.get_connection() <span class="keyword">as</span> conn:</span><br><span class="line">                <span class="comment"># 开始事务</span></span><br><span class="line">                conn.execute(<span class="string">&#x27;BEGIN TRANSACTION&#x27;</span>)</span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 1. 检查并扣除用户货币</span></span><br><span class="line">                cursor = conn.execute(</span><br><span class="line">                    <span class="string">&#x27;SELECT currency FROM user_assets WHERE user_id = ?&#x27;</span>,</span><br><span class="line">                    (user_id,)</span><br><span class="line">                )</span><br><span class="line">                row = cursor.fetchone()</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> row <span class="keyword">or</span> row[<span class="string">&#x27;currency&#x27;</span>] &lt; cost:</span><br><span class="line">                    conn.execute(<span class="string">&#x27;ROLLBACK&#x27;</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 扣除货币</span></span><br><span class="line">                conn.execute(</span><br><span class="line">                    <span class="string">&#x27;UPDATE user_assets SET currency = currency - ?, last_updated = ? WHERE user_id = ?&#x27;</span>,</span><br><span class="line">                    (cost, datetime.now(), user_id)</span><br><span class="line">                )</span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 2. 添加物品到背包</span></span><br><span class="line">                <span class="keyword">for</span> item <span class="keyword">in</span> results:</span><br><span class="line">                    conn.execute(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">                        INSERT INTO user_inventory (user_id, item_id, item_name, rarity, count)</span></span><br><span class="line"><span class="string">                        VALUES (?, ?, ?, ?, 1)</span></span><br><span class="line"><span class="string">                    &#x27;&#x27;&#x27;</span>, (user_id, item.<span class="built_in">id</span>, item.name, item.rarity.name))</span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 3. 记录抽奖日志</span></span><br><span class="line">                results_json = json.dumps([</span><br><span class="line">                    &#123;<span class="string">&#x27;item_id&#x27;</span>: item.<span class="built_in">id</span>, <span class="string">&#x27;name&#x27;</span>: item.name, <span class="string">&#x27;rarity&#x27;</span>: item.rarity.name&#125;</span><br><span class="line">                    <span class="keyword">for</span> item <span class="keyword">in</span> results</span><br><span class="line">                ])</span><br><span class="line">                </span><br><span class="line">                conn.execute(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">                    INSERT INTO draw_logs (user_id, box_id, cost, results)</span></span><br><span class="line"><span class="string">                    VALUES (?, ?, ?, ?)</span></span><br><span class="line"><span class="string">                &#x27;&#x27;&#x27;</span>, (user_id, box_id, cost, results_json))</span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 4. 更新保底计数</span></span><br><span class="line">                <span class="keyword">for</span> rarity <span class="keyword">in</span> RarityLevel:</span><br><span class="line">                    <span class="comment"># 增加计数</span></span><br><span class="line">                    conn.execute(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">                        INSERT OR REPLACE INTO pity_counters (user_id, rarity, count, last_updated)</span></span><br><span class="line"><span class="string">                        VALUES (?, ?, COALESCE((SELECT count FROM pity_counters WHERE user_id = ? AND rarity = ?), 0) + 1, ?)</span></span><br><span class="line"><span class="string">                    &#x27;&#x27;&#x27;</span>, (user_id, rarity.name, user_id, rarity.name, datetime.now()))</span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 重置获得稀有度的计数</span></span><br><span class="line">                <span class="keyword">for</span> item <span class="keyword">in</span> results:</span><br><span class="line">                    conn.execute(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">                        UPDATE pity_counters </span></span><br><span class="line"><span class="string">                        SET count = 0, last_updated = ?</span></span><br><span class="line"><span class="string">                        WHERE user_id = ? AND rarity = ?</span></span><br><span class="line"><span class="string">                    &#x27;&#x27;&#x27;</span>, (datetime.now(), user_id, item.rarity.name))</span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 提交事务</span></span><br><span class="line">                conn.execute(<span class="string">&#x27;COMMIT&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">                </span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;抽奖事务执行失败: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_user_pity_counters</span>(<span class="params">self, user_id: <span class="built_in">str</span></span>) -&gt; <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="built_in">int</span>]:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;获取用户保底计数&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">with</span> <span class="variable language_">self</span>.get_connection() <span class="keyword">as</span> conn:</span><br><span class="line">            cursor = conn.execute(</span><br><span class="line">                <span class="string">&#x27;SELECT rarity, count FROM pity_counters WHERE user_id = ?&#x27;</span>,</span><br><span class="line">                (user_id,)</span><br><span class="line">            )</span><br><span class="line">            </span><br><span class="line">            counters = &#123;&#125;</span><br><span class="line">            <span class="keyword">for</span> row <span class="keyword">in</span> cursor.fetchall():</span><br><span class="line">                counters[row[<span class="string">&#x27;rarity&#x27;</span>]] = row[<span class="string">&#x27;count&#x27;</span>]</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> counters</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_draw_statistics</span>(<span class="params">self, user_id: <span class="built_in">str</span> = <span class="literal">None</span>, days: <span class="built_in">int</span> = <span class="number">30</span></span>) -&gt; <span class="type">Dict</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;获取抽奖统计信息&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">with</span> <span class="variable language_">self</span>.get_connection() <span class="keyword">as</span> conn:</span><br><span class="line">            base_query = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">                SELECT </span></span><br><span class="line"><span class="string">                    COUNT(*) as total_draws,</span></span><br><span class="line"><span class="string">                    SUM(cost) as total_cost,</span></span><br><span class="line"><span class="string">                    AVG(cost) as avg_cost</span></span><br><span class="line"><span class="string">                FROM draw_logs </span></span><br><span class="line"><span class="string">                WHERE timestamp &gt;= datetime(&#x27;now&#x27;, &#x27;-&#123;&#125; days&#x27;)</span></span><br><span class="line"><span class="string">            &#x27;&#x27;&#x27;</span>.<span class="built_in">format</span>(days)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> user_id:</span><br><span class="line">                base_query += <span class="string">&#x27; AND user_id = ?&#x27;</span></span><br><span class="line">                cursor = conn.execute(base_query, (user_id,))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                cursor = conn.execute(base_query)</span><br><span class="line">            </span><br><span class="line">            stats = cursor.fetchone()</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="string">&#x27;total_draws&#x27;</span>: stats[<span class="string">&#x27;total_draws&#x27;</span>] <span class="keyword">or</span> <span class="number">0</span>,</span><br><span class="line">                <span class="string">&#x27;total_cost&#x27;</span>: stats[<span class="string">&#x27;total_cost&#x27;</span>] <span class="keyword">or</span> <span class="number">0</span>,</span><br><span class="line">                <span class="string">&#x27;avg_cost&#x27;</span>: stats[<span class="string">&#x27;avg_cost&#x27;</span>] <span class="keyword">or</span> <span class="number">0</span></span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>

<h1 id="四、用户体验与心理设计"><a href="#四、用户体验与心理设计" class="headerlink" title="四、用户体验与心理设计"></a>四、用户体验与心理设计</h1><h2 id="（一）视觉效果设计"><a href="#（一）视觉效果设计" class="headerlink" title="（一）视觉效果设计"></a>（一）视觉效果设计</h2><ul>
<li><strong>动画效果</strong>：抽奖过程的视觉反馈</li>
<li><strong>音效设计</strong>：不同稀有度的音效区分</li>
<li><strong>特效展示</strong>：稀有物品的特殊展示效果</li>
<li><strong>UI交互</strong>：流畅的操作体验</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 前端抽奖动画系统</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LootBoxAnimation</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">container, config</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">container</span> = container;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">config</span> = &#123;</span><br><span class="line">            <span class="attr">animationDuration</span>: <span class="number">3000</span>,  <span class="comment">// 动画总时长</span></span><br><span class="line">            <span class="attr">suspenseDuration</span>: <span class="number">2000</span>,   <span class="comment">// 悬念阶段时长</span></span><br><span class="line">            <span class="attr">revealDuration</span>: <span class="number">1000</span>,     <span class="comment">// 揭晓阶段时长</span></span><br><span class="line">            ...config</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">audioManager</span> = <span class="keyword">new</span> <span class="title class_">AudioManager</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">particleSystem</span> = <span class="keyword">new</span> <span class="title class_">ParticleSystem</span>(container);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">playDrawAnimation</span>(<span class="params">results</span>) &#123;</span><br><span class="line">        <span class="comment">// 1. 播放开箱音效</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">audioManager</span>.<span class="title function_">play</span>(<span class="string">&#x27;box_opening&#x27;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2. 显示抽奖容器</span></span><br><span class="line">        <span class="keyword">const</span> boxElement = <span class="variable language_">this</span>.<span class="title function_">createLootBox</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">container</span>.<span class="title function_">appendChild</span>(boxElement);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3. 悬念阶段 - 盒子摇晃动画</span></span><br><span class="line">        <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">playSuspenseAnimation</span>(boxElement);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 4. 确定最高稀有度物品</span></span><br><span class="line">        <span class="keyword">const</span> highestRarity = <span class="variable language_">this</span>.<span class="title function_">getHighestRarity</span>(results);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 5. 播放对应稀有度的特效</span></span><br><span class="line">        <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">playRarityEffect</span>(highestRarity);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 6. 揭晓结果</span></span><br><span class="line">        <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">revealResults</span>(results);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 7. 清理动画元素</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">cleanup</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">playSuspenseAnimation</span>(<span class="params">boxElement</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 盒子摇晃动画</span></span><br><span class="line">            boxElement.<span class="property">style</span>.<span class="property">animation</span> = <span class="string">`shake <span class="subst">$&#123;<span class="variable language_">this</span>.config.suspenseDuration&#125;</span>ms ease-in-out`</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 播放悬念音效</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">audioManager</span>.<span class="title function_">play</span>(<span class="string">&#x27;suspense_loop&#x27;</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">setTimeout</span>(resolve, <span class="variable language_">this</span>.<span class="property">config</span>.<span class="property">suspenseDuration</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">playRarityEffect</span>(<span class="params">rarity</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> effects = &#123;</span><br><span class="line">            <span class="string">&#x27;COMMON&#x27;</span>: <span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">playCommonEffect</span>(),</span><br><span class="line">            <span class="string">&#x27;UNCOMMON&#x27;</span>: <span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">playUncommonEffect</span>(),</span><br><span class="line">            <span class="string">&#x27;RARE&#x27;</span>: <span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">playRareEffect</span>(),</span><br><span class="line">            <span class="string">&#x27;EPIC&#x27;</span>: <span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">playEpicEffect</span>(),</span><br><span class="line">            <span class="string">&#x27;LEGENDARY&#x27;</span>: <span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">playLegendaryEffect</span>(),</span><br><span class="line">            <span class="string">&#x27;MYTHIC&#x27;</span>: <span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">playMythicEffect</span>()</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">const</span> effectFunction = effects[rarity] || effects[<span class="string">&#x27;COMMON&#x27;</span>];</span><br><span class="line">        <span class="keyword">await</span> <span class="title function_">effectFunction</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">playLegendaryEffect</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 传说级特效：金光闪闪</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">audioManager</span>.<span class="title function_">play</span>(<span class="string">&#x27;legendary_reveal&#x27;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 屏幕闪光效果</span></span><br><span class="line">        <span class="keyword">const</span> flash = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">        flash.<span class="property">className</span> = <span class="string">&#x27;screen-flash golden&#x27;</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">container</span>.<span class="title function_">appendChild</span>(flash);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 粒子特效</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">particleSystem</span>.<span class="title function_">emit</span>(<span class="string">&#x27;golden_particles&#x27;</span>, &#123;</span><br><span class="line">            <span class="attr">count</span>: <span class="number">100</span>,</span><br><span class="line">            <span class="attr">duration</span>: <span class="number">2000</span>,</span><br><span class="line">            <span class="attr">color</span>: <span class="string">&#x27;#FFD700&#x27;</span></span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 震动效果（移动端）</span></span><br><span class="line">        <span class="keyword">if</span> (navigator.<span class="property">vibrate</span>) &#123;</span><br><span class="line">            navigator.<span class="title function_">vibrate</span>([<span class="number">200</span>, <span class="number">100</span>, <span class="number">200</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                flash.<span class="title function_">remove</span>();</span><br><span class="line">                <span class="title function_">resolve</span>();</span><br><span class="line">            &#125;, <span class="number">1000</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">revealResults</span>(<span class="params">results</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> resultsContainer = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">        resultsContainer.<span class="property">className</span> = <span class="string">&#x27;results-container&#x27;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; results.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">const</span> item = results[i];</span><br><span class="line">            <span class="keyword">const</span> itemElement = <span class="variable language_">this</span>.<span class="title function_">createItemElement</span>(item);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 延迟显示每个物品</span></span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                resultsContainer.<span class="title function_">appendChild</span>(itemElement);</span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">playItemRevealAnimation</span>(itemElement, item.<span class="property">rarity</span>);</span><br><span class="line">            &#125;, i * <span class="number">200</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">container</span>.<span class="title function_">appendChild</span>(resultsContainer);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 等待所有物品显示完成</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(resolve, results.<span class="property">length</span> * <span class="number">200</span> + <span class="number">500</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">createItemElement</span>(<span class="params">item</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> element = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">        element.<span class="property">className</span> = <span class="string">`item-card rarity-<span class="subst">$&#123;item.rarity.toLowerCase()&#125;</span>`</span>;</span><br><span class="line">        element.<span class="property">innerHTML</span> = <span class="string">`</span></span><br><span class="line"><span class="string">            &lt;div class=&quot;item-icon&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;img src=&quot;/images/items/<span class="subst">$&#123;item.id&#125;</span>.png&quot; alt=&quot;<span class="subst">$&#123;item.name&#125;</span>&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;div class=&quot;item-name&quot;&gt;<span class="subst">$&#123;item.name&#125;</span>&lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;div class=&quot;item-rarity&quot;&gt;<span class="subst">$&#123;item.rarity&#125;</span>&lt;/div&gt;</span></span><br><span class="line"><span class="string">        `</span>;</span><br><span class="line">        <span class="keyword">return</span> element;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">playItemRevealAnimation</span>(<span class="params">element, rarity</span>) &#123;</span><br><span class="line">        <span class="comment">// 根据稀有度播放不同的揭晓动画</span></span><br><span class="line">        <span class="keyword">const</span> animations = &#123;</span><br><span class="line">            <span class="string">&#x27;COMMON&#x27;</span>: <span class="string">&#x27;fadeInUp&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;UNCOMMON&#x27;</span>: <span class="string">&#x27;bounceIn&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;RARE&#x27;</span>: <span class="string">&#x27;zoomIn&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;EPIC&#x27;</span>: <span class="string">&#x27;rotateIn&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;LEGENDARY&#x27;</span>: <span class="string">&#x27;jackInTheBox&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;MYTHIC&#x27;</span>: <span class="string">&#x27;lightSpeedIn&#x27;</span></span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">const</span> animation = animations[rarity] || animations[<span class="string">&#x27;COMMON&#x27;</span>];</span><br><span class="line">        element.<span class="property">style</span>.<span class="property">animation</span> = <span class="string">`<span class="subst">$&#123;animation&#125;</span> 0.8s ease-out`</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 播放对应音效</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">audioManager</span>.<span class="title function_">play</span>(<span class="string">`item_reveal_<span class="subst">$&#123;rarity.toLowerCase()&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">getHighestRarity</span>(<span class="params">results</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> rarityOrder = [<span class="string">&#x27;COMMON&#x27;</span>, <span class="string">&#x27;UNCOMMON&#x27;</span>, <span class="string">&#x27;RARE&#x27;</span>, <span class="string">&#x27;EPIC&#x27;</span>, <span class="string">&#x27;LEGENDARY&#x27;</span>, <span class="string">&#x27;MYTHIC&#x27;</span>];</span><br><span class="line">        <span class="keyword">let</span> highest = <span class="string">&#x27;COMMON&#x27;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> results) &#123;</span><br><span class="line">            <span class="keyword">if</span> (rarityOrder.<span class="title function_">indexOf</span>(item.<span class="property">rarity</span>) &gt; rarityOrder.<span class="title function_">indexOf</span>(highest)) &#123;</span><br><span class="line">                highest = item.<span class="property">rarity</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> highest;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 音效管理器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AudioManager</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">sounds</span> = &#123;&#125;;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">volume</span> = <span class="number">0.7</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">loadSounds</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">loadSounds</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> soundFiles = &#123;</span><br><span class="line">            <span class="string">&#x27;box_opening&#x27;</span>: <span class="string">&#x27;/audio/box_opening.mp3&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;suspense_loop&#x27;</span>: <span class="string">&#x27;/audio/suspense_loop.mp3&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;legendary_reveal&#x27;</span>: <span class="string">&#x27;/audio/legendary_reveal.mp3&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;item_reveal_common&#x27;</span>: <span class="string">&#x27;/audio/item_common.mp3&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;item_reveal_legendary&#x27;</span>: <span class="string">&#x27;/audio/item_legendary.mp3&#x27;</span></span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> [name, url] <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">entries</span>(soundFiles)) &#123;</span><br><span class="line">            <span class="keyword">const</span> audio = <span class="keyword">new</span> <span class="title class_">Audio</span>(url);</span><br><span class="line">            audio.<span class="property">volume</span> = <span class="variable language_">this</span>.<span class="property">volume</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">sounds</span>[name] = audio;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">play</span>(<span class="params">soundName</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> sound = <span class="variable language_">this</span>.<span class="property">sounds</span>[soundName];</span><br><span class="line">        <span class="keyword">if</span> (sound) &#123;</span><br><span class="line">            sound.<span class="property">currentTime</span> = <span class="number">0</span>;  <span class="comment">// 重置播放位置</span></span><br><span class="line">            sound.<span class="title function_">play</span>().<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;音频播放失败:&#x27;</span>, e));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 粒子系统</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ParticleSystem</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">container</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">container</span> = container;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">particles</span> = [];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">emit</span>(<span class="params">type, config</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> emitters = &#123;</span><br><span class="line">            <span class="string">&#x27;golden_particles&#x27;</span>: <span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">emitGoldenParticles</span>(config),</span><br><span class="line">            <span class="string">&#x27;rainbow_particles&#x27;</span>: <span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">emitRainbowParticles</span>(config),</span><br><span class="line">            <span class="string">&#x27;sparkles&#x27;</span>: <span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">emitSparkles</span>(config)</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">const</span> emitter = emitters[type];</span><br><span class="line">        <span class="keyword">if</span> (emitter) &#123;</span><br><span class="line">            <span class="title function_">emitter</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">emitGoldenParticles</span>(<span class="params">config</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; config.<span class="property">count</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">const</span> particle = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">            particle.<span class="property">className</span> = <span class="string">&#x27;particle golden&#x27;</span>;</span><br><span class="line">            particle.<span class="property">style</span>.<span class="property">cssText</span> = <span class="string">`</span></span><br><span class="line"><span class="string">                position: absolute;</span></span><br><span class="line"><span class="string">                width: 4px;</span></span><br><span class="line"><span class="string">                height: 4px;</span></span><br><span class="line"><span class="string">                background: <span class="subst">$&#123;config.color&#125;</span>;</span></span><br><span class="line"><span class="string">                border-radius: 50%;</span></span><br><span class="line"><span class="string">                pointer-events: none;</span></span><br><span class="line"><span class="string">                left: <span class="subst">$&#123;<span class="built_in">Math</span>.random() * <span class="number">100</span>&#125;</span>%;</span></span><br><span class="line"><span class="string">                top: <span class="subst">$&#123;<span class="built_in">Math</span>.random() * <span class="number">100</span>&#125;</span>%;</span></span><br><span class="line"><span class="string">                animation: particleFloat <span class="subst">$&#123;config.duration&#125;</span>ms ease-out forwards;</span></span><br><span class="line"><span class="string">            `</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">container</span>.<span class="title function_">appendChild</span>(particle);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 清理粒子</span></span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (particle.<span class="property">parentNode</span>) &#123;</span><br><span class="line">                    particle.<span class="property">parentNode</span>.<span class="title function_">removeChild</span>(particle);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, config.<span class="property">duration</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="（二）心理学应用"><a href="#（二）心理学应用" class="headerlink" title="（二）心理学应用"></a>（二）心理学应用</h2><ul>
<li><strong>损失厌恶</strong>：保底机制减少用户损失感</li>
<li><strong>变比强化</strong>：不定期奖励增强用户行为</li>
<li><strong>锚定效应</strong>：通过对比突出稀有物品价值</li>
<li><strong>社会认同</strong>：展示其他玩家的抽奖结果</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PsychologyOptimizer</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;心理学优化器&quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.user_behavior_data = &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">optimize_draw_experience</span>(<span class="params">self, user_id: <span class="built_in">str</span>, draw_history: <span class="type">List</span></span>) -&gt; <span class="type">Dict</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;优化抽奖体验&quot;&quot;&quot;</span></span><br><span class="line">        profile = <span class="variable language_">self</span>._analyze_user_psychology(user_id, draw_history)</span><br><span class="line">        </span><br><span class="line">        recommendations = &#123;</span><br><span class="line">            <span class="string">&#x27;show_pity_progress&#x27;</span>: <span class="variable language_">self</span>._should_show_pity_progress(profile),</span><br><span class="line">            <span class="string">&#x27;highlight_near_guarantee&#x27;</span>: <span class="variable language_">self</span>._should_highlight_guarantee(profile),</span><br><span class="line">            <span class="string">&#x27;show_social_proof&#x27;</span>: <span class="variable language_">self</span>._should_show_social_proof(profile),</span><br><span class="line">            <span class="string">&#x27;recommend_draw_count&#x27;</span>: <span class="variable language_">self</span>._recommend_draw_count(profile),</span><br><span class="line">            <span class="string">&#x27;show_value_comparison&#x27;</span>: <span class="variable language_">self</span>._should_show_value_comparison(profile)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> recommendations</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_analyze_user_psychology</span>(<span class="params">self, user_id: <span class="built_in">str</span>, draw_history: <span class="type">List</span></span>) -&gt; <span class="type">Dict</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;分析用户心理特征&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> draw_history:</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;new_user&#x27;</span>, <span class="string">&#x27;risk_tolerance&#x27;</span>: <span class="string">&#x27;medium&#x27;</span>&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 分析抽奖模式</span></span><br><span class="line">        recent_draws = draw_history[-<span class="number">10</span>:]  <span class="comment"># 最近10次抽奖</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 计算抽奖频率</span></span><br><span class="line">        draw_frequency = <span class="built_in">len</span>(recent_draws) / <span class="built_in">max</span>(<span class="number">1</span>, (time.time() - recent_draws[<span class="number">0</span>][<span class="string">&#x27;timestamp&#x27;</span>]) / <span class="number">86400</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 分析消费模式</span></span><br><span class="line">        total_spent = <span class="built_in">sum</span>(draw[<span class="string">&#x27;cost&#x27;</span>] <span class="keyword">for</span> draw <span class="keyword">in</span> recent_draws)</span><br><span class="line">        avg_spend = total_spent / <span class="built_in">len</span>(recent_draws)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 分析情绪状态</span></span><br><span class="line">        consecutive_failures = <span class="variable language_">self</span>._count_consecutive_failures(recent_draws)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 用户类型分类</span></span><br><span class="line">        <span class="keyword">if</span> draw_frequency &gt; <span class="number">5</span>:  <span class="comment"># 高频抽奖</span></span><br><span class="line">            user_type = <span class="string">&#x27;addictive&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> avg_spend &gt; <span class="number">100</span>:  <span class="comment"># 高消费</span></span><br><span class="line">            user_type = <span class="string">&#x27;whale&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> consecutive_failures &gt; <span class="number">20</span>:  <span class="comment"># 连续失败</span></span><br><span class="line">            user_type = <span class="string">&#x27;frustrated&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            user_type = <span class="string">&#x27;casual&#x27;</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">&#x27;type&#x27;</span>: user_type,</span><br><span class="line">            <span class="string">&#x27;draw_frequency&#x27;</span>: draw_frequency,</span><br><span class="line">            <span class="string">&#x27;avg_spend&#x27;</span>: avg_spend,</span><br><span class="line">            <span class="string">&#x27;consecutive_failures&#x27;</span>: consecutive_failures,</span><br><span class="line">            <span class="string">&#x27;risk_tolerance&#x27;</span>: <span class="variable language_">self</span>._assess_risk_tolerance(recent_draws)</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_should_show_pity_progress</span>(<span class="params">self, profile: <span class="type">Dict</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;是否显示保底进度&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 沮丧用户和高频用户需要看到进度</span></span><br><span class="line">        <span class="keyword">return</span> profile[<span class="string">&#x27;type&#x27;</span>] <span class="keyword">in</span> [<span class="string">&#x27;frustrated&#x27;</span>, <span class="string">&#x27;addictive&#x27;</span>] <span class="keyword">or</span> profile[<span class="string">&#x27;consecutive_failures&#x27;</span>] &gt; <span class="number">10</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_should_highlight_guarantee</span>(<span class="params">self, profile: <span class="type">Dict</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;是否突出显示保底机制&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 接近保底时突出显示</span></span><br><span class="line">        <span class="keyword">return</span> profile[<span class="string">&#x27;consecutive_failures&#x27;</span>] &gt; <span class="number">30</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_should_show_social_proof</span>(<span class="params">self, profile: <span class="type">Dict</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;是否显示社会认同&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 新用户和犹豫用户需要社会认同</span></span><br><span class="line">        <span class="keyword">return</span> profile[<span class="string">&#x27;type&#x27;</span>] <span class="keyword">in</span> [<span class="string">&#x27;new_user&#x27;</span>, <span class="string">&#x27;casual&#x27;</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_recommend_draw_count</span>(<span class="params">self, profile: <span class="type">Dict</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;推荐抽奖次数&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> profile[<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;whale&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">10</span>  <span class="comment"># 推荐十连抽</span></span><br><span class="line">        <span class="keyword">elif</span> profile[<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;frustrated&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>   <span class="comment"># 推荐单抽，降低损失</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">5</span>   <span class="comment"># 推荐五连抽</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_should_show_value_comparison</span>(<span class="params">self, profile: <span class="type">Dict</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;是否显示价值对比&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 理性用户需要看到价值对比</span></span><br><span class="line">        <span class="keyword">return</span> profile[<span class="string">&#x27;risk_tolerance&#x27;</span>] == <span class="string">&#x27;low&#x27;</span></span><br></pre></td></tr></table></figure>

<hr>
<p><strong>总结</strong>：游戏抽奖系统是一个复杂的技术与心理学结合的系统工程。从技术角度，需要实现公平的随机算法、完善的防作弊机制、高性能的并发处理；从产品角度，需要平衡用户体验与商业收益，运用心理学原理提升用户参与度。</p>
<p>核心技术要点包括：安全的随机数生成、多层次的概率机制、完善的保底系统、严格的防作弊验证、流畅的视觉体验设计。同时，需要深入理解用户心理，通过数据分析优化抽奖体验，在保证公平性的前提下最大化用户满意度和商业价值。</p>
<p>现代游戏抽奖系统已经发展成为融合概率论、密码学、心理学、用户体验设计等多个领域的综合性系统，其设计思路和技术方案对其他需要随机奖励机制的应用都有很好的参考价值。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="一、游戏抽奖系统概述"><a href="#一、游戏抽奖系统概述" class="headerlink" title="一、游戏抽奖系统概述"></a>一、游戏抽奖系统概述</h1><h2 id="（一）抽奖系统的核心作用"><a href="#（一）抽奖系统的核]]>
    </summary>
    
      <category term="游戏开发" scheme="https://uwakeme.tech/tags/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
      <category term="用户体验" scheme="https://uwakeme.tech/tags/%E7%94%A8%E6%88%B7%E4%BD%93%E9%AA%8C/"/>
    
      <category term="抽奖系统" scheme="https://uwakeme.tech/tags/%E6%8A%BD%E5%A5%96%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="概率算法" scheme="https://uwakeme.tech/tags/%E6%A6%82%E7%8E%87%E7%AE%97%E6%B3%95/"/>
    
      <category term="防作弊" scheme="https://uwakeme.tech/tags/%E9%98%B2%E4%BD%9C%E5%BC%8A/"/>
    
      <category term="随机数生成" scheme="https://uwakeme.tech/tags/%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%94%9F%E6%88%90/"/>
    
      <category term="游戏经济" scheme="https://uwakeme.tech/tags/%E6%B8%B8%E6%88%8F%E7%BB%8F%E6%B5%8E/"/>
    
      <category term="软件功能解析" scheme="https://uwakeme.tech/categories/%E8%BD%AF%E4%BB%B6%E5%8A%9F%E8%83%BD%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[【博客】搭建个人Hexo博客网站]]></title>
    <link href="https://uwakeme.tech/2025/08/05/%E5%8D%9A%E5%AE%A2/%E3%80%90%E5%8D%9A%E5%AE%A2%E3%80%91%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BAHexo%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/"/>
    <id>https://uwakeme.tech/2025/08/05/博客/【博客】搭建个人Hexo博客网站/</id>
    <published>2025-08-05T01:02:58.009Z</published>
    <updated>2025-08-05T01:02:58.009Z</updated>
    <content type="html"><![CDATA[<h1 id="一、准备环境"><a href="#一、准备环境" class="headerlink" title="一、准备环境"></a>一、准备环境</h1><h2 id="1、安装node"><a href="#1、安装node" class="headerlink" title="1、安装node"></a>1、安装node</h2><ul>
<li>访问Node.js官网：<a href="https://nodejs.org/">https://nodejs.org/</a></li>
<li>下载LTS (长期支持版本)</li>
<li>安装时保持默认选项即可</li>
<li>安装完成后，打开命令提示符验证安装：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="2、安装npm"><a href="#2、安装npm" class="headerlink" title="2、安装npm"></a>2、安装npm</h2><ul>
<li>npm已包含在Node.js安装包中，安装Node.js时会自动安装</li>
<li>打开命令提示符验证安装：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure></li>
<li>更新npm到最新版本（可选）：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g npm</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="3、安装hexo"><a href="#3、安装hexo" class="headerlink" title="3、安装hexo"></a>3、安装hexo</h2><ul>
<li>打开命令提示符，以管理员身份运行以下命令</li>
<li><pre><code class="shell">npm install -g hexo
hexo -v
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 二、Git仓库准备</span><br><span class="line"></span><br><span class="line">## 1、新建git仓库</span><br><span class="line"></span><br><span class="line">+ 在GitHub/Gitee上创建一个新的仓库</span><br><span class="line">+ 仓库名称建议设置为：`用户名.github.io`（使用GitHub Pages时）或自定义名称</span><br><span class="line">+ 初始化时不需要添加README文件</span><br><span class="line"></span><br><span class="line">## 2、本地同步git仓库</span><br><span class="line"></span><br><span class="line">+ 在一个空白文件夹中，右键打开git bash，输入命令，将git仓库拉下来</span><br><span class="line"></span><br><span class="line">  ```shell</span><br><span class="line">  git clone 仓库地址</span><br></pre></td></tr></table></figure>
&gt; 如果使用SSH连接，请确保已配置SSH密钥
</code></pre>
</li>
</ul>
<h1 id="三、Hexo博客搭建"><a href="#三、Hexo博客搭建" class="headerlink" title="三、Hexo博客搭建"></a>三、Hexo博客搭建</h1><h2 id="1、基础环境搭建"><a href="#1、基础环境搭建" class="headerlink" title="1、基础环境搭建"></a>1、基础环境搭建</h2><ul>
<li><p>进入到刚拉下来的文件夹中，打开cmd</p>
</li>
<li><p>初始化指令</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init .</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：使用点号<code>.</code>表示在当前目录初始化，或者可以使用<code>hexo init myHexoBlob</code>创建新文件夹</p>
</blockquote>
<p><img src="/.tech//post/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99.assets/image-20240826170444846.png" alt="image-20240826170444846"></p>
<p>这样hexo的配置文件就初始化好了</p>
</li>
<li><p>然后重新用管理员运行cmd，并切换到hexo新生成的文件夹中，安装依赖</p>
<p><img src="/.tech//post/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99.assets/image-20240826170910180.png" alt="image-20240826170910180"></p>
</li>
</ul>
<h2 id="2、启动hexo"><a href="#2、启动hexo" class="headerlink" title="2、启动hexo"></a>2、启动hexo</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">每次更改数据后都要执行下面三个命令</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">清除缓存文件</span></span><br><span class="line">hexo clean</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成静态文件 可简写为 hexo g</span></span><br><span class="line">hexo generate   </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动服务器 可简写为 hexo s</span></span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure>

<p><img src="/.tech//post/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99.assets/image-20240826172804368.png" alt="image-20240826172804368"></p>
<h2 id="3、更换主题"><a href="#3、更换主题" class="headerlink" title="3、更换主题"></a>3、更换主题</h2><ul>
<li><p>以管理员身份运行命令提示符，切换当前目录到 hexo项目 目录，运行命令安装Fluid主题</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-theme-fluid</span><br></pre></td></tr></table></figure>
<p><img src="/.tech//post/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99.assets/image-20240826173132910.png" alt="image-20240826173132910"></p>
</li>
<li><p>修改hexo的配置文件 <code>_config.yml</code>，找到theme字段，修改为：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">fluid</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在项目根目录下新建一个文件，命名为 <code>_config.fluid.yml</code></p>
<blockquote>
<p>只要存在于 <code>_config.fluid.yml</code> 的配置都是高优先级，修改原 <code>_config.yml</code> 是无效的。以后我们就对 <code>_config.fluid.yml</code> 进行修改即可。</p>
</blockquote>
</li>
<li><p>可以从fluid主题的GitHub仓库中复制一份默认的配置文件：<br><a href="https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml">https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml</a></p>
</li>
<li><p>重新编译并重启项目即可</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="4、自定义配置"><a href="#4、自定义配置" class="headerlink" title="4、自定义配置"></a>4、自定义配置</h2><ul>
<li><p>修改网站基本信息，编辑根目录的 <code>_config.yml</code>：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 网站标题</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">您的博客标题</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 网站描述</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">您的博客描述</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 作者信息</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">您的名字</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 网站语言</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 时区</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">Asia/Shanghai</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改主题配置，编辑 <code>_config.fluid.yml</code>：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 首页标语</span></span><br><span class="line"><span class="attr">index:</span></span><br><span class="line">  <span class="attr">slogan:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">text:</span> <span class="string">&quot;这是我的个人博客&quot;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 导航菜单</span></span><br><span class="line"><span class="attr">navbar:</span></span><br><span class="line">  <span class="attr">menu:</span></span><br><span class="line">    <span class="bullet">-</span> &#123; <span class="attr">key:</span> <span class="string">&quot;首页&quot;</span>, <span class="attr">link:</span> <span class="string">&quot;/&quot;</span> &#125;</span><br><span class="line">    <span class="bullet">-</span> &#123; <span class="attr">key:</span> <span class="string">&quot;归档&quot;</span>, <span class="attr">link:</span> <span class="string">&quot;/archives/&quot;</span> &#125;</span><br><span class="line">    <span class="bullet">-</span> &#123; <span class="attr">key:</span> <span class="string">&quot;分类&quot;</span>, <span class="attr">link:</span> <span class="string">&quot;/categories/&quot;</span> &#125;</span><br><span class="line">    <span class="bullet">-</span> &#123; <span class="attr">key:</span> <span class="string">&quot;标签&quot;</span>, <span class="attr">link:</span> <span class="string">&quot;/tags/&quot;</span> &#125;</span><br><span class="line">    <span class="bullet">-</span> &#123; <span class="attr">key:</span> <span class="string">&quot;关于&quot;</span>, <span class="attr">link:</span> <span class="string">&quot;/about/&quot;</span> &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="5、部署到GitHub-Pages"><a href="#5、部署到GitHub-Pages" class="headerlink" title="5、部署到GitHub Pages"></a>5、部署到GitHub Pages</h2><p>  <img src="/.tech//post/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99.assets/image-20240826173132910.png" alt="image-20240826173132910"></p>
<ul>
<li><p>安装部署插件</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改根目录下的 <code>_config.yml</code> 文件，找到 <code>deploy</code> 部分，改为：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/用户名/用户名.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>部署命令</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure>
</li>
<li><p>完成部署后，通常可以通过 <code>https://用户名.github.io</code> 访问您的博客</p>
</li>
</ul>
<h1 id="四、写作和管理文章"><a href="#四、写作和管理文章" class="headerlink" title="四、写作和管理文章"></a>四、写作和管理文章</h1><h2 id="1、创建新文章"><a href="#1、创建新文章" class="headerlink" title="1、创建新文章"></a>1、创建新文章</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;文章标题&quot;</span><br></pre></td></tr></table></figure>

<h2 id="2、创建草稿"><a href="#2、创建草稿" class="headerlink" title="2、创建草稿"></a>2、创建草稿</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new draft &quot;草稿标题&quot;</span><br></pre></td></tr></table></figure>

<h2 id="3、预览草稿"><a href="#3、预览草稿" class="headerlink" title="3、预览草稿"></a>3、预览草稿</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server --draft</span><br></pre></td></tr></table></figure>

<h2 id="4、发布草稿"><a href="#4、发布草稿" class="headerlink" title="4、发布草稿"></a>4、发布草稿</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo publish &quot;草稿标题&quot;</span><br></pre></td></tr></table></figure>

<h1 id="五、常见问题解决"><a href="#五、常见问题解决" class="headerlink" title="五、常见问题解决"></a>五、常见问题解决</h1><ol>
<li><p>图片显示问题：建议将图片放在 <code>source/images</code> 目录下，然后在文章中使用相对路径引用。</p>
</li>
<li><p>部署失败：确保Git配置正确，SSH密钥已配置（如果使用SSH）。</p>
</li>
<li><p>主题更新：定期更新主题以获取新功能和修复。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm update hexo-theme-fluid</span><br></pre></td></tr></table></figure>
</li>
<li><p>备份：定期将整个博客目录备份，特别是 <code>source</code> 文件夹和配置文件。</p>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="一、准备环境"><a href="#一、准备环境" class="headerlink" title="一、准备环境"></a>一、准备环境</h1><h2 id="1、安装node"><a href="#1、安装node" class="headerlink" ]]>
    </summary>
    
      <category term="HEXO" scheme="https://uwakeme.tech/tags/HEXO/"/>
    
      <category term="博客" scheme="https://uwakeme.tech/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="博客" scheme="https://uwakeme.tech/categories/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[【大数据】Hadoop生态系统深度解析：分布式存储与计算的技术基石]]></title>
    <link href="https://uwakeme.tech/2025/07/30/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E3%80%90%E5%A4%A7%E6%95%B0%E6%8D%AE%E3%80%91Hadoop%E7%94%9F%E6%80%81%E7%B3%BB%E7%BB%9F%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90%EF%BC%9A%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%98%E5%82%A8%E4%B8%8E%E8%AE%A1%E7%AE%97%E7%9A%84%E6%8A%80%E6%9C%AF%E5%9F%BA%E7%9F%B3/"/>
    <id>https://uwakeme.tech/2025/07/30/大数据/【大数据】Hadoop生态系统深度解析：分布式存储与计算的技术基石/</id>
    <published>2025-07-29T16:00:00.000Z</published>
    <updated>2025-07-31T00:57:45.045Z</updated>
    <content type="html"><![CDATA[<h1 id="一、Hadoop概述与架构"><a href="#一、Hadoop概述与架构" class="headerlink" title="一、Hadoop概述与架构"></a>一、Hadoop概述与架构</h1><h2 id="（一）Hadoop简介"><a href="#（一）Hadoop简介" class="headerlink" title="（一）Hadoop简介"></a>（一）Hadoop简介</h2><ul>
<li><p><strong>什么是Hadoop</strong></p>
<ul>
<li>Apache Hadoop：开源分布式存储和计算框架</li>
<li>设计目标：处理大规模数据集的存储和分析</li>
<li>核心理念：移动计算而非移动数据</li>
<li>容错性：硬件故障是常态而非异常</li>
<li>可扩展性：从单机扩展到数千台机器</li>
</ul>
</li>
<li><p><strong>Hadoop发展历程</strong></p>
<ul>
<li>2003年：Google发布GFS和MapReduce论文</li>
<li>2006年：Doug Cutting创建Hadoop项目</li>
<li>2008年：Hadoop成为Apache顶级项目</li>
<li>2012年：Hadoop 2.0引入YARN架构</li>
<li>现在：Hadoop 3.x版本持续演进</li>
</ul>
</li>
<li><p><strong>Hadoop应用场景</strong></p>
<ul>
<li>大数据存储：PB级数据存储和管理</li>
<li>批处理计算：离线数据分析和处理</li>
<li>数据仓库：企业级数据仓库建设</li>
<li>日志分析：网站访问日志、系统日志分析</li>
<li>机器学习：大规模机器学习数据预处理</li>
</ul>
</li>
</ul>
<h2 id="（二）Hadoop核心组件"><a href="#（二）Hadoop核心组件" class="headerlink" title="（二）Hadoop核心组件"></a>（二）Hadoop核心组件</h2><ul>
<li><p><strong>HDFS（Hadoop分布式文件系统）</strong></p>
<ul>
<li>分布式存储：数据分布在多台机器上</li>
<li>高容错性：数据自动备份，故障自动恢复</li>
<li>高吞吐量：适合大文件的顺序读写</li>
<li>流式数据访问：一次写入，多次读取</li>
<li>商用硬件：运行在普通x86服务器上</li>
</ul>
</li>
<li><p><strong>MapReduce（分布式计算框架）</strong></p>
<ul>
<li>编程模型：Map阶段和Reduce阶段</li>
<li>自动并行化：框架自动处理并行执行</li>
<li>容错处理：任务失败自动重试</li>
<li>数据本地性：计算向数据移动</li>
<li>简化编程：隐藏分布式计算复杂性</li>
</ul>
</li>
<li><p><strong>YARN（资源管理器）</strong></p>
<ul>
<li>资源管理：集群资源统一管理和调度</li>
<li>多框架支持：支持MapReduce、Spark等</li>
<li>容器化：应用运行在容器中</li>
<li>高可用性：ResourceManager高可用</li>
<li>资源隔离：CPU、内存资源隔离</li>
</ul>
</li>
</ul>
<h2 id="（三）Hadoop生态系统"><a href="#（三）Hadoop生态系统" class="headerlink" title="（三）Hadoop生态系统"></a>（三）Hadoop生态系统</h2><ul>
<li><p><strong>数据存储层</strong></p>
<ul>
<li>HDFS：分布式文件系统</li>
<li>HBase：NoSQL列式数据库</li>
<li>Kudu：实时分析存储引擎</li>
<li>Alluxio：内存分布式存储系统</li>
</ul>
</li>
<li><p><strong>数据处理层</strong></p>
<ul>
<li>MapReduce：批处理计算框架</li>
<li>Spark：内存计算框架</li>
<li>Flink：流处理计算框架</li>
<li>Storm：实时流处理系统</li>
</ul>
</li>
<li><p><strong>数据管理层</strong></p>
<ul>
<li>Hive：数据仓库软件，SQL查询</li>
<li>Pig：数据流语言和执行环境</li>
<li>Sqoop：关系数据库数据导入导出</li>
<li>Flume：日志收集系统</li>
</ul>
</li>
</ul>
<h1 id="二、HDFS分布式文件系统"><a href="#二、HDFS分布式文件系统" class="headerlink" title="二、HDFS分布式文件系统"></a>二、HDFS分布式文件系统</h1><h2 id="（一）HDFS架构设计"><a href="#（一）HDFS架构设计" class="headerlink" title="（一）HDFS架构设计"></a>（一）HDFS架构设计</h2><ul>
<li><p><strong>主从架构</strong></p>
<ul>
<li>NameNode：主节点，管理文件系统元数据</li>
<li>DataNode：从节点，存储实际数据块</li>
<li>Secondary NameNode：辅助NameNode，定期合并元数据</li>
<li>客户端：文件系统访问接口</li>
</ul>
</li>
<li><p><strong>数据存储机制</strong></p>
<ul>
<li>块存储：文件分割成固定大小的块（默认128MB）</li>
<li>副本机制：每个块默认存储3个副本</li>
<li>副本放置策略：机架感知，提高可靠性和性能</li>
<li>数据完整性：校验和机制检测数据损坏</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># HDFS基本操作命令</span></span><br><span class="line"><span class="comment"># 查看HDFS文件系统</span></span><br><span class="line">hdfs dfs -<span class="built_in">ls</span> /</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line">hdfs dfs -<span class="built_in">mkdir</span> /user/data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传文件到HDFS</span></span><br><span class="line">hdfs dfs -put localfile.txt /user/data/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从HDFS下载文件</span></span><br><span class="line">hdfs dfs -get /user/data/hdfsfile.txt ./</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看文件内容</span></span><br><span class="line">hdfs dfs -<span class="built_in">cat</span> /user/data/file.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除文件</span></span><br><span class="line">hdfs dfs -<span class="built_in">rm</span> /user/data/file.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看文件系统状态</span></span><br><span class="line">hdfs dfsadmin -report</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查文件系统健康状态</span></span><br><span class="line">hdfs fsck /</span><br></pre></td></tr></table></figure>

<h2 id="（二）NameNode详解"><a href="#（二）NameNode详解" class="headerlink" title="（二）NameNode详解"></a>（二）NameNode详解</h2><ul>
<li><p><strong>元数据管理</strong></p>
<ul>
<li>文件系统树：目录结构和文件信息</li>
<li>块映射：文件块到DataNode的映射关系</li>
<li>内存存储：元数据全部加载到内存中</li>
<li>持久化：FSImage和EditLog文件</li>
</ul>
</li>
<li><p><strong>NameNode高可用（HA）</strong></p>
<ul>
<li>Active&#x2F;Standby模式：主备NameNode</li>
<li>共享存储：QJM（Quorum Journal Manager）</li>
<li>自动故障转移：ZKFC（ZooKeeper Failover Controller）</li>
<li>数据同步：实时同步元数据变更</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- NameNode HA配置示例 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 配置NameNode集群ID --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.nameservices<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>mycluster<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- 配置NameNode节点 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.namenodes.mycluster<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>nn1,nn2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- 配置NameNode RPC地址 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.rpc-address.mycluster.nn1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>namenode1:8020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- 配置共享存储 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.shared.edits.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>qjournal://journal1:8485;journal2:8485;journal3:8485/mycluster<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="（三）DataNode详解"><a href="#（三）DataNode详解" class="headerlink" title="（三）DataNode详解"></a>（三）DataNode详解</h2><ul>
<li><p><strong>数据存储</strong></p>
<ul>
<li>块存储：将文件块存储在本地文件系统</li>
<li>多目录：支持多个存储目录，提高I&#x2F;O性能</li>
<li>数据校验：定期检查数据块完整性</li>
<li>心跳机制：定期向NameNode报告状态</li>
</ul>
</li>
<li><p><strong>数据读写流程</strong></p>
<ul>
<li>写入流程：客户端→NameNode→DataNode管道写入</li>
<li>读取流程：客户端→NameNode获取位置→直接从DataNode读取</li>
<li>数据本地性：优先读取本地或同机架的数据</li>
<li>负载均衡：自动平衡各DataNode的存储负载</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// HDFS Java API使用示例</span></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FSDataInputStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FSDataOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HDFSExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 创建配置对象</span></span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">        conf.set(<span class="string">&quot;fs.defaultFS&quot;</span>, <span class="string">&quot;hdfs://namenode:8020&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取文件系统对象</span></span><br><span class="line">        <span class="type">FileSystem</span> <span class="variable">fs</span> <span class="operator">=</span> FileSystem.get(conf);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建文件并写入数据</span></span><br><span class="line">        <span class="type">Path</span> <span class="variable">outputPath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/user/data/output.txt&quot;</span>);</span><br><span class="line">        <span class="type">FSDataOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> fs.create(outputPath);</span><br><span class="line">        out.writeUTF(<span class="string">&quot;Hello Hadoop HDFS!&quot;</span>);</span><br><span class="line">        out.close();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 读取文件数据</span></span><br><span class="line">        <span class="type">FSDataInputStream</span> <span class="variable">in</span> <span class="operator">=</span> fs.open(outputPath);</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> in.readUTF();</span><br><span class="line">        System.out.println(<span class="string">&quot;文件内容: &quot;</span> + content);</span><br><span class="line">        in.close();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 关闭文件系统</span></span><br><span class="line">        fs.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="三、MapReduce计算框架"><a href="#三、MapReduce计算框架" class="headerlink" title="三、MapReduce计算框架"></a>三、MapReduce计算框架</h1><h2 id="（一）MapReduce编程模型"><a href="#（一）MapReduce编程模型" class="headerlink" title="（一）MapReduce编程模型"></a>（一）MapReduce编程模型</h2><ul>
<li><p><strong>Map阶段</strong></p>
<ul>
<li>输入分片：将输入数据分割成独立的块</li>
<li>Map函数：处理键值对，输出中间结果</li>
<li>分区：根据key将Map输出分配到不同Reducer</li>
<li>排序：对Map输出按key排序</li>
<li>合并：可选的Combiner减少网络传输</li>
</ul>
</li>
<li><p><strong>Reduce阶段</strong></p>
<ul>
<li>Shuffle：从Map任务获取中间结果</li>
<li>排序：对相同key的值进行分组</li>
<li>Reduce函数：处理分组后的数据</li>
<li>输出：将最终结果写入HDFS</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// WordCount MapReduce示例</span></span><br><span class="line"><span class="comment">// Mapper类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WordCountMapper</span> <span class="keyword">extends</span> <span class="title class_">Mapper</span>&lt;LongWritable, Text, Text, IntWritable&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">IntWritable</span> <span class="variable">one</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IntWritable</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Text</span> <span class="variable">word</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Text</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">map</span><span class="params">(LongWritable key, Text value, Context context)</span> </span><br><span class="line">            <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">        <span class="comment">// 将输入文本转换为小写并分割成单词</span></span><br><span class="line">        String[] words = value.toString().toLowerCase().split(<span class="string">&quot;\\s+&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 为每个单词输出 (word, 1)</span></span><br><span class="line">        <span class="keyword">for</span> (String w : words) &#123;</span><br><span class="line">            word.set(w);</span><br><span class="line">            context.write(word, one);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Reducer类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WordCountReducer</span> <span class="keyword">extends</span> <span class="title class_">Reducer</span>&lt;Text, IntWritable, Text, IntWritable&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">IntWritable</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IntWritable</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">reduce</span><span class="params">(Text key, Iterable&lt;IntWritable&gt; values, Context context)</span></span><br><span class="line">            <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 计算每个单词的总数</span></span><br><span class="line">        <span class="keyword">for</span> (IntWritable value : values) &#123;</span><br><span class="line">            sum += value.get();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        result.set(sum);</span><br><span class="line">        context.write(key, result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Driver类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WordCountDriver</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">        <span class="type">Job</span> <span class="variable">job</span> <span class="operator">=</span> Job.getInstance(conf, <span class="string">&quot;word count&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        job.setJarByClass(WordCountDriver.class);</span><br><span class="line">        job.setMapperClass(WordCountMapper.class);</span><br><span class="line">        job.setCombinerClass(WordCountReducer.class);  <span class="comment">// 使用Reducer作为Combiner</span></span><br><span class="line">        job.setReducerClass(WordCountReducer.class);</span><br><span class="line">        </span><br><span class="line">        job.setOutputKeyClass(Text.class);</span><br><span class="line">        job.setOutputValueClass(IntWritable.class);</span><br><span class="line">        </span><br><span class="line">        FileInputFormat.addInputPath(job, <span class="keyword">new</span> <span class="title class_">Path</span>(args[<span class="number">0</span>]));</span><br><span class="line">        FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> <span class="title class_">Path</span>(args[<span class="number">1</span>]));</span><br><span class="line">        </span><br><span class="line">        System.exit(job.waitForCompletion(<span class="literal">true</span>) ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="（二）MapReduce执行流程"><a href="#（二）MapReduce执行流程" class="headerlink" title="（二）MapReduce执行流程"></a>（二）MapReduce执行流程</h2><ul>
<li><p><strong>作业提交</strong></p>
<ul>
<li>客户端提交作业到ResourceManager</li>
<li>ResourceManager分配ApplicationMaster</li>
<li>ApplicationMaster向ResourceManager申请资源</li>
<li>启动Map和Reduce任务</li>
</ul>
</li>
<li><p><strong>任务执行</strong></p>
<ul>
<li>Map任务：读取输入分片，执行Map函数</li>
<li>Shuffle阶段：Map输出传输到Reducer</li>
<li>Reduce任务：执行Reduce函数，输出结果</li>
<li>任务监控：跟踪任务进度和状态</li>
</ul>
</li>
</ul>
<h2 id="（三）MapReduce优化技术"><a href="#（三）MapReduce优化技术" class="headerlink" title="（三）MapReduce优化技术"></a>（三）MapReduce优化技术</h2><ul>
<li><p><strong>输入优化</strong></p>
<ul>
<li>文件格式：使用SequenceFile、Avro等高效格式</li>
<li>压缩：启用输入数据压缩减少I&#x2F;O</li>
<li>分片大小：调整输入分片大小优化并行度</li>
<li>数据本地性：优化数据分布提高本地性</li>
</ul>
</li>
<li><p><strong>执行优化</strong></p>
<ul>
<li>Combiner：减少Map输出数据量</li>
<li>压缩：启用Map输出和最终输出压缩</li>
<li>内存调优：调整JVM堆大小和缓冲区</li>
<li>推测执行：启用推测执行处理慢任务</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- MapReduce性能优化配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 启用Map输出压缩 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.map.output.compress<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- 设置Map输出压缩编解码器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.map.output.compress.codec<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>org.apache.hadoop.io.compress.SnappyCodec<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- 调整Map任务内存 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.map.memory.mb<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>2048<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- 调整Reduce任务内存 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.reduce.memory.mb<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>4096<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- 启用推测执行 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.map.speculative<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="四、YARN资源管理"><a href="#四、YARN资源管理" class="headerlink" title="四、YARN资源管理"></a>四、YARN资源管理</h1><h2 id="（一）YARN架构组件"><a href="#（一）YARN架构组件" class="headerlink" title="（一）YARN架构组件"></a>（一）YARN架构组件</h2><ul>
<li><p><strong>ResourceManager（RM）</strong></p>
<ul>
<li>全局资源管理：管理整个集群的资源</li>
<li>应用管理：接收作业提交，启动ApplicationMaster</li>
<li>调度器：根据策略分配资源给应用</li>
<li>高可用：支持Active&#x2F;Standby模式</li>
</ul>
</li>
<li><p><strong>NodeManager（NM）</strong></p>
<ul>
<li>节点资源管理：管理单个节点的资源</li>
<li>容器管理：启动和监控容器</li>
<li>健康检查：监控节点健康状态</li>
<li>日志管理：收集和管理应用日志</li>
</ul>
</li>
<li><p><strong>ApplicationMaster（AM）</strong></p>
<ul>
<li>应用协调：协调应用的执行</li>
<li>资源申请：向ResourceManager申请资源</li>
<li>任务调度：在分配的容器中启动任务</li>
<li>容错处理：处理任务失败和重试</li>
</ul>
</li>
<li><p><strong>Container（容器）</strong></p>
<ul>
<li>资源封装：封装CPU、内存等资源</li>
<li>任务执行：应用任务的执行环境</li>
<li>资源隔离：提供资源隔离保证</li>
<li>生命周期管理：容器的创建、运行、销毁</li>
</ul>
</li>
</ul>
<h2 id="（二）YARN调度器"><a href="#（二）YARN调度器" class="headerlink" title="（二）YARN调度器"></a>（二）YARN调度器</h2><ul>
<li><p><strong>FIFO调度器</strong></p>
<ul>
<li>先进先出：按提交顺序执行作业</li>
<li>简单实现：适合小规模集群</li>
<li>资源利用率低：大作业会阻塞小作业</li>
<li>不支持优先级：无法区分作业重要性</li>
</ul>
</li>
<li><p><strong>容量调度器（Capacity Scheduler）</strong></p>
<ul>
<li>队列管理：支持多个队列，队列间资源隔离</li>
<li>容量保证：每个队列有最小资源保证</li>
<li>弹性资源：空闲资源可被其他队列使用</li>
<li>层次队列：支持队列嵌套，细粒度管理</li>
</ul>
</li>
<li><p><strong>公平调度器（Fair Scheduler）</strong></p>
<ul>
<li>公平共享：所有应用公平共享资源</li>
<li>抢占机制：支持资源抢占保证公平性</li>
<li>多种策略：支持FIFO、Fair、DRF等策略</li>
<li>动态配置：支持运行时配置修改</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 容量调度器配置示例 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 启用容量调度器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.scheduler.class<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.CapacityScheduler<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- 配置队列 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.scheduler.capacity.root.queues<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>default,production,development<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- 配置队列容量 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.scheduler.capacity.root.default.capacity<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>40<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.scheduler.capacity.root.production.capacity<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>40<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.scheduler.capacity.root.development.capacity<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>20<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="（三）YARN应用开发"><a href="#（三）YARN应用开发" class="headerlink" title="（三）YARN应用开发"></a>（三）YARN应用开发</h2><ul>
<li><p><strong>应用提交流程</strong></p>
<ul>
<li>客户端向ResourceManager提交应用</li>
<li>ResourceManager分配容器启动ApplicationMaster</li>
<li>ApplicationMaster向ResourceManager注册</li>
<li>ApplicationMaster申请资源启动任务</li>
<li>任务完成后ApplicationMaster注销</li>
</ul>
</li>
<li><p><strong>编程接口</strong></p>
<ul>
<li>Client API：应用提交和监控</li>
<li>ApplicationMaster API：资源申请和任务管理</li>
<li>Container API：容器生命周期管理</li>
<li>Timeline Service：应用历史信息存储</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// YARN应用客户端示例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">YarnClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">        <span class="type">YarnClient</span> <span class="variable">yarnClient</span> <span class="operator">=</span> YarnClient.createYarnClient();</span><br><span class="line">        yarnClient.init(conf);</span><br><span class="line">        yarnClient.start();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建应用</span></span><br><span class="line">        <span class="type">YarnClientApplication</span> <span class="variable">app</span> <span class="operator">=</span> yarnClient.createApplication();</span><br><span class="line">        <span class="type">ApplicationSubmissionContext</span> <span class="variable">appContext</span> <span class="operator">=</span> app.getApplicationSubmissionContext();</span><br><span class="line">        <span class="type">ApplicationId</span> <span class="variable">appId</span> <span class="operator">=</span> appContext.getApplicationId();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 设置应用信息</span></span><br><span class="line">        appContext.setApplicationName(<span class="string">&quot;MyYarnApp&quot;</span>);</span><br><span class="line">        appContext.setApplicationType(<span class="string">&quot;MAPREDUCE&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 设置ApplicationMaster</span></span><br><span class="line">        <span class="type">ContainerLaunchContext</span> <span class="variable">amContainer</span> <span class="operator">=</span> ContainerLaunchContext.newInstance(</span><br><span class="line">            <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        appContext.setAMContainerSpec(amContainer);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 设置资源需求</span></span><br><span class="line">        <span class="type">Resource</span> <span class="variable">capability</span> <span class="operator">=</span> Resource.newInstance(<span class="number">1024</span>, <span class="number">1</span>);</span><br><span class="line">        appContext.setResource(capability);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 提交应用</span></span><br><span class="line">        yarnClient.submitApplication(appContext);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 监控应用状态</span></span><br><span class="line">        <span class="type">ApplicationReport</span> <span class="variable">appReport</span> <span class="operator">=</span> yarnClient.getApplicationReport(appId);</span><br><span class="line">        <span class="type">YarnApplicationState</span> <span class="variable">appState</span> <span class="operator">=</span> appReport.getYarnApplicationState();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (appState != YarnApplicationState.FINISHED &amp;&amp; </span><br><span class="line">               appState != YarnApplicationState.KILLED &amp;&amp; </span><br><span class="line">               appState != YarnApplicationState.FAILED) &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            appReport = yarnClient.getApplicationReport(appId);</span><br><span class="line">            appState = appReport.getYarnApplicationState();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        yarnClient.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="五、Hadoop生态系统组件"><a href="#五、Hadoop生态系统组件" class="headerlink" title="五、Hadoop生态系统组件"></a>五、Hadoop生态系统组件</h1><h2 id="（一）Hive数据仓库"><a href="#（一）Hive数据仓库" class="headerlink" title="（一）Hive数据仓库"></a>（一）Hive数据仓库</h2><ul>
<li><p><strong>Hive概述</strong></p>
<ul>
<li>SQL接口：提供类SQL查询语言HiveQL</li>
<li>元数据管理：存储表结构和分区信息</li>
<li>数据存储：数据存储在HDFS上</li>
<li>执行引擎：支持MapReduce、Spark、Tez</li>
</ul>
</li>
<li><p><strong>Hive架构</strong></p>
<ul>
<li>Hive CLI：命令行接口</li>
<li>HiveServer2：JDBC&#x2F;ODBC服务</li>
<li>Metastore：元数据存储服务</li>
<li>Driver：查询编译和优化</li>
<li>执行引擎：查询执行引擎</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- Hive SQL示例</span></span><br><span class="line"><span class="comment">-- 创建数据库</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> sales_db;</span><br><span class="line">USE sales_db;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建外部表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">EXTERNAL</span> <span class="keyword">TABLE</span> sales_data (</span><br><span class="line">    order_id STRING,</span><br><span class="line">    customer_id STRING,</span><br><span class="line">    product_id STRING,</span><br><span class="line">    quantity <span class="type">INT</span>,</span><br><span class="line">    price <span class="type">DECIMAL</span>(<span class="number">10</span>,<span class="number">2</span>),</span><br><span class="line">    order_date STRING</span><br><span class="line">)</span><br><span class="line">PARTITIONED <span class="keyword">BY</span> (<span class="keyword">year</span> <span class="type">INT</span>, <span class="keyword">month</span> <span class="type">INT</span>)</span><br><span class="line">STORED <span class="keyword">AS</span> TEXTFILE</span><br><span class="line">LOCATION <span class="string">&#x27;/user/data/sales/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加分区</span></span><br><span class="line"><span class="keyword">ALTER TABLE</span> sales_data <span class="keyword">ADD</span> <span class="keyword">PARTITION</span> (<span class="keyword">year</span><span class="operator">=</span><span class="number">2023</span>, <span class="keyword">month</span><span class="operator">=</span><span class="number">12</span>)</span><br><span class="line">LOCATION <span class="string">&#x27;/user/data/sales/2023/12/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询数据</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    customer_id,</span><br><span class="line">    <span class="built_in">SUM</span>(quantity <span class="operator">*</span> price) <span class="keyword">as</span> total_amount</span><br><span class="line"><span class="keyword">FROM</span> sales_data</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">year</span> <span class="operator">=</span> <span class="number">2023</span> <span class="keyword">AND</span> <span class="keyword">month</span> <span class="operator">=</span> <span class="number">12</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> customer_id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> total_amount <span class="keyword">DESC</span></span><br><span class="line">LIMIT <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建内部表并插入数据</span></span><br><span class="line"><span class="keyword">CREATE TABLE</span> customer_summary <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    customer_id,</span><br><span class="line">    <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">as</span> order_count,</span><br><span class="line">    <span class="built_in">SUM</span>(quantity <span class="operator">*</span> price) <span class="keyword">as</span> total_spent,</span><br><span class="line">    <span class="built_in">AVG</span>(quantity <span class="operator">*</span> price) <span class="keyword">as</span> avg_order_value</span><br><span class="line"><span class="keyword">FROM</span> sales_data</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> customer_id;</span><br></pre></td></tr></table></figure>

<h2 id="（二）HBase-NoSQL数据库"><a href="#（二）HBase-NoSQL数据库" class="headerlink" title="（二）HBase NoSQL数据库"></a>（二）HBase NoSQL数据库</h2><ul>
<li><p><strong>HBase特点</strong></p>
<ul>
<li>列式存储：按列族存储数据</li>
<li>实时读写：支持随机实时读写</li>
<li>自动分片：Region自动分割和负载均衡</li>
<li>强一致性：提供强一致性保证</li>
<li>水平扩展：支持线性扩展</li>
</ul>
</li>
<li><p><strong>HBase数据模型</strong></p>
<ul>
<li>表（Table）：数据存储的逻辑单元</li>
<li>行键（Row Key）：唯一标识一行数据</li>
<li>列族（Column Family）：列的逻辑分组</li>
<li>列限定符（Column Qualifier）：列的具体名称</li>
<li>时间戳（Timestamp）：数据版本标识</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// HBase Java API示例</span></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.HBaseConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.util.Bytes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HBaseExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 创建配置</span></span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> HBaseConfiguration.create();</span><br><span class="line">        conf.set(<span class="string">&quot;hbase.zookeeper.quorum&quot;</span>, <span class="string">&quot;zk1,zk2,zk3&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> ConnectionFactory.createConnection(conf);</span><br><span class="line">        <span class="type">Table</span> <span class="variable">table</span> <span class="operator">=</span> connection.getTable(TableName.valueOf(<span class="string">&quot;user_profile&quot;</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 插入数据</span></span><br><span class="line">        <span class="type">Put</span> <span class="variable">put</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Put</span>(Bytes.toBytes(<span class="string">&quot;user001&quot;</span>));</span><br><span class="line">        put.addColumn(Bytes.toBytes(<span class="string">&quot;info&quot;</span>), Bytes.toBytes(<span class="string">&quot;name&quot;</span>), Bytes.toBytes(<span class="string">&quot;张三&quot;</span>));</span><br><span class="line">        put.addColumn(Bytes.toBytes(<span class="string">&quot;info&quot;</span>), Bytes.toBytes(<span class="string">&quot;age&quot;</span>), Bytes.toBytes(<span class="string">&quot;25&quot;</span>));</span><br><span class="line">        put.addColumn(Bytes.toBytes(<span class="string">&quot;contact&quot;</span>), Bytes.toBytes(<span class="string">&quot;email&quot;</span>), Bytes.toBytes(<span class="string">&quot;zhangsan@example.com&quot;</span>));</span><br><span class="line">        table.put(put);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 查询数据</span></span><br><span class="line">        <span class="type">Get</span> <span class="variable">get</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Get</span>(Bytes.toBytes(<span class="string">&quot;user001&quot;</span>));</span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> table.get(get);</span><br><span class="line">        </span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> Bytes.toString(result.getValue(Bytes.toBytes(<span class="string">&quot;info&quot;</span>), Bytes.toBytes(<span class="string">&quot;name&quot;</span>)));</span><br><span class="line">        <span class="type">String</span> <span class="variable">age</span> <span class="operator">=</span> Bytes.toString(result.getValue(Bytes.toBytes(<span class="string">&quot;info&quot;</span>), Bytes.toBytes(<span class="string">&quot;age&quot;</span>)));</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;姓名: &quot;</span> + name + <span class="string">&quot;, 年龄: &quot;</span> + age);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 扫描数据</span></span><br><span class="line">        <span class="type">Scan</span> <span class="variable">scan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scan</span>();</span><br><span class="line">        scan.addFamily(Bytes.toBytes(<span class="string">&quot;info&quot;</span>));</span><br><span class="line">        <span class="type">ResultScanner</span> <span class="variable">scanner</span> <span class="operator">=</span> table.getScanner(scan);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (Result r : scanner) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">rowKey</span> <span class="operator">=</span> Bytes.toString(r.getRow());</span><br><span class="line">            <span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> Bytes.toString(r.getValue(Bytes.toBytes(<span class="string">&quot;info&quot;</span>), Bytes.toBytes(<span class="string">&quot;name&quot;</span>)));</span><br><span class="line">            System.out.println(<span class="string">&quot;用户ID: &quot;</span> + rowKey + <span class="string">&quot;, 姓名: &quot;</span> + userName);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        scanner.close();</span><br><span class="line">        table.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="（三）Spark计算引擎"><a href="#（三）Spark计算引擎" class="headerlink" title="（三）Spark计算引擎"></a>（三）Spark计算引擎</h2><ul>
<li><p><strong>Spark优势</strong></p>
<ul>
<li>内存计算：数据缓存在内存中，提高性能</li>
<li>多语言支持：支持Scala、Java、Python、R</li>
<li>统一平台：批处理、流处理、机器学习、图计算</li>
<li>易用性：丰富的高级API和算子</li>
<li>容错性：RDD血缘关系提供容错能力</li>
</ul>
</li>
<li><p><strong>Spark核心概念</strong></p>
<ul>
<li>RDD：弹性分布式数据集</li>
<li>DataFrame：结构化数据抽象</li>
<li>Dataset：类型安全的数据抽象</li>
<li>Spark SQL：结构化数据处理</li>
<li>Spark Streaming：流数据处理</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># PySpark示例</span></span><br><span class="line"><span class="keyword">from</span> pyspark.sql <span class="keyword">import</span> SparkSession</span><br><span class="line"><span class="keyword">from</span> pyspark.sql.functions <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建SparkSession</span></span><br><span class="line">spark = SparkSession.builder \</span><br><span class="line">    .appName(<span class="string">&quot;SparkExample&quot;</span>) \</span><br><span class="line">    .config(<span class="string">&quot;spark.sql.adaptive.enabled&quot;</span>, <span class="string">&quot;true&quot;</span>) \</span><br><span class="line">    .getOrCreate()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line">df = spark.read.option(<span class="string">&quot;header&quot;</span>, <span class="string">&quot;true&quot;</span>).csv(<span class="string">&quot;hdfs://namenode:8020/user/data/sales.csv&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据处理</span></span><br><span class="line">result = df.groupBy(<span class="string">&quot;customer_id&quot;</span>) \</span><br><span class="line">    .agg(</span><br><span class="line">        count(<span class="string">&quot;order_id&quot;</span>).alias(<span class="string">&quot;order_count&quot;</span>),</span><br><span class="line">        <span class="built_in">sum</span>(<span class="string">&quot;amount&quot;</span>).alias(<span class="string">&quot;total_amount&quot;</span>),</span><br><span class="line">        avg(<span class="string">&quot;amount&quot;</span>).alias(<span class="string">&quot;avg_amount&quot;</span>)</span><br><span class="line">    ) \</span><br><span class="line">    .<span class="built_in">filter</span>(col(<span class="string">&quot;order_count&quot;</span>) &gt; <span class="number">5</span>) \</span><br><span class="line">    .orderBy(desc(<span class="string">&quot;total_amount&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示结果</span></span><br><span class="line">result.show(<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入结果</span></span><br><span class="line">result.write \</span><br><span class="line">    .mode(<span class="string">&quot;overwrite&quot;</span>) \</span><br><span class="line">    .option(<span class="string">&quot;header&quot;</span>, <span class="string">&quot;true&quot;</span>) \</span><br><span class="line">    .csv(<span class="string">&quot;hdfs://namenode:8020/user/output/customer_analysis&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止SparkSession</span></span><br><span class="line">spark.stop()</span><br></pre></td></tr></table></figure>

<h1 id="六、Hadoop集群部署与管理"><a href="#六、Hadoop集群部署与管理" class="headerlink" title="六、Hadoop集群部署与管理"></a>六、Hadoop集群部署与管理</h1><h2 id="（一）集群规划与部署"><a href="#（一）集群规划与部署" class="headerlink" title="（一）集群规划与部署"></a>（一）集群规划与部署</h2><ul>
<li><p><strong>硬件规划</strong></p>
<ul>
<li>NameNode：高内存、SSD存储、双网卡</li>
<li>DataNode：大容量存储、多磁盘、高网络带宽</li>
<li>ResourceManager：中等配置、高可用部署</li>
<li>网络：万兆以太网、交换机配置</li>
</ul>
</li>
<li><p><strong>软件部署</strong></p>
<ul>
<li>操作系统：CentOS、Ubuntu LTS版本</li>
<li>Java环境：OpenJDK 8或11</li>
<li>Hadoop安装：二进制包部署或编译安装</li>
<li>配置文件：core-site.xml、hdfs-site.xml、yarn-site.xml</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># Hadoop集群部署脚本</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置环境变量</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/lib/jvm/java-8-openjdk</span><br><span class="line"><span class="built_in">export</span> HADOOP_HOME=/opt/hadoop</span><br><span class="line"><span class="built_in">export</span> HADOOP_CONF_DIR=<span class="variable">$HADOOP_HOME</span>/etc/hadoop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建Hadoop用户</span></span><br><span class="line">useradd -m hadoop</span><br><span class="line">usermod -aG <span class="built_in">sudo</span> hadoop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置SSH免密登录</span></span><br><span class="line">su - hadoop -c <span class="string">&quot;ssh-keygen -t rsa -P &#x27;&#x27; -f ~/.ssh/id_rsa&quot;</span></span><br><span class="line">su - hadoop -c <span class="string">&quot;cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys&quot;</span></span><br><span class="line">su - hadoop -c <span class="string">&quot;chmod 600 ~/.ssh/authorized_keys&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载并解压Hadoop</span></span><br><span class="line"><span class="built_in">cd</span> /opt</span><br><span class="line">wget https://downloads.apache.org/hadoop/common/hadoop-3.3.4/hadoop-3.3.4.tar.gz</span><br><span class="line">tar -xzf hadoop-3.3.4.tar.gz</span><br><span class="line"><span class="built_in">mv</span> hadoop-3.3.4 hadoop</span><br><span class="line"><span class="built_in">chown</span> -R hadoop:hadoop hadoop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置Hadoop环境变量</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export HADOOP_HOME=/opt/hadoop&#x27;</span> &gt;&gt; /home/hadoop/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export HADOOP_CONF_DIR=$HADOOP_HOME/etc/hadoop&#x27;</span> &gt;&gt; /home/hadoop/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin&#x27;</span> &gt;&gt; /home/hadoop/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式化NameNode（仅在NameNode节点执行）</span></span><br><span class="line">su - hadoop -c <span class="string">&quot;<span class="variable">$HADOOP_HOME</span>/bin/hdfs namenode -format -force&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动Hadoop集群</span></span><br><span class="line">su - hadoop -c <span class="string">&quot;<span class="variable">$HADOOP_HOME</span>/sbin/start-dfs.sh&quot;</span></span><br><span class="line">su - hadoop -c <span class="string">&quot;<span class="variable">$HADOOP_HOME</span>/sbin/start-yarn.sh&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="（二）集群监控与管理"><a href="#（二）集群监控与管理" class="headerlink" title="（二）集群监控与管理"></a>（二）集群监控与管理</h2><ul>
<li><p><strong>Web界面监控</strong></p>
<ul>
<li>NameNode Web UI：<a href="http://namenode:9870/">http://namenode:9870</a></li>
<li>ResourceManager Web UI：<a href="http://resourcemanager:8088/">http://resourcemanager:8088</a></li>
<li>DataNode Web UI：<a href="http://datanode:9864/">http://datanode:9864</a></li>
<li>NodeManager Web UI：<a href="http://nodemanager:8042/">http://nodemanager:8042</a></li>
</ul>
</li>
<li><p><strong>命令行监控</strong></p>
<ul>
<li>集群状态：hdfs dfsadmin -report</li>
<li>节点状态：yarn node -list</li>
<li>应用状态：yarn application -list</li>
<li>日志查看：yarn logs -applicationId app_id</li>
</ul>
</li>
<li><p><strong>第三方监控工具</strong></p>
<ul>
<li>Ambari：集群管理和监控平台</li>
<li>Cloudera Manager：企业级集群管理</li>
<li>Ganglia：分布式监控系统</li>
<li>Nagios：网络监控系统</li>
<li>Prometheus + Grafana：现代监控方案</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hadoop集群健康检查脚本</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=== Hadoop集群健康检查 ===&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查HDFS状态</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;1. HDFS文件系统状态：&quot;</span></span><br><span class="line">hdfs dfsadmin -report | grep -E <span class="string">&quot;Live datanodes|Dead datanodes|DFS Used%&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查HDFS文件系统完整性</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;2. HDFS文件系统完整性检查：&quot;</span></span><br><span class="line">hdfs fsck / -files -blocks -locations | <span class="built_in">tail</span> -10</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查YARN集群状态</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;3. YARN集群状态：&quot;</span></span><br><span class="line">yarn node -list -all | grep -E <span class="string">&quot;RUNNING|UNHEALTHY|LOST&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查运行中的应用</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;4. 运行中的应用：&quot;</span></span><br><span class="line">yarn application -list -appStates RUNNING</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查集群资源使用情况</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;5. 集群资源使用情况：&quot;</span></span><br><span class="line">yarn top</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查关键服务进程</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;6. 关键服务进程检查：&quot;</span></span><br><span class="line">jps | grep -E <span class="string">&quot;NameNode|DataNode|ResourceManager|NodeManager&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="（三）性能调优与故障排除"><a href="#（三）性能调优与故障排除" class="headerlink" title="（三）性能调优与故障排除"></a>（三）性能调优与故障排除</h2><ul>
<li><p><strong>HDFS性能调优</strong></p>
<ul>
<li>块大小优化：根据文件大小调整块大小</li>
<li>副本数量：根据可靠性需求调整副本数</li>
<li>压缩配置：启用数据压缩减少存储和网络开销</li>
<li>缓存配置：配置HDFS缓存提高读性能</li>
</ul>
</li>
<li><p><strong>YARN性能调优</strong></p>
<ul>
<li>内存配置：合理配置容器内存大小</li>
<li>CPU配置：启用CPU资源调度</li>
<li>调度器优化：选择合适的调度器和配置</li>
<li>本地化：提高数据本地性减少网络传输</li>
</ul>
</li>
<li><p><strong>常见故障排除</strong></p>
<ul>
<li>NameNode故障：检查内存、磁盘空间、网络</li>
<li>DataNode故障：检查磁盘健康、网络连接</li>
<li>作业失败：检查日志、资源配置、数据格式</li>
<li>性能问题：分析瓶颈、优化配置、硬件升级</li>
</ul>
</li>
</ul>
<hr>
<p><strong>总结</strong>：Hadoop作为大数据处理的基础平台，提供了可靠的分布式存储和计算能力。HDFS解决了大规模数据存储问题，MapReduce提供了简单易用的分布式计算模型，YARN实现了资源的统一管理和调度。</p>
<p>随着大数据技术的发展，Hadoop生态系统不断丰富，Spark、Flink等新一代计算引擎在某些场景下提供了更好的性能。但Hadoop作为大数据的基石，其稳定性、可靠性和成熟的生态系统仍然使其在企业级大数据应用中占据重要地位。</p>
<p>学习Hadoop需要理解分布式系统的基本概念，掌握HDFS、MapReduce、YARN的核心原理，熟悉生态系统中各组件的使用。在实际应用中，要根据业务需求选择合适的技术栈，合理规划集群架构，做好性能调优和运维管理。掌握Hadoop技术，将为您在大数据领域的发展奠定坚实的基础。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="一、Hadoop概述与架构"><a href="#一、Hadoop概述与架构" class="headerlink" title="一、Hadoop概述与架构"></a>一、Hadoop概述与架构</h1><h2 id="（一）Hadoop简介"><a href=]]>
    </summary>
    
      <category term="Hadoop" scheme="https://uwakeme.tech/tags/Hadoop/"/>
    
      <category term="大数据" scheme="https://uwakeme.tech/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="分布式系统" scheme="https://uwakeme.tech/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="HDFS" scheme="https://uwakeme.tech/tags/HDFS/"/>
    
      <category term="MapReduce" scheme="https://uwakeme.tech/tags/MapReduce/"/>
    
      <category term="YARN" scheme="https://uwakeme.tech/tags/YARN/"/>
    
      <category term="数据处理" scheme="https://uwakeme.tech/tags/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    
      <category term="大数据" scheme="https://uwakeme.tech/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[【前端】CommonJS模块系统详解：Node.js的模块化基石]]></title>
    <link href="https://uwakeme.tech/2025/07/28/%E5%89%8D%E7%AB%AF/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91CommonJS%E6%A8%A1%E5%9D%97%E7%B3%BB%E7%BB%9F%E8%AF%A6%E8%A7%A3%EF%BC%9ANode.js%E7%9A%84%E6%A8%A1%E5%9D%97%E5%8C%96%E5%9F%BA%E7%9F%B3/"/>
    <id>https://uwakeme.tech/2025/07/28/前端/【前端】CommonJS模块系统详解：Node.js的模块化基石/</id>
    <published>2025-07-27T16:00:00.000Z</published>
    <updated>2025-07-29T01:19:18.938Z</updated>
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在JavaScript的发展历程中，模块化一直是一个重要的话题。CommonJS作为Node.js采用的模块系统，为服务端JavaScript开发奠定了坚实的基础。本文将深入探讨CommonJS的核心概念、工作原理、语法特性，以及它与现代ES6模块系统的区别和联系。</p>
<h1 id="一、CommonJS模块系统概述"><a href="#一、CommonJS模块系统概述" class="headerlink" title="一、CommonJS模块系统概述"></a>一、CommonJS模块系统概述</h1><h2 id="（一）什么是CommonJS"><a href="#（一）什么是CommonJS" class="headerlink" title="（一）什么是CommonJS"></a>（一）什么是CommonJS</h2><p>CommonJS是一个JavaScript模块化规范，最初由Mozilla的工程师Kevin Dangoor于2009年提出。它的目标是为JavaScript定义一套通用的模块API，使JavaScript能够在浏览器之外的环境中运行，特别是服务器端环境。</p>
<h3 id="1-设计目标"><a href="#1-设计目标" class="headerlink" title="1. 设计目标"></a>1. 设计目标</h3><p>CommonJS规范的主要设计目标包括：</p>
<ul>
<li><strong>模块化开发</strong>：将代码分割成独立的模块，提高代码的可维护性</li>
<li><strong>依赖管理</strong>：明确模块间的依赖关系，避免全局变量污染</li>
<li><strong>代码复用</strong>：通过模块导入导出机制，实现代码的高效复用</li>
<li><strong>服务端支持</strong>：为JavaScript在服务器端运行提供模块化支持</li>
</ul>
<h3 id="2-核心特点"><a href="#2-核心特点" class="headerlink" title="2. 核心特点"></a>2. 核心特点</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CommonJS的核心特点</span></span><br><span class="line"><span class="comment">// 1. 同步加载 - 模块在运行时同步加载</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 动态导入 - 可以在条件语句中导入模块</span></span><br><span class="line"><span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;development&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> debug = <span class="built_in">require</span>(<span class="string">&#x27;debug&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 值拷贝 - 导出的是值的拷贝，不是引用</span></span><br><span class="line"><span class="keyword">const</span> &#123; count &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./counter&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="（二）CommonJS在Node-js中的实现"><a href="#（二）CommonJS在Node-js中的实现" class="headerlink" title="（二）CommonJS在Node.js中的实现"></a>（二）CommonJS在Node.js中的实现</h2><p>Node.js是CommonJS规范最成功的实现之一，它将CommonJS作为默认的模块系统。</p>
<h3 id="1-Node-js模块系统架构"><a href="#1-Node-js模块系统架构" class="headerlink" title="1. Node.js模块系统架构"></a>1. Node.js模块系统架构</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Node.js为每个模块提供以下全局对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(__filename);  <span class="comment">// 当前模块的文件路径</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(__dirname);   <span class="comment">// 当前模块的目录路径</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">module</span>);      <span class="comment">// 当前模块对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">exports</span>);     <span class="comment">// module.exports的引用</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">require</span>);     <span class="comment">// 模块加载函数</span></span><br></pre></td></tr></table></figure>

<h3 id="2-模块包装机制"><a href="#2-模块包装机制" class="headerlink" title="2. 模块包装机制"></a>2. 模块包装机制</h3><p>Node.js在执行模块代码前，会将其包装在一个函数中：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Node.js实际执行的代码结构</span></span><br><span class="line">(<span class="keyword">function</span>(<span class="params"><span class="built_in">exports</span>, <span class="built_in">require</span>, <span class="variable language_">module</span>, __filename, __dirname</span>) &#123;</span><br><span class="line">    <span class="comment">// 你的模块代码在这里</span></span><br><span class="line">    <span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">readFile</span>(<span class="params">path</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> fs.<span class="title function_">readFileSync</span>(path, <span class="string">&#x27;utf8&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">module</span>.<span class="property">exports</span> = &#123; readFile &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="二、CommonJS核心语法"><a href="#二、CommonJS核心语法" class="headerlink" title="二、CommonJS核心语法"></a>二、CommonJS核心语法</h1><h2 id="（一）模块导出-exports和module-exports"><a href="#（一）模块导出-exports和module-exports" class="headerlink" title="（一）模块导出 - exports和module.exports"></a>（一）模块导出 - exports和module.exports</h2><p>CommonJS提供了两种导出方式：<code>exports</code>和<code>module.exports</code>。</p>
<h3 id="1-使用exports导出"><a href="#1-使用exports导出" class="headerlink" title="1. 使用exports导出"></a>1. 使用exports导出</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// math.js - 使用exports导出多个函数</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">add</span> = <span class="keyword">function</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">subtract</span> = <span class="keyword">function</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">PI</span> = <span class="number">3.14159</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以使用箭头函数</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">multiply</span> = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a * b;</span><br></pre></td></tr></table></figure>

<h3 id="2-使用module-exports导出"><a href="#2-使用module-exports导出" class="headerlink" title="2. 使用module.exports导出"></a>2. 使用module.exports导出</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// calculator.js - 使用module.exports导出整个对象</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">add</span>: <span class="keyword">function</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="attr">subtract</span>: <span class="keyword">function</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> a - b;</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 支持ES6简写语法</span></span><br><span class="line">    <span class="title function_">multiply</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> a * b;</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="attr">divide</span>: <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (b === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;除数不能为零&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a / b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="3-导出类和构造函数"><a href="#3-导出类和构造函数" class="headerlink" title="3. 导出类和构造函数"></a>3. 导出类和构造函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// user.js - 导出类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name, email</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">email</span> = email;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">createdAt</span> = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">getInfo</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`用户: <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>, 邮箱: <span class="subst">$&#123;<span class="variable language_">this</span>.email&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">validateEmail</span>(<span class="params">email</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> emailRegex = <span class="regexp">/^[^\s@]+@[^\s@]+\.[^\s@]+$/</span>;</span><br><span class="line">        <span class="keyword">return</span> emailRegex.<span class="title function_">test</span>(email);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">User</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者导出构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Product</span>(<span class="params">name, price</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">price</span> = price;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">id</span> = <span class="title class_">Math</span>.<span class="title function_">random</span>().<span class="title function_">toString</span>(<span class="number">36</span>).<span class="title function_">substr</span>(<span class="number">2</span>, <span class="number">9</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Product</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getPrice</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`¥<span class="subst">$&#123;<span class="variable language_">this</span>.price.toFixed(<span class="number">2</span>)&#125;</span>`</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">Product</span>;</span><br></pre></td></tr></table></figure>

<h2 id="（二）模块导入-require函数"><a href="#（二）模块导入-require函数" class="headerlink" title="（二）模块导入 - require函数"></a>（二）模块导入 - require函数</h2><p><code>require</code>函数是CommonJS中加载模块的核心机制。</p>
<h3 id="1-基本导入语法"><a href="#1-基本导入语法" class="headerlink" title="1. 基本导入语法"></a>1. 基本导入语法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入核心模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入本地模块</span></span><br><span class="line"><span class="keyword">const</span> math = <span class="built_in">require</span>(<span class="string">&#x27;./math&#x27;</span>);           <span class="comment">// 相对路径</span></span><br><span class="line"><span class="keyword">const</span> utils = <span class="built_in">require</span>(<span class="string">&#x27;../utils/helper&#x27;</span>); <span class="comment">// 相对路径</span></span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">&#x27;/app/config&#x27;</span>);    <span class="comment">// 绝对路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入npm包</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> lodash = <span class="built_in">require</span>(<span class="string">&#x27;lodash&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> moment = <span class="built_in">require</span>(<span class="string">&#x27;moment&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="2-解构导入"><a href="#2-解构导入" class="headerlink" title="2. 解构导入"></a>2. 解构导入</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解构导入特定功能</span></span><br><span class="line"><span class="keyword">const</span> &#123; readFile, writeFile &#125; = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; join, resolve, basename &#125; = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用解构导入自定义模块</span></span><br><span class="line"><span class="keyword">const</span> &#123; add, subtract, <span class="variable constant_">PI</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./math&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 混合导入</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">Router</span> &#125; = express;</span><br></pre></td></tr></table></figure>

<h3 id="3-条件导入和动态导入"><a href="#3-条件导入和动态导入" class="headerlink" title="3. 条件导入和动态导入"></a>3. 条件导入和动态导入</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 条件导入</span></span><br><span class="line"><span class="keyword">let</span> logger;</span><br><span class="line"><span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span>) &#123;</span><br><span class="line">    logger = <span class="built_in">require</span>(<span class="string">&#x27;./production-logger&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    logger = <span class="built_in">require</span>(<span class="string">&#x27;./development-logger&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态导入（基于变量）</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">loadModule</span>(<span class="params">moduleName</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">require</span>(moduleName);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`无法加载模块 <span class="subst">$&#123;moduleName&#125;</span>:`</span>, error.<span class="property">message</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dbDriver = <span class="title function_">loadModule</span>(process.<span class="property">env</span>.<span class="property">DB_TYPE</span> || <span class="string">&#x27;mysql&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h1 id="三、CommonJS模块加载机制"><a href="#三、CommonJS模块加载机制" class="headerlink" title="三、CommonJS模块加载机制"></a>三、CommonJS模块加载机制</h1><h2 id="（一）模块解析规则"><a href="#（一）模块解析规则" class="headerlink" title="（一）模块解析规则"></a>（一）模块解析规则</h2><p>Node.js按照特定的规则来解析模块路径：</p>
<h3 id="1-核心模块优先级最高"><a href="#1-核心模块优先级最高" class="headerlink" title="1. 核心模块优先级最高"></a>1. 核心模块优先级最高</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这些都是Node.js核心模块，优先级最高</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">&#x27;crypto&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="2-文件模块解析"><a href="#2-文件模块解析" class="headerlink" title="2. 文件模块解析"></a>2. 文件模块解析</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Node.js会按以下顺序查找文件：</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;./math&#x27;</span>);</span><br><span class="line"><span class="comment">// 1. ./math.js</span></span><br><span class="line"><span class="comment">// 2. ./math.json</span></span><br><span class="line"><span class="comment">// 3. ./math.node</span></span><br><span class="line"><span class="comment">// 4. ./math/index.js</span></span><br><span class="line"><span class="comment">// 5. ./math/package.json中main字段指定的文件</span></span><br></pre></td></tr></table></figure>

<h3 id="3-node-modules查找机制"><a href="#3-node-modules查找机制" class="headerlink" title="3. node_modules查找机制"></a>3. node_modules查找机制</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查找npm包时的搜索路径</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">// 从当前目录开始，逐级向上查找node_modules目录：</span></span><br><span class="line"><span class="comment">// ./node_modules/express</span></span><br><span class="line"><span class="comment">// ../node_modules/express</span></span><br><span class="line"><span class="comment">// ../../node_modules/express</span></span><br><span class="line"><span class="comment">// ... 直到根目录</span></span><br></pre></td></tr></table></figure>

<h2 id="（二）模块缓存机制"><a href="#（二）模块缓存机制" class="headerlink" title="（二）模块缓存机制"></a>（二）模块缓存机制</h2><p>CommonJS具有强大的缓存机制，确保模块只被加载一次。</p>
<h3 id="1-缓存示例"><a href="#1-缓存示例" class="headerlink" title="1. 缓存示例"></a>1. 缓存示例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// counter.js</span></span><br><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> ++count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getCount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123; increment, getCount &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">const</span> counter1 = <span class="built_in">require</span>(<span class="string">&#x27;./counter&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> counter2 = <span class="built_in">require</span>(<span class="string">&#x27;./counter&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(counter1 === counter2); <span class="comment">// true - 同一个对象引用</span></span><br><span class="line"></span><br><span class="line">counter1.<span class="title function_">increment</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(counter2.<span class="title function_">getCount</span>()); <span class="comment">// 1 - 共享状态</span></span><br></pre></td></tr></table></figure>

<h3 id="2-清除缓存"><a href="#2-清除缓存" class="headerlink" title="2. 清除缓存"></a>2. 清除缓存</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查看模块缓存</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="built_in">require</span>.<span class="property">cache</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除特定模块的缓存</span></span><br><span class="line"><span class="keyword">delete</span> <span class="built_in">require</span>.<span class="property">cache</span>[<span class="built_in">require</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;./config&#x27;</span>)];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重新加载模块</span></span><br><span class="line"><span class="keyword">const</span> freshConfig = <span class="built_in">require</span>(<span class="string">&#x27;./config&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h1 id="四、CommonJS实践应用"><a href="#四、CommonJS实践应用" class="headerlink" title="四、CommonJS实践应用"></a>四、CommonJS实践应用</h1><h2 id="（一）创建实用工具模块"><a href="#（一）创建实用工具模块" class="headerlink" title="（一）创建实用工具模块"></a>（一）创建实用工具模块</h2><h3 id="1-文件操作工具"><a href="#1-文件操作工具" class="headerlink" title="1. 文件操作工具"></a>1. 文件操作工具</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fileUtils.js</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 异步读取JSON文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">filePath</span> - 文件路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">Promise&lt;Object&gt;</span>&#125; 解析后的JSON对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">readJsonFile</span>(<span class="params">filePath</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> data = <span class="keyword">await</span> fs.<span class="property">promises</span>.<span class="title function_">readFile</span>(filePath, <span class="string">&#x27;utf8&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">parse</span>(data);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`读取JSON文件失败: <span class="subst">$&#123;error.message&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 异步写入JSON文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">filePath</span> - 文件路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; <span class="variable">data</span> - 要写入的数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">writeJsonFile</span>(<span class="params">filePath, data</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> jsonString = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data, <span class="literal">null</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">await</span> fs.<span class="property">promises</span>.<span class="title function_">writeFile</span>(filePath, jsonString, <span class="string">&#x27;utf8&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`写入JSON文件失败: <span class="subst">$&#123;error.message&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 确保目录存在</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">dirPath</span> - 目录路径</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">ensureDir</span>(<span class="params">dirPath</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">await</span> fs.<span class="property">promises</span>.<span class="title function_">access</span>(dirPath);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="keyword">await</span> fs.<span class="property">promises</span>.<span class="title function_">mkdir</span>(dirPath, &#123; <span class="attr">recursive</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    readJsonFile,</span><br><span class="line">    writeJsonFile,</span><br><span class="line">    ensureDir</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="2-配置管理模块"><a href="#2-配置管理模块" class="headerlink" title="2. 配置管理模块"></a>2. 配置管理模块</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; readJsonFile &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./fileUtils&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConfigManager</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">config</span> = &#123;&#125;;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">loaded</span> = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">load</span>(<span class="params">configPath = <span class="string">&#x27;./config.json&#x27;</span></span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> fullPath = path.<span class="title function_">resolve</span>(configPath);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">config</span> = <span class="keyword">await</span> <span class="title function_">readJsonFile</span>(fullPath);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">loaded</span> = <span class="literal">true</span>;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;配置加载成功&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;配置加载失败:&#x27;</span>, error.<span class="property">message</span>);</span><br><span class="line">            <span class="comment">// 使用默认配置</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">config</span> = <span class="variable language_">this</span>.<span class="title function_">getDefaultConfig</span>();</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">loaded</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">get</span>(<span class="params">key, defaultValue = <span class="literal">null</span></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">loaded</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;配置尚未加载，请先调用load()方法&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">getNestedValue</span>(<span class="variable language_">this</span>.<span class="property">config</span>, key, defaultValue);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">getNestedValue</span>(<span class="params">obj, key, defaultValue</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> keys = key.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="keyword">let</span> current = obj;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> k <span class="keyword">of</span> keys) &#123;</span><br><span class="line">            <span class="keyword">if</span> (current &amp;&amp; <span class="keyword">typeof</span> current === <span class="string">&#x27;object&#x27;</span> &amp;&amp; k <span class="keyword">in</span> current) &#123;</span><br><span class="line">                current = current[k];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> defaultValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> current;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">getDefaultConfig</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">server</span>: &#123;</span><br><span class="line">                <span class="attr">port</span>: <span class="number">3000</span>,</span><br><span class="line">                <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">database</span>: &#123;</span><br><span class="line">                <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">                <span class="attr">port</span>: <span class="number">5432</span>,</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;myapp&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出单例实例</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">new</span> <span class="title class_">ConfigManager</span>();</span><br></pre></td></tr></table></figure>

<h2 id="（二）模块组织最佳实践"><a href="#（二）模块组织最佳实践" class="headerlink" title="（二）模块组织最佳实践"></a>（二）模块组织最佳实践</h2><h3 id="1-目录结构组织"><a href="#1-目录结构组织" class="headerlink" title="1. 目录结构组织"></a>1. 目录结构组织</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 推荐的项目结构</span></span><br><span class="line">project/</span><br><span class="line">├── lib/                 <span class="comment">// 核心库文件</span></span><br><span class="line">│   ├── database.<span class="property">js</span></span><br><span class="line">│   ├── logger.<span class="property">js</span></span><br><span class="line">│   └── validator.<span class="property">js</span></span><br><span class="line">├── utils/              <span class="comment">// 工具函数</span></span><br><span class="line">│   ├── fileUtils.<span class="property">js</span></span><br><span class="line">│   ├── dateUtils.<span class="property">js</span></span><br><span class="line">│   └── stringUtils.<span class="property">js</span></span><br><span class="line">├── config/             <span class="comment">// 配置文件</span></span><br><span class="line">│   ├── index.<span class="property">js</span></span><br><span class="line">│   ├── development.<span class="property">js</span></span><br><span class="line">│   └── production.<span class="property">js</span></span><br><span class="line">├── models/             <span class="comment">// 数据模型</span></span><br><span class="line">│   ├── <span class="title class_">User</span>.<span class="property">js</span></span><br><span class="line">│   └── <span class="title class_">Product</span>.<span class="property">js</span></span><br><span class="line">└── app.<span class="property">js</span>             <span class="comment">// 应用入口</span></span><br></pre></td></tr></table></figure>

<h3 id="2-索引文件模式"><a href="#2-索引文件模式" class="headerlink" title="2. 索引文件模式"></a>2. 索引文件模式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// utils/index.js - 统一导出工具函数</span></span><br><span class="line"><span class="keyword">const</span> fileUtils = <span class="built_in">require</span>(<span class="string">&#x27;./fileUtils&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> dateUtils = <span class="built_in">require</span>(<span class="string">&#x27;./dateUtils&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> stringUtils = <span class="built_in">require</span>(<span class="string">&#x27;./stringUtils&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    ...fileUtils,</span><br><span class="line">    ...dateUtils,</span><br><span class="line">    ...stringUtils</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用时可以统一导入</span></span><br><span class="line"><span class="keyword">const</span> &#123; readJsonFile, formatDate, capitalize &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./utils&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h1 id="五、CommonJS与ES6模块对比"><a href="#五、CommonJS与ES6模块对比" class="headerlink" title="五、CommonJS与ES6模块对比"></a>五、CommonJS与ES6模块对比</h1><h2 id="（一）语法差异"><a href="#（一）语法差异" class="headerlink" title="（一）语法差异"></a>（一）语法差异</h2><h3 id="1-导出语法对比"><a href="#1-导出语法对比" class="headerlink" title="1. 导出语法对比"></a>1. 导出语法对比</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CommonJS导出</span></span><br><span class="line"><span class="comment">// 方式1：exports</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">add</span> = <span class="keyword">function</span>(<span class="params">a, b</span>) &#123; <span class="keyword">return</span> a + b; &#125;;</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">PI</span> = <span class="number">3.14159</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式2：module.exports</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">add</span>: <span class="keyword">function</span>(<span class="params">a, b</span>) &#123; <span class="keyword">return</span> a + b; &#125;,</span><br><span class="line">    <span class="attr">PI</span>: <span class="number">3.14159</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6模块导出</span></span><br><span class="line"><span class="comment">// 命名导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123; <span class="keyword">return</span> a + b; &#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="number">3.14159</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">add</span>: <span class="keyword">function</span>(<span class="params">a, b</span>) &#123; <span class="keyword">return</span> a + b; &#125;,</span><br><span class="line">    <span class="attr">PI</span>: <span class="number">3.14159</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="2-导入语法对比"><a href="#2-导入语法对比" class="headerlink" title="2. 导入语法对比"></a>2. 导入语法对比</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CommonJS导入</span></span><br><span class="line"><span class="keyword">const</span> math = <span class="built_in">require</span>(<span class="string">&#x27;./math&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; add, <span class="variable constant_">PI</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./math&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6模块导入</span></span><br><span class="line"><span class="keyword">import</span> math <span class="keyword">from</span> <span class="string">&#x27;./math&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; add, <span class="variable constant_">PI</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./math&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> math <span class="keyword">from</span> <span class="string">&#x27;./math&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="（二）核心差异"><a href="#（二）核心差异" class="headerlink" title="（二）核心差异"></a>（二）核心差异</h2><h3 id="1-加载时机"><a href="#1-加载时机" class="headerlink" title="1. 加载时机"></a>1. 加载时机</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CommonJS - 运行时加载（同步）</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;开始加载&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>); <span class="comment">// 运行到这里才加载</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;加载完成&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6模块 - 编译时加载（静态）</span></span><br><span class="line"><span class="keyword">import</span> fs <span class="keyword">from</span> <span class="string">&#x27;fs&#x27;</span>; <span class="comment">// 在编译阶段就确定了依赖关系</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;开始执行&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="2-值传递方式"><a href="#2-值传递方式" class="headerlink" title="2. 值传递方式"></a>2. 值传递方式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// counter.js (CommonJS)</span></span><br><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">count</span> = count;</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">increment</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    count++;</span><br><span class="line">    <span class="built_in">exports</span>.<span class="property">count</span> = count; <span class="comment">// 需要手动更新导出值</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; count, increment &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./counter&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count); <span class="comment">// 0</span></span><br><span class="line"><span class="title function_">increment</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count); <span class="comment">// 仍然是0，因为是值拷贝</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// counter.mjs (ES6模块)</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">    count++; <span class="comment">// 导出的是引用，会自动更新</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.mjs</span></span><br><span class="line"><span class="keyword">import</span> &#123; count, increment &#125; <span class="keyword">from</span> <span class="string">&#x27;./counter.mjs&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count); <span class="comment">// 0</span></span><br><span class="line"><span class="title function_">increment</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count); <span class="comment">// 1，因为是引用</span></span><br></pre></td></tr></table></figure>

<h3 id="3-循环依赖处理"><a href="#3-循环依赖处理" class="headerlink" title="3. 循环依赖处理"></a>3. 循环依赖处理</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CommonJS循环依赖示例</span></span><br><span class="line"><span class="comment">// a.js</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a开始&#x27;</span>);</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">done</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">const</span> b = <span class="built_in">require</span>(<span class="string">&#x27;./b&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;在a中，b.done =&#x27;</span>, b.<span class="property">done</span>);</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">done</span> = <span class="literal">true</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a结束&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// b.js</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;b开始&#x27;</span>);</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">done</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">const</span> a = <span class="built_in">require</span>(<span class="string">&#x27;./a&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;在b中，a.done =&#x27;</span>, a.<span class="property">done</span>);</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">done</span> = <span class="literal">true</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;b结束&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="built_in">require</span>(<span class="string">&#x27;./a&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> b = <span class="built_in">require</span>(<span class="string">&#x27;./b&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;在main中，a.done =&#x27;</span>, a.<span class="property">done</span>, <span class="string">&#x27;, b.done =&#x27;</span>, b.<span class="property">done</span>);</span><br></pre></td></tr></table></figure>

<h2 id="（三）适用场景对比"><a href="#（三）适用场景对比" class="headerlink" title="（三）适用场景对比"></a>（三）适用场景对比</h2><h3 id="1-CommonJS适用场景"><a href="#1-CommonJS适用场景" class="headerlink" title="1. CommonJS适用场景"></a>1. CommonJS适用场景</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. Node.js服务端开发</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 动态模块加载</span></span><br><span class="line"><span class="keyword">const</span> dbType = process.<span class="property">env</span>.<span class="property">DB_TYPE</span> || <span class="string">&#x27;mysql&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> db = <span class="built_in">require</span>(<span class="string">`./drivers/<span class="subst">$&#123;dbType&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 条件加载</span></span><br><span class="line"><span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;development&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> debug = <span class="built_in">require</span>(<span class="string">&#x27;debug&#x27;</span>)(<span class="string">&#x27;app&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-ES6模块适用场景"><a href="#2-ES6模块适用场景" class="headerlink" title="2. ES6模块适用场景"></a>2. ES6模块适用场景</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 现代前端开发</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 静态分析和Tree Shaking</span></span><br><span class="line"><span class="keyword">import</span> &#123; debounce &#125; <span class="keyword">from</span> <span class="string">&#x27;lodash-es&#x27;</span>; <span class="comment">// 只导入需要的函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 类型检查友好</span></span><br><span class="line"><span class="keyword">import</span> type &#123; <span class="title class_">User</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./types&#x27;</span>; <span class="comment">// TypeScript类型导入</span></span><br></pre></td></tr></table></figure>

<h1 id="六、CommonJS进阶技巧"><a href="#六、CommonJS进阶技巧" class="headerlink" title="六、CommonJS进阶技巧"></a>六、CommonJS进阶技巧</h1><h2 id="（一）模块包装和私有变量"><a href="#（一）模块包装和私有变量" class="headerlink" title="（一）模块包装和私有变量"></a>（一）模块包装和私有变量</h2><h3 id="1-创建私有作用域"><a href="#1-创建私有作用域" class="headerlink" title="1. 创建私有作用域"></a>1. 创建私有作用域</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// logger.js - 使用IIFE创建私有作用域</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = (<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 私有变量，外部无法访问</span></span><br><span class="line">    <span class="keyword">let</span> logLevel = <span class="string">&#x27;info&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> logHistory = [];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">formatMessage</span>(<span class="params">level, message</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> timestamp = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toISOString</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`[<span class="subst">$&#123;timestamp&#125;</span>] <span class="subst">$&#123;level.toUpperCase()&#125;</span>: <span class="subst">$&#123;message&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 公共API</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="title function_">setLevel</span>(<span class="params">level</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ([<span class="string">&#x27;debug&#x27;</span>, <span class="string">&#x27;info&#x27;</span>, <span class="string">&#x27;warn&#x27;</span>, <span class="string">&#x27;error&#x27;</span>].<span class="title function_">includes</span>(level)) &#123;</span><br><span class="line">                logLevel = level;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="title function_">log</span>(<span class="params">message, level = <span class="string">&#x27;info&#x27;</span></span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">shouldLog</span>(level)) &#123;</span><br><span class="line">                <span class="keyword">const</span> formattedMessage = <span class="title function_">formatMessage</span>(level, message);</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(formattedMessage);</span><br><span class="line">                logHistory.<span class="title function_">push</span>(formattedMessage);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="title function_">shouldLog</span>(<span class="params">level</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> levels = &#123; <span class="attr">debug</span>: <span class="number">0</span>, <span class="attr">info</span>: <span class="number">1</span>, <span class="attr">warn</span>: <span class="number">2</span>, <span class="attr">error</span>: <span class="number">3</span> &#125;;</span><br><span class="line">            <span class="keyword">return</span> levels[level] &gt;= levels[logLevel];</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="title function_">getHistory</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> [...logHistory]; <span class="comment">// 返回副本，防止外部修改</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<h3 id="2-模块工厂模式"><a href="#2-模块工厂模式" class="headerlink" title="2. 模块工厂模式"></a>2. 模块工厂模式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// database.js - 工厂模式创建数据库连接</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createDatabase</span>(<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="comment">// 私有状态</span></span><br><span class="line">    <span class="keyword">let</span> connection = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> isConnected = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="keyword">async</span> <span class="title function_">connect</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isConnected) &#123;</span><br><span class="line">                <span class="keyword">return</span> connection;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 模拟数据库连接</span></span><br><span class="line">                connection = <span class="keyword">await</span> <span class="title function_">simulateConnection</span>(config);</span><br><span class="line">                isConnected = <span class="literal">true</span>;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;数据库连接成功&#x27;</span>);</span><br><span class="line">                <span class="keyword">return</span> connection;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;数据库连接失败:&#x27;</span>, error);</span><br><span class="line">                <span class="keyword">throw</span> error;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="keyword">async</span> <span class="title function_">disconnect</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (connection) &#123;</span><br><span class="line">                <span class="keyword">await</span> connection.<span class="title function_">close</span>();</span><br><span class="line">                connection = <span class="literal">null</span>;</span><br><span class="line">                isConnected = <span class="literal">false</span>;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;数据库连接已关闭&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="title function_">getStatus</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="attr">connected</span>: isConnected,</span><br><span class="line">                <span class="attr">config</span>: &#123; ...config, <span class="attr">password</span>: <span class="string">&#x27;***&#x27;</span> &#125; <span class="comment">// 隐藏敏感信息</span></span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">simulateConnection</span>(<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="comment">// 模拟异步连接过程</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(&#123;</span><br><span class="line">                <span class="attr">host</span>: config.<span class="property">host</span>,</span><br><span class="line">                <span class="attr">port</span>: config.<span class="property">port</span>,</span><br><span class="line">                <span class="attr">close</span>: <span class="title function_">async</span> () =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;连接已关闭&#x27;</span>)</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;, <span class="number">100</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = createDatabase;</span><br></pre></td></tr></table></figure>

<h2 id="（二）模块热重载"><a href="#（二）模块热重载" class="headerlink" title="（二）模块热重载"></a>（二）模块热重载</h2><h3 id="1-开发环境热重载"><a href="#1-开发环境热重载" class="headerlink" title="1. 开发环境热重载"></a>1. 开发环境热重载</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hotReload.js - 开发环境模块热重载</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HotReloader</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">watchers</span> = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">modules</span> = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">require</span>(<span class="params">modulePath</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> fullPath = <span class="built_in">require</span>.<span class="title function_">resolve</span>(modulePath);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果是第一次加载，设置文件监听</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">watchers</span>.<span class="title function_">has</span>(fullPath)) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">setupWatcher</span>(fullPath);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回模块</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">require</span>(modulePath);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">setupWatcher</span>(<span class="params">filePath</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> watcher = fs.<span class="title function_">watchFile</span>(filePath, <span class="function">(<span class="params">curr, prev</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (curr.<span class="property">mtime</span> &gt; prev.<span class="property">mtime</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`文件 <span class="subst">$&#123;filePath&#125;</span> 已更新，重新加载...`</span>);</span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">reloadModule</span>(filePath);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">watchers</span>.<span class="title function_">set</span>(filePath, watcher);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">reloadModule</span>(<span class="params">filePath</span>) &#123;</span><br><span class="line">        <span class="comment">// 清除模块缓存</span></span><br><span class="line">        <span class="keyword">delete</span> <span class="built_in">require</span>.<span class="property">cache</span>[filePath];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 触发重载事件</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">emit</span>(<span class="string">&#x27;reload&#x27;</span>, filePath);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">emit</span>(<span class="params">event, data</span>) &#123;</span><br><span class="line">        <span class="comment">// 简单的事件发射器</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">listeners</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">listeners</span>[event]) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">listeners</span>[event].<span class="title function_">forEach</span>(<span class="function"><span class="params">callback</span> =&gt;</span> <span class="title function_">callback</span>(data));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">on</span>(<span class="params">event, callback</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">listeners</span>) <span class="variable language_">this</span>.<span class="property">listeners</span> = &#123;&#125;;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">listeners</span>[event]) <span class="variable language_">this</span>.<span class="property">listeners</span>[event] = [];</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">listeners</span>[event].<span class="title function_">push</span>(callback);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">cleanup</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 清理所有文件监听器</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">watchers</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">watcher, filePath</span>) =&gt;</span> &#123;</span><br><span class="line">            fs.<span class="title function_">unwatchFile</span>(filePath);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">watchers</span>.<span class="title function_">clear</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">new</span> <span class="title class_">HotReloader</span>();</span><br></pre></td></tr></table></figure>

<h2 id="（三）模块性能优化"><a href="#（三）模块性能优化" class="headerlink" title="（三）模块性能优化"></a>（三）模块性能优化</h2><h3 id="1-延迟加载"><a href="#1-延迟加载" class="headerlink" title="1. 延迟加载"></a>1. 延迟加载</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// lazyLoader.js - 延迟加载大型模块</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LazyLoader</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">cache</span> = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建延迟加载的getter</span></span><br><span class="line">    <span class="title function_">createLazyGetter</span>(<span class="params">target, property, modulePath</span>) &#123;</span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(target, property, &#123;</span><br><span class="line">            <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">has</span>(modulePath)) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`延迟加载模块: <span class="subst">$&#123;modulePath&#125;</span>`</span>);</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">set</span>(modulePath, <span class="built_in">require</span>(modulePath));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">get</span>(modulePath);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">configurable</span>: <span class="literal">true</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">const</span> lazyLoader = <span class="keyword">new</span> <span class="title class_">LazyLoader</span>();</span><br><span class="line"><span class="keyword">const</span> services = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只有在实际使用时才加载这些大型模块</span></span><br><span class="line">lazyLoader.<span class="title function_">createLazyGetter</span>(services, <span class="string">&#x27;imageProcessor&#x27;</span>, <span class="string">&#x27;./heavy-image-processor&#x27;</span>);</span><br><span class="line">lazyLoader.<span class="title function_">createLazyGetter</span>(services, <span class="string">&#x27;mlModel&#x27;</span>, <span class="string">&#x27;./machine-learning-model&#x27;</span>);</span><br><span class="line">lazyLoader.<span class="title function_">createLazyGetter</span>(services, <span class="string">&#x27;videoEncoder&#x27;</span>, <span class="string">&#x27;./video-encoder&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = services;</span><br></pre></td></tr></table></figure>

<h3 id="2-模块预加载"><a href="#2-模块预加载" class="headerlink" title="2. 模块预加载"></a>2. 模块预加载</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// preloader.js - 模块预加载器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ModulePreloader</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">preloadQueue</span> = [];</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">loaded</span> = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加到预加载队列</span></span><br><span class="line">    <span class="title function_">add</span>(<span class="params">modulePath, priority = <span class="number">0</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">preloadQueue</span>.<span class="title function_">push</span>(&#123; modulePath, priority &#125;);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">preloadQueue</span>.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> b.<span class="property">priority</span> - a.<span class="property">priority</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开始预加载</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">start</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;开始预加载模块...&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> &#123; modulePath &#125; <span class="keyword">of</span> <span class="variable language_">this</span>.<span class="property">preloadQueue</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">loaded</span>.<span class="title function_">has</span>(modulePath)) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">loadModule</span>(modulePath);</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">loaded</span>.<span class="title function_">add</span>(modulePath);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`预加载模块 <span class="subst">$&#123;modulePath&#125;</span> 失败:`</span>, error);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;模块预加载完成&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">loadModule</span>(<span class="params">modulePath</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 使用setImmediate避免阻塞事件循环</span></span><br><span class="line">            <span class="title function_">setImmediate</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="built_in">require</span>(modulePath);</span><br><span class="line">                    <span class="title function_">resolve</span>();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                    <span class="title function_">resolve</span>(); <span class="comment">// 即使失败也继续</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">new</span> <span class="title class_">ModulePreloader</span>();</span><br></pre></td></tr></table></figure>

<h1 id="七、常见问题与解决方案"><a href="#七、常见问题与解决方案" class="headerlink" title="七、常见问题与解决方案"></a>七、常见问题与解决方案</h1><h2 id="（一）循环依赖问题"><a href="#（一）循环依赖问题" class="headerlink" title="（一）循环依赖问题"></a>（一）循环依赖问题</h2><h3 id="1-识别循环依赖"><a href="#1-识别循环依赖" class="headerlink" title="1. 识别循环依赖"></a>1. 识别循环依赖</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dependencyTracker.js - 依赖关系追踪器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DependencyTracker</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">dependencies</span> = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">trackRequire</span>(<span class="params">requirer, required</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">dependencies</span>.<span class="title function_">has</span>(requirer)) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">dependencies</span>.<span class="title function_">set</span>(requirer, <span class="keyword">new</span> <span class="title class_">Set</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">dependencies</span>.<span class="title function_">get</span>(requirer).<span class="title function_">add</span>(required);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查循环依赖</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">hasCycle</span>(required, requirer)) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">`检测到循环依赖: <span class="subst">$&#123;requirer&#125;</span> &lt;-&gt; <span class="subst">$&#123;required&#125;</span>`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">hasCycle</span>(<span class="params">start, target, visited = <span class="keyword">new</span> <span class="built_in">Set</span>()</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (start === target) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (visited.<span class="title function_">has</span>(start)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        visited.<span class="title function_">add</span>(start);</span><br><span class="line">        <span class="keyword">const</span> deps = <span class="variable language_">this</span>.<span class="property">dependencies</span>.<span class="title function_">get</span>(start);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (deps) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">const</span> dep <span class="keyword">of</span> deps) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">hasCycle</span>(dep, target, visited)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">printDependencyGraph</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;依赖关系图:&#x27;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> [<span class="variable language_">module</span>, deps] <span class="keyword">of</span> <span class="variable language_">this</span>.<span class="property">dependencies</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">module</span>&#125;</span> -&gt; [<span class="subst">$&#123;<span class="built_in">Array</span>.<span class="keyword">from</span>(deps).join(<span class="string">&#x27;, &#x27;</span>)&#125;</span>]`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">new</span> <span class="title class_">DependencyTracker</span>();</span><br></pre></td></tr></table></figure>

<h3 id="2-解决循环依赖"><a href="#2-解决循环依赖" class="headerlink" title="2. 解决循环依赖"></a>2. 解决循环依赖</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方案1：延迟引用</span></span><br><span class="line"><span class="comment">// userService.js</span></span><br><span class="line"><span class="keyword">const</span> orderService = <span class="built_in">require</span>(<span class="string">&#x27;./orderService&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 延迟获取orderService的方法</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">getOrderService</span> = <span class="function">() =&gt;</span> orderService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">getUserOrders</span>(<span class="params">userId</span>) &#123;</span><br><span class="line">        <span class="comment">// 使用时才调用</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">getOrderService</span>().<span class="title function_">getOrdersByUserId</span>(userId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">new</span> <span class="title class_">UserService</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方案2：事件驱动解耦</span></span><br><span class="line"><span class="comment">// eventBus.js</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">EventEmitter</span> = <span class="built_in">require</span>(<span class="string">&#x27;events&#x27;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">new</span> <span class="title class_">EventEmitter</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// userService.js</span></span><br><span class="line"><span class="keyword">const</span> eventBus = <span class="built_in">require</span>(<span class="string">&#x27;./eventBus&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="title function_">createUser</span>(<span class="params">userData</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> user = <span class="variable language_">this</span>.<span class="title function_">saveUser</span>(userData);</span><br><span class="line">        <span class="comment">// 通过事件通知，而不是直接调用</span></span><br><span class="line">        eventBus.<span class="title function_">emit</span>(<span class="string">&#x27;user:created&#x27;</span>, user);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// orderService.js</span></span><br><span class="line"><span class="keyword">const</span> eventBus = <span class="built_in">require</span>(<span class="string">&#x27;./eventBus&#x27;</span>);</span><br><span class="line"></span><br><span class="line">eventBus.<span class="title function_">on</span>(<span class="string">&#x27;user:created&#x27;</span>, <span class="function">(<span class="params">user</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 处理用户创建后的订单相关逻辑</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`为用户 <span class="subst">$&#123;user.id&#125;</span> 初始化订单系统`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="（二）模块路径问题"><a href="#（二）模块路径问题" class="headerlink" title="（二）模块路径问题"></a>（二）模块路径问题</h2><h3 id="1-路径解析工具"><a href="#1-路径解析工具" class="headerlink" title="1. 路径解析工具"></a>1. 路径解析工具</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pathResolver.js - 路径解析工具</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PathResolver</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">baseDir = process.cwd()</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">baseDir</span> = baseDir;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">aliases</span> = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置路径别名</span></span><br><span class="line">    <span class="title function_">setAlias</span>(<span class="params">alias, realPath</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">aliases</span>.<span class="title function_">set</span>(alias, path.<span class="title function_">resolve</span>(<span class="variable language_">this</span>.<span class="property">baseDir</span>, realPath));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析路径</span></span><br><span class="line">    <span class="title function_">resolve</span>(<span class="params">modulePath</span>) &#123;</span><br><span class="line">        <span class="comment">// 检查是否使用了别名</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> [alias, realPath] <span class="keyword">of</span> <span class="variable language_">this</span>.<span class="property">aliases</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (modulePath.<span class="title function_">startsWith</span>(alias + <span class="string">&#x27;/&#x27;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> modulePath.<span class="title function_">replace</span>(alias, realPath);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 相对路径处理</span></span><br><span class="line">        <span class="keyword">if</span> (modulePath.<span class="title function_">startsWith</span>(<span class="string">&#x27;./&#x27;</span>) || modulePath.<span class="title function_">startsWith</span>(<span class="string">&#x27;../&#x27;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> path.<span class="title function_">resolve</span>(<span class="variable language_">this</span>.<span class="property">baseDir</span>, modulePath);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> modulePath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建require函数</span></span><br><span class="line">    <span class="title function_">createRequire</span>(<span class="params">fromPath</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> resolver = <span class="variable language_">this</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">customRequire</span>(<span class="params">modulePath</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> resolvedPath = resolver.<span class="title function_">resolve</span>(modulePath);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">require</span>(resolvedPath);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">const</span> resolver = <span class="keyword">new</span> <span class="title class_">PathResolver</span>();</span><br><span class="line">resolver.<span class="title function_">setAlias</span>(<span class="string">&#x27;@lib&#x27;</span>, <span class="string">&#x27;./lib&#x27;</span>);</span><br><span class="line">resolver.<span class="title function_">setAlias</span>(<span class="string">&#x27;@utils&#x27;</span>, <span class="string">&#x27;./utils&#x27;</span>);</span><br><span class="line">resolver.<span class="title function_">setAlias</span>(<span class="string">&#x27;@config&#x27;</span>, <span class="string">&#x27;./config&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 现在可以使用别名</span></span><br><span class="line"><span class="keyword">const</span> customRequire = resolver.<span class="title function_">createRequire</span>(__dirname);</span><br><span class="line"><span class="keyword">const</span> utils = <span class="title function_">customRequire</span>(<span class="string">&#x27;@utils/fileUtils&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">PathResolver</span>;</span><br></pre></td></tr></table></figure>

<h1 id="八、总结"><a href="#八、总结" class="headerlink" title="八、总结"></a>八、总结</h1><h2 id="（一）CommonJS的优势"><a href="#（一）CommonJS的优势" class="headerlink" title="（一）CommonJS的优势"></a>（一）CommonJS的优势</h2><ol>
<li><strong>简单易用</strong>：语法简洁，学习成本低</li>
<li><strong>同步加载</strong>：适合服务端环境，文件读取速度快</li>
<li><strong>动态特性</strong>：支持条件加载和运行时模块解析</li>
<li><strong>成熟稳定</strong>：在Node.js生态中经过长期验证</li>
<li><strong>向后兼容</strong>：与大量现有npm包兼容</li>
</ol>
<h2 id="（二）使用建议"><a href="#（二）使用建议" class="headerlink" title="（二）使用建议"></a>（二）使用建议</h2><h3 id="1-最佳实践"><a href="#1-最佳实践" class="headerlink" title="1. 最佳实践"></a>1. 最佳实践</h3><ul>
<li><strong>模块职责单一</strong>：每个模块应该有明确的职责</li>
<li><strong>避免循环依赖</strong>：通过合理的架构设计避免循环引用</li>
<li><strong>合理使用缓存</strong>：利用模块缓存机制提高性能</li>
<li><strong>错误处理</strong>：在require时进行适当的错误处理</li>
<li><strong>文档完善</strong>：为模块提供清晰的API文档</li>
</ul>
<h3 id="2-性能优化"><a href="#2-性能优化" class="headerlink" title="2. 性能优化"></a>2. 性能优化</h3><ul>
<li><strong>延迟加载</strong>：对于大型模块使用延迟加载策略</li>
<li><strong>模块预加载</strong>：在应用启动时预加载核心模块</li>
<li><strong>缓存管理</strong>：在必要时清理模块缓存</li>
<li><strong>路径优化</strong>：使用绝对路径或别名减少路径解析开销</li>
</ul>
<h2 id="（三）发展趋势"><a href="#（三）发展趋势" class="headerlink" title="（三）发展趋势"></a>（三）发展趋势</h2><p>随着ES6模块的普及，CommonJS在前端开发中的使用逐渐减少，但在Node.js服务端开发中仍然占据重要地位。未来的发展趋势包括：</p>
<ol>
<li><strong>与ES6模块的互操作性</strong>：Node.js正在改进两种模块系统的兼容性</li>
<li><strong>性能优化</strong>：持续优化模块加载和缓存机制</li>
<li><strong>工具链支持</strong>：构建工具对CommonJS的支持将继续完善</li>
<li><strong>渐进式迁移</strong>：现有项目可以逐步迁移到ES6模块</li>
</ol>
<p>CommonJS作为JavaScript模块化的重要里程碑，为现代JavaScript开发奠定了坚实基础。理解和掌握CommonJS不仅有助于Node.js开发，也为学习其他模块系统提供了重要参考。</p>
<h1 id="九、参考资料"><a href="#九、参考资料" class="headerlink" title="九、参考资料"></a>九、参考资料</h1><h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><ul>
<li><a href="https://nodejs.org/api/modules.html">Node.js Modules Documentation</a></li>
<li><a href="http://www.commonjs.org/">CommonJS官方规范</a></li>
<li><a href="https://docs.npmjs.com/">npm官方文档</a></li>
</ul>
<h2 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h2><ul>
<li><a href="./%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91JavaScript%E4%B8%AD%E7%9A%84%E6%A0%B8%E5%BF%83%EF%BC%9A%E7%90%86%E8%A7%A3%E5%92%8C%E4%BD%BF%E7%94%A8Document%E5%AF%B9%E8%B1%A1.md">【前端】JavaScript中的核心：理解和使用Document对象</a></li>
<li><a href="./%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91TypeScript%E4%B8%8EJavaScript%E5%AF%B9%E6%AF%94%EF%BC%9A%E5%BC%82%E5%90%8C%E3%80%81%E4%BC%98%E5%8A%BF%E5%8F%8A%E9%80%82%E7%94%A8%E5%9C%BA%E6%99%AF.md">【前端】TypeScript与JavaScript对比：异同、优势及适用场景</a></li>
<li><a href="../Node.js/%E3%80%90Node.js%E3%80%91Node.js%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%93%E6%A0%8F%E4%BB%8B%E7%BB%8D.md">【Node.js】Node.js学习笔记专栏介绍</a></li>
<li><a href="../Node.js/%E3%80%90Node.js%E3%80%91Node.js%E5%A4%9A%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%EF%BC%9A%E4%B8%80%E5%8F%B0%E7%94%B5%E8%84%91%E5%AE%89%E8%A3%85%E5%A4%9A%E4%B8%AANode.js%E7%89%88%E6%9C%AC%E7%9A%84%E5%AE%8C%E6%95%B4%E6%8C%87%E5%8D%97.md">【Node.js】Node.js多版本管理：一台电脑安装多个Node.js版本的完整指南</a></li>
</ul>
<h2 id="学习资源"><a href="#学习资源" class="headerlink" title="学习资源"></a>学习资源</h2><ul>
<li>《深入浅出Node.js》- 朴灵著</li>
<li>《Node.js实战》- Mike Cantelon等著</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Modules">MDN JavaScript模块</a></li>
<li><a href="https://es6.ruanyifeng.com/#docs/module">阮一峰ES6教程 - Module语法</a></li>
</ul>
<h2 id="在线资源"><a href="#在线资源" class="headerlink" title="在线资源"></a>在线资源</h2><ul>
<li><a href="https://nodejs.org/">Node.js官方网站</a></li>
<li><a href="http://javascript.ruanyifeng.com/nodejs/module.html">CommonJS规范详解</a></li>
<li><a href="https://github.com/seajs/seajs/issues/588">模块化发展历程</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[深入解析CommonJS模块系统的工作原理、语法特性、与ES6模块的区别，以及在现代JavaScript开发中的应用实践]]>
    
    </summary>
    
      <category term="后端" scheme="https://uwakeme.tech/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="前端" scheme="https://uwakeme.tech/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Node.js" scheme="https://uwakeme.tech/tags/Node-js/"/>
    
      <category term="JavaScript" scheme="https://uwakeme.tech/tags/JavaScript/"/>
    
      <category term="模块化" scheme="https://uwakeme.tech/tags/%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
      <category term="CommonJS" scheme="https://uwakeme.tech/tags/CommonJS/"/>
    
      <category term="前端" scheme="https://uwakeme.tech/categories/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[【前端】JavaScript中的Class详解：从ES6语法糖到面向对象编程实践]]></title>
    <link href="https://uwakeme.tech/2025/07/28/%E5%89%8D%E7%AB%AF/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91JavaScript%E4%B8%AD%E7%9A%84Class%E8%AF%A6%E8%A7%A3%EF%BC%9A%E4%BB%8EES6%E8%AF%AD%E6%B3%95%E7%B3%96%E5%88%B0%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E5%AE%9E%E8%B7%B5/"/>
    <id>https://uwakeme.tech/2025/07/28/前端/【前端】JavaScript中的Class详解：从ES6语法糖到面向对象编程实践/</id>
    <published>2025-07-27T16:00:00.000Z</published>
    <updated>2025-07-28T11:00:49.996Z</updated>
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>ES6（ECMAScript 2015）引入了<code>class</code>关键字，为JavaScript带来了更加直观和熟悉的面向对象编程语法。虽然JavaScript的<code>class</code>本质上是基于原型链的语法糖，但它极大地简化了类的定义和继承的实现，使得从其他面向对象语言转来的开发者更容易理解和使用。本文将深入探讨JavaScript中<code>class</code>的各个方面，从基础语法到高级特性，帮助开发者全面掌握现代JavaScript的面向对象编程。</p>
<h1 id="一、Class的基本概念"><a href="#一、Class的基本概念" class="headerlink" title="一、Class的基本概念"></a>一、Class的基本概念</h1><h2 id="（一）什么是JavaScript-Class"><a href="#（一）什么是JavaScript-Class" class="headerlink" title="（一）什么是JavaScript Class"></a>（一）什么是JavaScript Class</h2><p>JavaScript的<code>class</code>是ES6引入的语法糖，它提供了一种更清晰、更简洁的方式来创建对象和实现继承。虽然语法类似于传统的面向对象语言，但JavaScript的类仍然基于原型链机制。</p>
<h3 id="1-Class的本质"><a href="#1-Class的本质" class="headerlink" title="1. Class的本质"></a>1. Class的本质</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6 Class语法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`Hello, I&#x27;m <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等价的ES5构造函数写法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHello</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Hello, I&#x27;m <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证两者的等价性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="title class_">Person</span>); <span class="comment">// &quot;function&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> === <span class="title class_">Person</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3 id="2-Class与构造函数的对比"><a href="#2-Class与构造函数的对比" class="headerlink" title="2. Class与构造函数的对比"></a>2. Class与构造函数的对比</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对比分析工具</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ClassAnalyzer</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">compareClassAndFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// ES6 Class</span></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">ModernClass</span> &#123;</span><br><span class="line">            <span class="title function_">constructor</span>(<span class="params">value</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">value</span> = value;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="title function_">getValue</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">value</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// ES5 构造函数</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">TraditionalFunction</span>(<span class="params">value</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">value</span> = value;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="title class_">TraditionalFunction</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getValue</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">value</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建实例</span></span><br><span class="line">        <span class="keyword">const</span> modernInstance = <span class="keyword">new</span> <span class="title class_">ModernClass</span>(<span class="string">&#x27;modern&#x27;</span>);</span><br><span class="line">        <span class="keyword">const</span> traditionalInstance = <span class="keyword">new</span> <span class="title class_">TraditionalFunction</span>(<span class="string">&#x27;traditional&#x27;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="comment">// 类型检查</span></span><br><span class="line">            <span class="attr">modernType</span>: <span class="keyword">typeof</span> <span class="title class_">ModernClass</span>, <span class="comment">// &quot;function&quot;</span></span><br><span class="line">            <span class="attr">traditionalType</span>: <span class="keyword">typeof</span> <span class="title class_">TraditionalFunction</span>, <span class="comment">// &quot;function&quot;</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 原型链检查</span></span><br><span class="line">            <span class="attr">modernProto</span>: <span class="title class_">ModernClass</span>.<span class="property"><span class="keyword">prototype</span></span>,</span><br><span class="line">            <span class="attr">traditionalProto</span>: <span class="title class_">TraditionalFunction</span>.<span class="property"><span class="keyword">prototype</span></span>,</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 实例检查</span></span><br><span class="line">            <span class="attr">modernInstanceOf</span>: modernInstance <span class="keyword">instanceof</span> <span class="title class_">ModernClass</span>, <span class="comment">// true</span></span><br><span class="line">            <span class="attr">traditionalInstanceOf</span>: traditionalInstance <span class="keyword">instanceof</span> <span class="title class_">TraditionalFunction</span>, <span class="comment">// true</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 方法检查</span></span><br><span class="line">            <span class="attr">modernHasMethod</span>: <span class="string">&#x27;getValue&#x27;</span> <span class="keyword">in</span> modernInstance, <span class="comment">// true</span></span><br><span class="line">            <span class="attr">traditionalHasMethod</span>: <span class="string">&#x27;getValue&#x27;</span> <span class="keyword">in</span> traditionalInstance, <span class="comment">// true</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 构造函数检查</span></span><br><span class="line">            <span class="attr">modernConstructor</span>: modernInstance.<span class="property">constructor</span> === <span class="title class_">ModernClass</span>, <span class="comment">// true</span></span><br><span class="line">            <span class="attr">traditionalConstructor</span>: traditionalInstance.<span class="property">constructor</span> === <span class="title class_">TraditionalFunction</span> <span class="comment">// true</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行对比分析</span></span><br><span class="line"><span class="keyword">const</span> analysis = <span class="title class_">ClassAnalyzer</span>.<span class="title function_">compareClassAndFunction</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Class vs Function Analysis:&#x27;</span>, analysis);</span><br></pre></td></tr></table></figure>

<h2 id="（二）Class的基本语法"><a href="#（二）Class的基本语法" class="headerlink" title="（二）Class的基本语法"></a>（二）Class的基本语法</h2><h3 id="1-类的定义"><a href="#1-类的定义" class="headerlink" title="1. 类的定义"></a>1. 类的定义</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基本类定义</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">width, height</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">width</span> = width;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">height</span> = height;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 实例方法</span></span><br><span class="line">    <span class="title function_">getArea</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">width</span> * <span class="variable language_">this</span>.<span class="property">height</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">getPerimeter</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * (<span class="variable language_">this</span>.<span class="property">width</span> + <span class="variable language_">this</span>.<span class="property">height</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Getter方法</span></span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">area</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">getArea</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Setter方法</span></span><br><span class="line">    <span class="keyword">set</span> <span class="title function_">dimensions</span>(<span class="params">value</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(value) &amp;&amp; value.<span class="property">length</span> === <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">width</span> = value[<span class="number">0</span>];</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">height</span> = value[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 静态方法</span></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">createSquare</span>(<span class="params">side</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Rectangle</span>(side, side);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 静态属性（ES2022）</span></span><br><span class="line">    <span class="keyword">static</span> defaultColor = <span class="string">&#x27;blue&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 私有属性（ES2022）</span></span><br><span class="line">    #id = <span class="title class_">Math</span>.<span class="title function_">random</span>().<span class="title function_">toString</span>(<span class="number">36</span>).<span class="title function_">substr</span>(<span class="number">2</span>, <span class="number">9</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 私有方法（ES2022）</span></span><br><span class="line">    #<span class="title function_">generateId</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">random</span>().<span class="title function_">toString</span>(<span class="number">36</span>).<span class="title function_">substr</span>(<span class="number">2</span>, <span class="number">9</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 公共方法访问私有属性</span></span><br><span class="line">    <span class="title function_">getId</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.#id;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 重新生成ID</span></span><br><span class="line">    <span class="title function_">regenerateId</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.#id = <span class="variable language_">this</span>.#<span class="title function_">generateId</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.#id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">const</span> rect = <span class="keyword">new</span> <span class="title class_">Rectangle</span>(<span class="number">10</span>, <span class="number">5</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rect.<span class="title function_">getArea</span>()); <span class="comment">// 50</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rect.<span class="property">area</span>); <span class="comment">// 50 (使用getter)</span></span><br><span class="line"></span><br><span class="line">rect.<span class="property">dimensions</span> = [<span class="number">8</span>, <span class="number">6</span>]; <span class="comment">// 使用setter</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rect.<span class="title function_">getArea</span>()); <span class="comment">// 48</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> square = <span class="title class_">Rectangle</span>.<span class="title function_">createSquare</span>(<span class="number">4</span>); <span class="comment">// 使用静态方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(square.<span class="title function_">getArea</span>()); <span class="comment">// 16</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Rectangle</span>.<span class="property">defaultColor</span>); <span class="comment">// &quot;blue&quot; (静态属性)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rect.<span class="title function_">getId</span>()); <span class="comment">// 私有属性的值</span></span><br></pre></td></tr></table></figure>

<h3 id="2-类表达式"><a href="#2-类表达式" class="headerlink" title="2. 类表达式"></a>2. 类表达式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 命名类表达式</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">NamedClass</span> = <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 在类内部可以使用MyClass引用自身</span></span><br><span class="line">    <span class="title function_">clone</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyClass</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匿名类表达式</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">AnonymousClass</span> = <span class="keyword">class</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">value</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">value</span> = value;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">getValue</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 立即执行的类表达式</span></span><br><span class="line"><span class="keyword">const</span> instance = <span class="title function_">new</span> (<span class="keyword">class</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">timestamp</span> = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">getTimestamp</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">timestamp</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance.<span class="title function_">getTimestamp</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态类创建</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createClass</span>(<span class="params">className, methods = &#123;&#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">DynamicClass</span> = <span class="keyword">class</span> &#123;</span><br><span class="line">        <span class="title function_">constructor</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">args</span> = args;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">className</span> = className;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 动态添加方法</span></span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">keys</span>(methods).<span class="title function_">forEach</span>(<span class="function"><span class="params">methodName</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="title class_">DynamicClass</span>.<span class="property"><span class="keyword">prototype</span></span>[methodName] = methods[methodName];</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">DynamicClass</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用动态类创建</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CustomClass</span> = <span class="title function_">createClass</span>(<span class="string">&#x27;CustomClass&#x27;</span>, &#123;</span><br><span class="line">    <span class="title function_">greet</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`Hello from <span class="subst">$&#123;<span class="variable language_">this</span>.className&#125;</span>`</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">getArgs</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">args</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> customInstance = <span class="keyword">new</span> <span class="title class_">CustomClass</span>(<span class="string">&#x27;arg1&#x27;</span>, <span class="string">&#x27;arg2&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(customInstance.<span class="title function_">greet</span>()); <span class="comment">// &quot;Hello from CustomClass&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(customInstance.<span class="title function_">getArgs</span>()); <span class="comment">// [&#x27;arg1&#x27;, &#x27;arg2&#x27;]</span></span><br></pre></td></tr></table></figure>

<h1 id="二、Constructor构造函数"><a href="#二、Constructor构造函数" class="headerlink" title="二、Constructor构造函数"></a>二、Constructor构造函数</h1><h2 id="（一）构造函数的作用"><a href="#（一）构造函数的作用" class="headerlink" title="（一）构造函数的作用"></a>（一）构造函数的作用</h2><p>构造函数是类的特殊方法，用于创建和初始化类的实例。每个类只能有一个构造函数。</p>
<h3 id="1-基本构造函数"><a href="#1-基本构造函数" class="headerlink" title="1. 基本构造函数"></a>1. 基本构造函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">username, email, role = <span class="string">&#x27;user&#x27;</span></span>) &#123;</span><br><span class="line">        <span class="comment">// 参数验证</span></span><br><span class="line">        <span class="keyword">if</span> (!username || !email) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Username and email are required&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 初始化实例属性</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">username</span> = username;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">email</span> = email;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">role</span> = role;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">createdAt</span> = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">isActive</span> = <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 调用初始化方法</span></span><br><span class="line">        <span class="variable language_">this</span>.#<span class="title function_">initialize</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 私有初始化方法</span></span><br><span class="line">    #<span class="title function_">initialize</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">id</span> = <span class="variable language_">this</span>.#<span class="title function_">generateUserId</span>();</span><br><span class="line">        <span class="variable language_">this</span>.#<span class="title function_">setupDefaults</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    #<span class="title function_">generateUserId</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`user_<span class="subst">$&#123;<span class="built_in">Date</span>.now()&#125;</span>_<span class="subst">$&#123;<span class="built_in">Math</span>.random().toString(<span class="number">36</span>).substr(<span class="number">2</span>, <span class="number">5</span>)&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    #<span class="title function_">setupDefaults</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">preferences</span> = &#123;</span><br><span class="line">            <span class="attr">theme</span>: <span class="string">&#x27;light&#x27;</span>,</span><br><span class="line">            <span class="attr">notifications</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">language</span>: <span class="string">&#x27;en&#x27;</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取用户信息</span></span><br><span class="line">    <span class="title function_">getInfo</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">id</span>: <span class="variable language_">this</span>.<span class="property">id</span>,</span><br><span class="line">            <span class="attr">username</span>: <span class="variable language_">this</span>.<span class="property">username</span>,</span><br><span class="line">            <span class="attr">email</span>: <span class="variable language_">this</span>.<span class="property">email</span>,</span><br><span class="line">            <span class="attr">role</span>: <span class="variable language_">this</span>.<span class="property">role</span>,</span><br><span class="line">            <span class="attr">createdAt</span>: <span class="variable language_">this</span>.<span class="property">createdAt</span>,</span><br><span class="line">            <span class="attr">isActive</span>: <span class="variable language_">this</span>.<span class="property">isActive</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 更新用户信息</span></span><br><span class="line">    <span class="title function_">updateInfo</span>(<span class="params">updates</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> allowedFields = [<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;email&#x27;</span>, <span class="string">&#x27;role&#x27;</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">keys</span>(updates).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (allowedFields.<span class="title function_">includes</span>(key)) &#123;</span><br><span class="line">                <span class="variable language_">this</span>[key] = updates[key];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> user1 = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&#x27;john_doe&#x27;</span>, <span class="string">&#x27;john@example.com&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(user1.<span class="title function_">getInfo</span>());</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> user2 = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;admin@example.com&#x27;</span>, <span class="string">&#x27;admin&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(user2.<span class="title function_">getInfo</span>());</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 参数验证测试</span></span><br><span class="line">    <span class="keyword">const</span> invalidUser = <span class="keyword">new</span> <span class="title class_">User</span>(); <span class="comment">// 抛出错误</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error creating user:&#x27;</span>, error.<span class="property">message</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-构造函数重载模拟"><a href="#2-构造函数重载模拟" class="headerlink" title="2. 构造函数重载模拟"></a>2. 构造函数重载模拟</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JavaScript不支持真正的方法重载，但可以通过参数检查模拟</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">        <span class="comment">// 根据参数数量和类型进行不同的初始化</span></span><br><span class="line">        <span class="keyword">if</span> (args.<span class="property">length</span> === <span class="number">1</span> &amp;&amp; <span class="keyword">typeof</span> args[<span class="number">0</span>] === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">// 对象参数构造</span></span><br><span class="line">            <span class="variable language_">this</span>.#<span class="title function_">initFromObject</span>(args[<span class="number">0</span>]);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (args.<span class="property">length</span> === <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="comment">// 两个参数构造</span></span><br><span class="line">            <span class="variable language_">this</span>.#<span class="title function_">initFromParams</span>(args[<span class="number">0</span>], args[<span class="number">1</span>]);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (args.<span class="property">length</span> === <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="comment">// 三个参数构造</span></span><br><span class="line">            <span class="variable language_">this</span>.#<span class="title function_">initFromFullParams</span>(args[<span class="number">0</span>], args[<span class="number">1</span>], args[<span class="number">2</span>]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 默认构造</span></span><br><span class="line">            <span class="variable language_">this</span>.#<span class="title function_">initDefault</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">createdAt</span> = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    #<span class="title function_">initFromObject</span>(<span class="params">config</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = config.<span class="property">name</span> || <span class="string">&#x27;Unknown Product&#x27;</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">price</span> = config.<span class="property">price</span> || <span class="number">0</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">category</span> = config.<span class="property">category</span> || <span class="string">&#x27;General&#x27;</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">description</span> = config.<span class="property">description</span> || <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    #<span class="title function_">initFromParams</span>(<span class="params">name, price</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">price</span> = price;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">category</span> = <span class="string">&#x27;General&#x27;</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">description</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    #<span class="title function_">initFromFullParams</span>(<span class="params">name, price, category</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">price</span> = price;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">category</span> = category;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">description</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    #<span class="title function_">initDefault</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;Default Product&#x27;</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">price</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">category</span> = <span class="string">&#x27;General&#x27;</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">description</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">getInfo</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="variable language_">this</span>.<span class="property">name</span>,</span><br><span class="line">            <span class="attr">price</span>: <span class="variable language_">this</span>.<span class="property">price</span>,</span><br><span class="line">            <span class="attr">category</span>: <span class="variable language_">this</span>.<span class="property">category</span>,</span><br><span class="line">            <span class="attr">description</span>: <span class="variable language_">this</span>.<span class="property">description</span>,</span><br><span class="line">            <span class="attr">createdAt</span>: <span class="variable language_">this</span>.<span class="property">createdAt</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用不同的构造方式</span></span><br><span class="line"><span class="keyword">const</span> product1 = <span class="keyword">new</span> <span class="title class_">Product</span>(); <span class="comment">// 默认构造</span></span><br><span class="line"><span class="keyword">const</span> product2 = <span class="keyword">new</span> <span class="title class_">Product</span>(<span class="string">&#x27;Laptop&#x27;</span>, <span class="number">999</span>); <span class="comment">// 两参数构造</span></span><br><span class="line"><span class="keyword">const</span> product3 = <span class="keyword">new</span> <span class="title class_">Product</span>(<span class="string">&#x27;Phone&#x27;</span>, <span class="number">599</span>, <span class="string">&#x27;Electronics&#x27;</span>); <span class="comment">// 三参数构造</span></span><br><span class="line"><span class="keyword">const</span> product4 = <span class="keyword">new</span> <span class="title class_">Product</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Tablet&#x27;</span>,</span><br><span class="line">    <span class="attr">price</span>: <span class="number">399</span>,</span><br><span class="line">    <span class="attr">category</span>: <span class="string">&#x27;Electronics&#x27;</span>,</span><br><span class="line">    <span class="attr">description</span>: <span class="string">&#x27;High-performance tablet&#x27;</span></span><br><span class="line">&#125;); <span class="comment">// 对象构造</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Product 1:&#x27;</span>, product1.<span class="title function_">getInfo</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Product 2:&#x27;</span>, product2.<span class="title function_">getInfo</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Product 3:&#x27;</span>, product3.<span class="title function_">getInfo</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Product 4:&#x27;</span>, product4.<span class="title function_">getInfo</span>());</span><br></pre></td></tr></table></figure>

<h2 id="（二）构造函数的高级特性"><a href="#（二）构造函数的高级特性" class="headerlink" title="（二）构造函数的高级特性"></a>（二）构造函数的高级特性</h2><h3 id="1-构造函数中的异步操作"><a href="#1-构造函数中的异步操作" class="headerlink" title="1. 构造函数中的异步操作"></a>1. 构造函数中的异步操作</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 处理构造函数中的异步操作</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AsyncInitializedClass</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">config</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">config</span> = config;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">isInitialized</span> = <span class="literal">false</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">initPromise</span> = <span class="variable language_">this</span>.#<span class="title function_">asyncInit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">async</span> #<span class="title function_">asyncInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 模拟异步初始化操作</span></span><br><span class="line">            <span class="keyword">await</span> <span class="variable language_">this</span>.#<span class="title function_">loadConfiguration</span>();</span><br><span class="line">            <span class="keyword">await</span> <span class="variable language_">this</span>.#<span class="title function_">setupConnections</span>();</span><br><span class="line">            <span class="keyword">await</span> <span class="variable language_">this</span>.#<span class="title function_">validateSetup</span>();</span><br><span class="line">            </span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">isInitialized</span> = <span class="literal">true</span>;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Async initialization completed&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Initialization failed:&#x27;</span>, error);</span><br><span class="line">            <span class="keyword">throw</span> error;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">async</span> #<span class="title function_">loadConfiguration</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 模拟加载配置</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">settings</span> = &#123; ...<span class="variable language_">this</span>.<span class="property">config</span>, <span class="attr">loaded</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">                <span class="title function_">resolve</span>();</span><br><span class="line">            &#125;, <span class="number">100</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">async</span> #<span class="title function_">setupConnections</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 模拟建立连接</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">connections</span> = [<span class="string">&#x27;db&#x27;</span>, <span class="string">&#x27;cache&#x27;</span>, <span class="string">&#x27;api&#x27;</span>];</span><br><span class="line">                <span class="title function_">resolve</span>();</span><br><span class="line">            &#125;, <span class="number">50</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">async</span> #<span class="title function_">validateSetup</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 模拟验证设置</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">settings</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">connections</span>) &#123;</span><br><span class="line">                    <span class="title function_">resolve</span>();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Setup validation failed&#x27;</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="number">30</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 确保初始化完成后再执行操作</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">ready</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">initPromise</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">isInitialized</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">performOperation</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">ready</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Operation completed successfully&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 静态工厂方法，返回已初始化的实例</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">async</span> <span class="title function_">create</span>(<span class="params">config</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> instance = <span class="keyword">new</span> <span class="title class_">AsyncInitializedClass</span>(config);</span><br><span class="line">        <span class="keyword">await</span> instance.<span class="title function_">ready</span>();</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用异步初始化的类</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">demonstrateAsyncInit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 方法1：创建后等待初始化</span></span><br><span class="line">        <span class="keyword">const</span> instance1 = <span class="keyword">new</span> <span class="title class_">AsyncInitializedClass</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;test&#x27;</span> &#125;);</span><br><span class="line">        <span class="keyword">await</span> instance1.<span class="title function_">ready</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Instance 1 ready&#x27;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 方法2：使用静态工厂方法</span></span><br><span class="line">        <span class="keyword">const</span> instance2 = <span class="keyword">await</span> <span class="title class_">AsyncInitializedClass</span>.<span class="title function_">create</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;test2&#x27;</span> &#125;);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Instance 2 ready&#x27;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 执行操作</span></span><br><span class="line">        <span class="keyword">const</span> result = <span class="keyword">await</span> instance2.<span class="title function_">performOperation</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">        </span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error:&#x27;</span>, error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// demonstrateAsyncInit();</span></span><br></pre></td></tr></table></figure>

<h1 id="三、类的继承机制"><a href="#三、类的继承机制" class="headerlink" title="三、类的继承机制"></a>三、类的继承机制</h1><h2 id="（一）extends关键字"><a href="#（一）extends关键字" class="headerlink" title="（一）extends关键字"></a>（一）extends关键字</h2><p>JavaScript的类继承使用<code>extends</code>关键字实现，它基于原型链机制，但提供了更清晰的语法。</p>
<h3 id="1-基本继承"><a href="#1-基本继承" class="headerlink" title="1. 基本继承"></a>1. 基本继承</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基类（父类）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name, species</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">species</span> = species;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">isAlive</span> = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实例方法</span></span><br><span class="line">    <span class="title function_">makeSound</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> makes a sound`</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">eat</span>(<span class="params">food</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> is eating <span class="subst">$&#123;food&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">sleep</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> is sleeping`</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取基本信息</span></span><br><span class="line">    <span class="title function_">getInfo</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="variable language_">this</span>.<span class="property">name</span>,</span><br><span class="line">            <span class="attr">species</span>: <span class="variable language_">this</span>.<span class="property">species</span>,</span><br><span class="line">            <span class="attr">isAlive</span>: <span class="variable language_">this</span>.<span class="property">isAlive</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态方法</span></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">getKingdom</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Animalia&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 派生类（子类）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name, breed, age</span>) &#123;</span><br><span class="line">        <span class="comment">// 调用父类构造函数</span></span><br><span class="line">        <span class="variable language_">super</span>(name, <span class="string">&#x27;Canine&#x27;</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">breed</span> = breed;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">isLoyal</span> = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重写父类方法</span></span><br><span class="line">    <span class="title function_">makeSound</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> barks: Woof! Woof!`</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新增方法</span></span><br><span class="line">    <span class="title function_">fetch</span>(<span class="params">item</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> fetches the <span class="subst">$&#123;item&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">wagTail</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> is wagging its tail happily`</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重写getInfo方法，添加更多信息</span></span><br><span class="line">    <span class="title function_">getInfo</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            ...<span class="variable language_">super</span>.<span class="title function_">getInfo</span>(), <span class="comment">// 调用父类方法</span></span><br><span class="line">            <span class="attr">breed</span>: <span class="variable language_">this</span>.<span class="property">breed</span>,</span><br><span class="line">            <span class="attr">age</span>: <span class="variable language_">this</span>.<span class="property">age</span>,</span><br><span class="line">            <span class="attr">isLoyal</span>: <span class="variable language_">this</span>.<span class="property">isLoyal</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态方法</span></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">getDomesticationPeriod</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;15,000 years ago&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进一步继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GermanShepherd</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Dog</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name, age, trainingLevel = <span class="string">&#x27;basic&#x27;</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(name, <span class="string">&#x27;German Shepherd&#x27;</span>, age);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">trainingLevel</span> = trainingLevel;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">isWorkingDog</span> = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重写方法</span></span><br><span class="line">    <span class="title function_">makeSound</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> barks authoritatively: WOOF!`</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新增专业方法</span></span><br><span class="line">    <span class="title function_">guard</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> is guarding the area`</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">track</span>(<span class="params">scent</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> is tracking the <span class="subst">$&#123;scent&#125;</span> scent`</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">getInfo</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            ...<span class="variable language_">super</span>.<span class="title function_">getInfo</span>(),</span><br><span class="line">            <span class="attr">trainingLevel</span>: <span class="variable language_">this</span>.<span class="property">trainingLevel</span>,</span><br><span class="line">            <span class="attr">isWorkingDog</span>: <span class="variable language_">this</span>.<span class="property">isWorkingDog</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">const</span> animal = <span class="keyword">new</span> <span class="title class_">Animal</span>(<span class="string">&#x27;Generic Animal&#x27;</span>, <span class="string">&#x27;Unknown&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&#x27;Buddy&#x27;</span>, <span class="string">&#x27;Golden Retriever&#x27;</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">const</span> germanShepherd = <span class="keyword">new</span> <span class="title class_">GermanShepherd</span>(<span class="string">&#x27;Rex&#x27;</span>, <span class="number">5</span>, <span class="string">&#x27;advanced&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(animal.<span class="title function_">makeSound</span>()); <span class="comment">// &quot;Generic Animal makes a sound&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dog.<span class="title function_">makeSound</span>()); <span class="comment">// &quot;Buddy barks: Woof! Woof!&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(germanShepherd.<span class="title function_">makeSound</span>()); <span class="comment">// &quot;Rex barks authoritatively: WOOF!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dog.<span class="title function_">getInfo</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(germanShepherd.<span class="title function_">getInfo</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 静态方法调用</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Animal</span>.<span class="title function_">getKingdom</span>()); <span class="comment">// &quot;Animalia&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Dog</span>.<span class="title function_">getDomesticationPeriod</span>()); <span class="comment">// &quot;15,000 years ago&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-super关键字详解"><a href="#2-super关键字详解" class="headerlink" title="2. super关键字详解"></a>2. super关键字详解</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Vehicle</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">make, model, year</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">make</span> = make;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">model</span> = model;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">year</span> = year;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">isRunning</span> = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">start</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">isRunning</span> = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.make&#125;</span> <span class="subst">$&#123;<span class="variable language_">this</span>.model&#125;</span> is starting...`</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">stop</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">isRunning</span> = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.make&#125;</span> <span class="subst">$&#123;<span class="variable language_">this</span>.model&#125;</span> has stopped`</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">getStatus</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">make</span>: <span class="variable language_">this</span>.<span class="property">make</span>,</span><br><span class="line">            <span class="attr">model</span>: <span class="variable language_">this</span>.<span class="property">model</span>,</span><br><span class="line">            <span class="attr">year</span>: <span class="variable language_">this</span>.<span class="property">year</span>,</span><br><span class="line">            <span class="attr">isRunning</span>: <span class="variable language_">this</span>.<span class="property">isRunning</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Vehicle</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">make, model, year, doors, fuelType</span>) &#123;</span><br><span class="line">        <span class="comment">// super()必须在使用this之前调用</span></span><br><span class="line">        <span class="variable language_">super</span>(make, model, year);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">doors</span> = doors;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">fuelType</span> = fuelType;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">gear</span> = <span class="string">&#x27;P&#x27;</span>; <span class="comment">// Park</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">start</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 调用父类方法并扩展功能</span></span><br><span class="line">        <span class="keyword">const</span> parentResult = <span class="variable language_">super</span>.<span class="title function_">start</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">gear</span> = <span class="string">&#x27;D&#x27;</span>; <span class="comment">// Drive</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;parentResult&#125;</span> Car is in Drive mode.`</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">stop</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 先执行子类逻辑，再调用父类方法</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">gear</span> = <span class="string">&#x27;P&#x27;</span>;</span><br><span class="line">        <span class="keyword">const</span> parentResult = <span class="variable language_">super</span>.<span class="title function_">stop</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`Car shifted to Park. <span class="subst">$&#123;parentResult&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">getStatus</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 合并父类状态和子类状态</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            ...<span class="variable language_">super</span>.<span class="title function_">getStatus</span>(),</span><br><span class="line">            <span class="attr">doors</span>: <span class="variable language_">this</span>.<span class="property">doors</span>,</span><br><span class="line">            <span class="attr">fuelType</span>: <span class="variable language_">this</span>.<span class="property">fuelType</span>,</span><br><span class="line">            <span class="attr">gear</span>: <span class="variable language_">this</span>.<span class="property">gear</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新增方法</span></span><br><span class="line">    <span class="title function_">honk</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.make&#125;</span> <span class="subst">$&#123;<span class="variable language_">this</span>.model&#125;</span> honks: BEEP BEEP!`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ElectricCar</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Car</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">make, model, year, doors, batteryCapacity</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(make, model, year, doors, <span class="string">&#x27;Electric&#x27;</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">batteryCapacity</span> = batteryCapacity;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">batteryLevel</span> = <span class="number">100</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">chargingPort</span> = <span class="string">&#x27;Type 2&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">start</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">batteryLevel</span> &lt; <span class="number">10</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.make&#125;</span> <span class="subst">$&#123;<span class="variable language_">this</span>.model&#125;</span> cannot start - low battery!`</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用父类的start方法</span></span><br><span class="line">        <span class="keyword">const</span> parentResult = <span class="variable language_">super</span>.<span class="title function_">start</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;parentResult&#125;</span> Electric motor engaged silently.`</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">charge</span>(<span class="params">duration</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> chargeAmount = <span class="title class_">Math</span>.<span class="title function_">min</span>(duration * <span class="number">10</span>, <span class="number">100</span> - <span class="variable language_">this</span>.<span class="property">batteryLevel</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">batteryLevel</span> += chargeAmount;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`Charged for <span class="subst">$&#123;duration&#125;</span> hours. Battery level: <span class="subst">$&#123;<span class="variable language_">this</span>.batteryLevel&#125;</span>%`</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">getStatus</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            ...<span class="variable language_">super</span>.<span class="title function_">getStatus</span>(),</span><br><span class="line">            <span class="attr">batteryCapacity</span>: <span class="variable language_">this</span>.<span class="property">batteryCapacity</span>,</span><br><span class="line">            <span class="attr">batteryLevel</span>: <span class="variable language_">this</span>.<span class="property">batteryLevel</span>,</span><br><span class="line">            <span class="attr">chargingPort</span>: <span class="variable language_">this</span>.<span class="property">chargingPort</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">const</span> electricCar = <span class="keyword">new</span> <span class="title class_">ElectricCar</span>(<span class="string">&#x27;Tesla&#x27;</span>, <span class="string">&#x27;Model 3&#x27;</span>, <span class="number">2023</span>, <span class="number">4</span>, <span class="string">&#x27;75kWh&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(electricCar.<span class="title function_">start</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(electricCar.<span class="title function_">getStatus</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(electricCar.<span class="title function_">charge</span>(<span class="number">2</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(electricCar.<span class="title function_">stop</span>());</span><br></pre></td></tr></table></figure>

<h2 id="（二）多层继承和混入模式"><a href="#（二）多层继承和混入模式" class="headerlink" title="（二）多层继承和混入模式"></a>（二）多层继承和混入模式</h2><h3 id="1-多层继承链"><a href="#1-多层继承链" class="headerlink" title="1. 多层继承链"></a>1. 多层继承链</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 演示复杂的继承链</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LivingBeing</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">isAlive</span> = <span class="literal">true</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">createdAt</span> = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">live</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> is living`</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">die</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">isAlive</span> = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> has died`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Organism</span> <span class="keyword">extends</span> <span class="title class_ inherited__">LivingBeing</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name, cellType</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(name);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">cellType</span> = cellType; <span class="comment">// &#x27;prokaryotic&#x27; or &#x27;eukaryotic&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">metabolize</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> is metabolizing`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Organism</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name, mobility</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(name, <span class="string">&#x27;eukaryotic&#x27;</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">mobility</span> = mobility;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">canMove</span> = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">move</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">canMove</span> ? <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> is moving`</span> : <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> cannot move`</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">breathe</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> is breathing`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mammal</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name, furType</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(name, <span class="string">&#x27;walking&#x27;</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">furType</span> = furType;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">isWarmBlooded</span> = <span class="literal">true</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">hasHair</span> = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">produceMilk</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> is producing milk`</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">regulateTemperature</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> is regulating body temperature`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Primate</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Mammal</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name, intelligence</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(name, <span class="string">&#x27;fur&#x27;</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">intelligence</span> = intelligence;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">hasOpposableThumbs</span> = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">useTools</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> is using tools`</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">communicate</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> is communicating`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Human</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Primate</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name, language, culture</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(name, <span class="string">&#x27;high&#x27;</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">language</span> = language;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">culture</span> = culture;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">canSpeak</span> = <span class="literal">true</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">canWrite</span> = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">speak</span>(<span class="params">message</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> says: &quot;<span class="subst">$&#123;message&#125;</span>&quot; in <span class="subst">$&#123;<span class="variable language_">this</span>.language&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">write</span>(<span class="params">text</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> writes: &quot;<span class="subst">$&#123;text&#125;</span>&quot;`</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">createArt</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> is creating art influenced by <span class="subst">$&#123;<span class="variable language_">this</span>.culture&#125;</span> culture`</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 展示继承链中的所有能力</span></span><br><span class="line">    <span class="title function_">demonstrateAbilities</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> abilities = [</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">live</span>(),</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">metabolize</span>(),</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">move</span>(),</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">breathe</span>(),</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">produceMilk</span>(),</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">regulateTemperature</span>(),</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">useTools</span>(),</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">communicate</span>(),</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">speak</span>(<span class="string">&#x27;Hello World&#x27;</span>),</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">write</span>(<span class="string">&#x27;JavaScript is awesome&#x27;</span>),</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">createArt</span>()</span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> abilities;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">const</span> human = <span class="keyword">new</span> <span class="title class_">Human</span>(<span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;English&#x27;</span>, <span class="string">&#x27;Western&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Human abilities:&#x27;</span>);</span><br><span class="line">human.<span class="title function_">demonstrateAbilities</span>().<span class="title function_">forEach</span>(<span class="function"><span class="params">ability</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;- &#x27;</span> + ability));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查继承链</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;\nInheritance chain:&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;instanceof Human:&#x27;</span>, human <span class="keyword">instanceof</span> <span class="title class_">Human</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;instanceof Primate:&#x27;</span>, human <span class="keyword">instanceof</span> <span class="title class_">Primate</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;instanceof Mammal:&#x27;</span>, human <span class="keyword">instanceof</span> <span class="title class_">Mammal</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;instanceof Animal:&#x27;</span>, human <span class="keyword">instanceof</span> <span class="title class_">Animal</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;instanceof Organism:&#x27;</span>, human <span class="keyword">instanceof</span> <span class="title class_">Organism</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;instanceof LivingBeing:&#x27;</span>, human <span class="keyword">instanceof</span> <span class="title class_">LivingBeing</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3 id="2-混入（Mixin）模式"><a href="#2-混入（Mixin）模式" class="headerlink" title="2. 混入（Mixin）模式"></a>2. 混入（Mixin）模式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 混入模式 - 模拟多重继承</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Flyable</span> = &#123;</span><br><span class="line">    <span class="title function_">fly</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> is flying`</span>;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="title function_">land</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> is landing`</span>;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="title function_">getAltitude</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">altitude</span> || <span class="number">0</span>;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="title function_">setAltitude</span>(<span class="params">altitude</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">altitude</span> = altitude;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> is now at <span class="subst">$&#123;altitude&#125;</span> feet`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Swimmable</span> = &#123;</span><br><span class="line">    <span class="title function_">swim</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> is swimming`</span>;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="title function_">dive</span>(<span class="params">depth</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">depth</span> = depth;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> dives to <span class="subst">$&#123;depth&#125;</span> meters`</span>;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="title function_">surface</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">depth</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> surfaces`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Walkable</span> = &#123;</span><br><span class="line">    <span class="title function_">walk</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> is walking`</span>;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="title function_">run</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> is running`</span>;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="title function_">jump</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> jumps`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 混入函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mixin</span>(<span class="params">target, ...sources</span>) &#123;</span><br><span class="line">    sources.<span class="title function_">forEach</span>(<span class="function"><span class="params">source</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(source).<span class="title function_">forEach</span>(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (name !== <span class="string">&#x27;constructor&#x27;</span>) &#123;</span><br><span class="line">                target.<span class="property"><span class="keyword">prototype</span></span>[name] = source[name];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基础动物类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BaseAnimal</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name, species</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">species</span> = species;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">makeSound</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> makes a sound`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建具有多种能力的动物类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Duck</span> <span class="keyword">extends</span> <span class="title class_ inherited__">BaseAnimal</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(name, <span class="string">&#x27;Duck&#x27;</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">altitude</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">depth</span> = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">makeSound</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> quacks: Quack! Quack!`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 应用混入</span></span><br><span class="line"><span class="title function_">mixin</span>(<span class="title class_">Duck</span>, <span class="title class_">Flyable</span>, <span class="title class_">Swimmable</span>, <span class="title class_">Walkable</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Penguin</span> <span class="keyword">extends</span> <span class="title class_ inherited__">BaseAnimal</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(name, <span class="string">&#x27;Penguin&#x27;</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">depth</span> = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">makeSound</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> makes penguin sounds`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 企鹅只能游泳和走路</span></span><br><span class="line"><span class="title function_">mixin</span>(<span class="title class_">Penguin</span>, <span class="title class_">Swimmable</span>, <span class="title class_">Walkable</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Eagle</span> <span class="keyword">extends</span> <span class="title class_ inherited__">BaseAnimal</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(name, <span class="string">&#x27;Eagle&#x27;</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">altitude</span> = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">makeSound</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> screeches`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 老鹰只能飞行和走路</span></span><br><span class="line"><span class="title function_">mixin</span>(<span class="title class_">Eagle</span>, <span class="title class_">Flyable</span>, <span class="title class_">Walkable</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">const</span> duck = <span class="keyword">new</span> <span class="title class_">Duck</span>(<span class="string">&#x27;Donald&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> penguin = <span class="keyword">new</span> <span class="title class_">Penguin</span>(<span class="string">&#x27;Pingu&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> eagle = <span class="keyword">new</span> <span class="title class_">Eagle</span>(<span class="string">&#x27;Eddie&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Duck abilities:&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(duck.<span class="title function_">makeSound</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(duck.<span class="title function_">fly</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(duck.<span class="title function_">swim</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(duck.<span class="title function_">walk</span>());</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;\nPenguin abilities:&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(penguin.<span class="title function_">makeSound</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(penguin.<span class="title function_">swim</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(penguin.<span class="title function_">walk</span>());</span><br><span class="line"><span class="comment">// console.log(penguin.fly()); // 这会报错，因为企鹅没有飞行能力</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;\nEagle abilities:&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(eagle.<span class="title function_">makeSound</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(eagle.<span class="title function_">fly</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(eagle.<span class="title function_">walk</span>());</span><br><span class="line"><span class="comment">// console.log(eagle.swim()); // 这会报错，因为老鹰没有游泳能力</span></span><br></pre></td></tr></table></figure>

<h1 id="四、静态方法和属性"><a href="#四、静态方法和属性" class="headerlink" title="四、静态方法和属性"></a>四、静态方法和属性</h1><h2 id="（一）静态方法"><a href="#（一）静态方法" class="headerlink" title="（一）静态方法"></a>（一）静态方法</h2><p>静态方法属于类本身，而不是类的实例。它们通过类名直接调用，不能通过实例调用。</p>
<h3 id="1-基本静态方法"><a href="#1-基本静态方法" class="headerlink" title="1. 基本静态方法"></a>1. 基本静态方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MathUtils</span> &#123;</span><br><span class="line">    <span class="comment">// 静态方法 - 工具函数</span></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">multiply</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> a * b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">factorial</span>(<span class="params">n</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> n * <span class="title class_">MathUtils</span>.<span class="title function_">factorial</span>(n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">isPrime</span>(<span class="params">num</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (num &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt;= <span class="title class_">Math</span>.<span class="title function_">sqrt</span>(num); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (num % i === <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">fibonacci</span>(<span class="params">n</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) <span class="keyword">return</span> n;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">MathUtils</span>.<span class="title function_">fibonacci</span>(n - <span class="number">1</span>) + <span class="title class_">MathUtils</span>.<span class="title function_">fibonacci</span>(n - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态方法可以调用其他静态方法</span></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">getRandomPrime</span>(<span class="params">max = <span class="number">100</span></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> candidates = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt;= max; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isPrime</span>(i)) &#123;</span><br><span class="line">                candidates.<span class="title function_">push</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> candidates[<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * candidates.<span class="property">length</span>)];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用静态方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">MathUtils</span>.<span class="title function_">add</span>(<span class="number">5</span>, <span class="number">3</span>)); <span class="comment">// 8</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">MathUtils</span>.<span class="title function_">factorial</span>(<span class="number">5</span>)); <span class="comment">// 120</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">MathUtils</span>.<span class="title function_">isPrime</span>(<span class="number">17</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">MathUtils</span>.<span class="title function_">fibonacci</span>(<span class="number">10</span>)); <span class="comment">// 55</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">MathUtils</span>.<span class="title function_">getRandomPrime</span>(<span class="number">50</span>)); <span class="comment">// 随机质数</span></span><br></pre></td></tr></table></figure>

<h3 id="2-工厂模式中的静态方法"><a href="#2-工厂模式中的静态方法" class="headerlink" title="2. 工厂模式中的静态方法"></a>2. 工厂模式中的静态方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name, email, role, permissions</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">email</span> = email;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">role</span> = role;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">permissions</span> = permissions;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">createdAt</span> = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">id</span> = <span class="title class_">User</span>.<span class="title function_">generateId</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实例方法</span></span><br><span class="line">    <span class="title function_">hasPermission</span>(<span class="params">permission</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">permissions</span>.<span class="title function_">includes</span>(permission);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">getInfo</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">id</span>: <span class="variable language_">this</span>.<span class="property">id</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="variable language_">this</span>.<span class="property">name</span>,</span><br><span class="line">            <span class="attr">email</span>: <span class="variable language_">this</span>.<span class="property">email</span>,</span><br><span class="line">            <span class="attr">role</span>: <span class="variable language_">this</span>.<span class="property">role</span>,</span><br><span class="line">            <span class="attr">createdAt</span>: <span class="variable language_">this</span>.<span class="property">createdAt</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态方法 - ID生成器</span></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">generateId</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`user_<span class="subst">$&#123;<span class="built_in">Date</span>.now()&#125;</span>_<span class="subst">$&#123;<span class="built_in">Math</span>.random().toString(<span class="number">36</span>).substr(<span class="number">2</span>, <span class="number">5</span>)&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态工厂方法 - 创建管理员用户</span></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">createAdmin</span>(<span class="params">name, email</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> adminPermissions = [</span><br><span class="line">            <span class="string">&#x27;read&#x27;</span>, <span class="string">&#x27;write&#x27;</span>, <span class="string">&#x27;delete&#x27;</span>, <span class="string">&#x27;manage_users&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;manage_system&#x27;</span>, <span class="string">&#x27;view_analytics&#x27;</span></span><br><span class="line">        ];</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(name, email, <span class="string">&#x27;admin&#x27;</span>, adminPermissions);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态工厂方法 - 创建普通用户</span></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">createRegularUser</span>(<span class="params">name, email</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> userPermissions = [<span class="string">&#x27;read&#x27;</span>, <span class="string">&#x27;write&#x27;</span>];</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(name, email, <span class="string">&#x27;user&#x27;</span>, userPermissions);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态工厂方法 - 创建访客用户</span></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">createGuest</span>(<span class="params">name = <span class="string">&#x27;Guest&#x27;</span></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> guestPermissions = [<span class="string">&#x27;read&#x27;</span>];</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(name, <span class="string">&#x27;guest@example.com&#x27;</span>, <span class="string">&#x27;guest&#x27;</span>, guestPermissions);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态方法 - 批量创建用户</span></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">createBatch</span>(<span class="params">userDataArray</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> userDataArray.<span class="title function_">map</span>(<span class="function"><span class="params">userData</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">switch</span> (userData.<span class="property">role</span>) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;admin&#x27;</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="title class_">User</span>.<span class="title function_">createAdmin</span>(userData.<span class="property">name</span>, userData.<span class="property">email</span>);</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;user&#x27;</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="title class_">User</span>.<span class="title function_">createRegularUser</span>(userData.<span class="property">name</span>, userData.<span class="property">email</span>);</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;guest&#x27;</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="title class_">User</span>.<span class="title function_">createGuest</span>(userData.<span class="property">name</span>);</span><br><span class="line">                <span class="attr">default</span>:</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`Unknown role: <span class="subst">$&#123;userData.role&#125;</span>`</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态验证方法</span></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">validateEmail</span>(<span class="params">email</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> emailRegex = <span class="regexp">/^[^\s@]+@[^\s@]+\.[^\s@]+$/</span>;</span><br><span class="line">        <span class="keyword">return</span> emailRegex.<span class="title function_">test</span>(email);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">validateUserData</span>(<span class="params">userData</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> errors = [];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!userData.<span class="property">name</span> || userData.<span class="property">name</span>.<span class="title function_">trim</span>().<span class="property">length</span> &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            errors.<span class="title function_">push</span>(<span class="string">&#x27;Name must be at least 2 characters long&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="title function_">validateEmail</span>(userData.<span class="property">email</span>)) &#123;</span><br><span class="line">            errors.<span class="title function_">push</span>(<span class="string">&#x27;Invalid email format&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (![<span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;guest&#x27;</span>].<span class="title function_">includes</span>(userData.<span class="property">role</span>)) &#123;</span><br><span class="line">            errors.<span class="title function_">push</span>(<span class="string">&#x27;Invalid role&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">isValid</span>: errors.<span class="property">length</span> === <span class="number">0</span>,</span><br><span class="line">            errors</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用工厂方法创建用户</span></span><br><span class="line"><span class="keyword">const</span> admin = <span class="title class_">User</span>.<span class="title function_">createAdmin</span>(<span class="string">&#x27;John Admin&#x27;</span>, <span class="string">&#x27;john@admin.com&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> regularUser = <span class="title class_">User</span>.<span class="title function_">createRegularUser</span>(<span class="string">&#x27;Jane User&#x27;</span>, <span class="string">&#x27;jane@user.com&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> guest = <span class="title class_">User</span>.<span class="title function_">createGuest</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Admin info:&#x27;</span>, admin.<span class="title function_">getInfo</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Admin has manage_users permission:&#x27;</span>, admin.<span class="title function_">hasPermission</span>(<span class="string">&#x27;manage_users&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Regular user info:&#x27;</span>, regularUser.<span class="title function_">getInfo</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Regular user has delete permission:&#x27;</span>, regularUser.<span class="title function_">hasPermission</span>(<span class="string">&#x27;delete&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 批量创建用户</span></span><br><span class="line"><span class="keyword">const</span> usersData = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>, <span class="attr">email</span>: <span class="string">&#x27;alice@example.com&#x27;</span>, <span class="attr">role</span>: <span class="string">&#x27;admin&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;Bob&#x27;</span>, <span class="attr">email</span>: <span class="string">&#x27;bob@example.com&#x27;</span>, <span class="attr">role</span>: <span class="string">&#x27;user&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;Charlie&#x27;</span>, <span class="attr">role</span>: <span class="string">&#x27;guest&#x27;</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> users = <span class="title class_">User</span>.<span class="title function_">createBatch</span>(usersData);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Batch created users:&#x27;</span>, users.<span class="title function_">map</span>(<span class="function"><span class="params">user</span> =&gt;</span> user.<span class="title function_">getInfo</span>()));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证用户数据</span></span><br><span class="line"><span class="keyword">const</span> validation = <span class="title class_">User</span>.<span class="title function_">validateUserData</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Test User&#x27;</span>,</span><br><span class="line">    <span class="attr">email</span>: <span class="string">&#x27;invalid-email&#x27;</span>,</span><br><span class="line">    <span class="attr">role</span>: <span class="string">&#x27;unknown&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Validation result:&#x27;</span>, validation);</span><br></pre></td></tr></table></figure>

<h2 id="（二）静态属性"><a href="#（二）静态属性" class="headerlink" title="（二）静态属性"></a>（二）静态属性</h2><p>静态属性属于类本身，所有实例共享同一个静态属性值。</p>
<h3 id="1-静态属性的定义和使用"><a href="#1-静态属性的定义和使用" class="headerlink" title="1. 静态属性的定义和使用"></a>1. 静态属性的定义和使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Counter</span> &#123;</span><br><span class="line">    <span class="comment">// 静态属性（ES2022语法）</span></span><br><span class="line">    <span class="keyword">static</span> totalInstances = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> maxInstances = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">static</span> instanceRegistry = [];</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="comment">// 检查实例数量限制</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">Counter</span>.<span class="property">totalInstances</span> &gt;= <span class="title class_">Counter</span>.<span class="property">maxInstances</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`Cannot create more than <span class="subst">$&#123;Counter.maxInstances&#125;</span> instances`</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">id</span> = ++<span class="title class_">Counter</span>.<span class="property">totalInstances</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">createdAt</span> = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注册实例</span></span><br><span class="line">        <span class="title class_">Counter</span>.<span class="property">instanceRegistry</span>.<span class="title function_">push</span>(<span class="variable language_">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Created instance <span class="subst">$&#123;<span class="variable language_">this</span>.id&#125;</span>: <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实例方法</span></span><br><span class="line">    <span class="title function_">getInfo</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">id</span>: <span class="variable language_">this</span>.<span class="property">id</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="variable language_">this</span>.<span class="property">name</span>,</span><br><span class="line">            <span class="attr">createdAt</span>: <span class="variable language_">this</span>.<span class="property">createdAt</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态方法访问静态属性</span></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">getTotalInstances</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Counter</span>.<span class="property">totalInstances</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">getInstanceRegistry</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Counter</span>.<span class="property">instanceRegistry</span>.<span class="title function_">map</span>(<span class="function"><span class="params">instance</span> =&gt;</span> instance.<span class="title function_">getInfo</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">findInstanceByName</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Counter</span>.<span class="property">instanceRegistry</span>.<span class="title function_">find</span>(<span class="function"><span class="params">instance</span> =&gt;</span> instance.<span class="property">name</span> === name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">resetCounter</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">Counter</span>.<span class="property">totalInstances</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="title class_">Counter</span>.<span class="property">instanceRegistry</span> = [];</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Counter reset&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">setMaxInstances</span>(<span class="params">max</span>) &#123;</span><br><span class="line">        <span class="title class_">Counter</span>.<span class="property">maxInstances</span> = max;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Max instances set to <span class="subst">$&#123;max&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 销毁实例</span></span><br><span class="line">    <span class="title function_">destroy</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> index = <span class="title class_">Counter</span>.<span class="property">instanceRegistry</span>.<span class="title function_">indexOf</span>(<span class="variable language_">this</span>);</span><br><span class="line">        <span class="keyword">if</span> (index &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="title class_">Counter</span>.<span class="property">instanceRegistry</span>.<span class="title function_">splice</span>(index, <span class="number">1</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Instance <span class="subst">$&#123;<span class="variable language_">this</span>.id&#125;</span> destroyed`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> counter1 = <span class="keyword">new</span> <span class="title class_">Counter</span>(<span class="string">&#x27;First&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> counter2 = <span class="keyword">new</span> <span class="title class_">Counter</span>(<span class="string">&#x27;Second&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> counter3 = <span class="keyword">new</span> <span class="title class_">Counter</span>(<span class="string">&#x27;Third&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Total instances:&#x27;</span>, <span class="title class_">Counter</span>.<span class="title function_">getTotalInstances</span>());</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Instance registry:&#x27;</span>, <span class="title class_">Counter</span>.<span class="title function_">getInstanceRegistry</span>());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找实例</span></span><br><span class="line">    <span class="keyword">const</span> found = <span class="title class_">Counter</span>.<span class="title function_">findInstanceByName</span>(<span class="string">&#x27;Second&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Found instance:&#x27;</span>, found?.<span class="title function_">getInfo</span>());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 销毁实例</span></span><br><span class="line">    counter2.<span class="title function_">destroy</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;After destruction:&#x27;</span>, <span class="title class_">Counter</span>.<span class="title function_">getInstanceRegistry</span>());</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error:&#x27;</span>, error.<span class="property">message</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-配置管理中的静态属性"><a href="#2-配置管理中的静态属性" class="headerlink" title="2. 配置管理中的静态属性"></a>2. 配置管理中的静态属性</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;</span><br><span class="line">    <span class="comment">// 静态配置属性</span></span><br><span class="line">    <span class="keyword">static</span> #config = &#123;</span><br><span class="line">        <span class="attr">apiUrl</span>: <span class="string">&#x27;https://api.example.com&#x27;</span>,</span><br><span class="line">        <span class="attr">timeout</span>: <span class="number">5000</span>,</span><br><span class="line">        <span class="attr">retryAttempts</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="attr">debug</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">version</span>: <span class="string">&#x27;1.0.0&#x27;</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> #environment = <span class="string">&#x27;development&#x27;</span>;</span><br><span class="line">    <span class="keyword">static</span> #initialized = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态方法 - 初始化配置</span></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">initialize</span>(<span class="params">config = &#123;&#125;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">AppConfig</span>.#initialized) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&#x27;AppConfig already initialized&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 合并配置</span></span><br><span class="line">        <span class="title class_">AppConfig</span>.#config = &#123; ...<span class="title class_">AppConfig</span>.#config, ...config &#125;;</span><br><span class="line">        <span class="title class_">AppConfig</span>.#initialized = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;AppConfig initialized:&#x27;</span>, <span class="title class_">AppConfig</span>.#config);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态方法 - 获取配置值</span></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">get</span>(<span class="params">key</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title class_">AppConfig</span>.#initialized) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;AppConfig not initialized. Call AppConfig.initialize() first.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">AppConfig</span>.#config[key];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态方法 - 设置配置值</span></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">set</span>(<span class="params">key, value</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title class_">AppConfig</span>.#initialized) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;AppConfig not initialized. Call AppConfig.initialize() first.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> oldValue = <span class="title class_">AppConfig</span>.#config[key];</span><br><span class="line">        <span class="title class_">AppConfig</span>.#config[key] = value;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Config updated: <span class="subst">$&#123;key&#125;</span> = <span class="subst">$&#123;value&#125;</span> (was: <span class="subst">$&#123;oldValue&#125;</span>)`</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态方法 - 获取所有配置</span></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">getAll</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title class_">AppConfig</span>.#initialized) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;AppConfig not initialized&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123; ...<span class="title class_">AppConfig</span>.#config &#125;; <span class="comment">// 返回副本</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态方法 - 设置环境</span></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">setEnvironment</span>(<span class="params">env</span>) &#123;</span><br><span class="line">        <span class="title class_">AppConfig</span>.#environment = env;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据环境调整配置</span></span><br><span class="line">        <span class="keyword">switch</span> (env) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;production&#x27;</span>:</span><br><span class="line">                <span class="title class_">AppConfig</span>.<span class="title function_">set</span>(<span class="string">&#x27;debug&#x27;</span>, <span class="literal">false</span>);</span><br><span class="line">                <span class="title class_">AppConfig</span>.<span class="title function_">set</span>(<span class="string">&#x27;apiUrl&#x27;</span>, <span class="string">&#x27;https://api.production.com&#x27;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;development&#x27;</span>:</span><br><span class="line">                <span class="title class_">AppConfig</span>.<span class="title function_">set</span>(<span class="string">&#x27;debug&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">                <span class="title class_">AppConfig</span>.<span class="title function_">set</span>(<span class="string">&#x27;apiUrl&#x27;</span>, <span class="string">&#x27;https://api.dev.com&#x27;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;testing&#x27;</span>:</span><br><span class="line">                <span class="title class_">AppConfig</span>.<span class="title function_">set</span>(<span class="string">&#x27;debug&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">                <span class="title class_">AppConfig</span>.<span class="title function_">set</span>(<span class="string">&#x27;apiUrl&#x27;</span>, <span class="string">&#x27;https://api.test.com&#x27;</span>);</span><br><span class="line">                <span class="title class_">AppConfig</span>.<span class="title function_">set</span>(<span class="string">&#x27;timeout&#x27;</span>, <span class="number">1000</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Environment set to: <span class="subst">$&#123;env&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态方法 - 获取环境</span></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">getEnvironment</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">AppConfig</span>.#environment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态方法 - 重置配置</span></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">reset</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">AppConfig</span>.#config = &#123;</span><br><span class="line">            <span class="attr">apiUrl</span>: <span class="string">&#x27;https://api.example.com&#x27;</span>,</span><br><span class="line">            <span class="attr">timeout</span>: <span class="number">5000</span>,</span><br><span class="line">            <span class="attr">retryAttempts</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="attr">debug</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">version</span>: <span class="string">&#x27;1.0.0&#x27;</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="title class_">AppConfig</span>.#environment = <span class="string">&#x27;development&#x27;</span>;</span><br><span class="line">        <span class="title class_">AppConfig</span>.#initialized = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;AppConfig reset to defaults&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态方法 - 验证配置</span></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">validate</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> required = [<span class="string">&#x27;apiUrl&#x27;</span>, <span class="string">&#x27;timeout&#x27;</span>, <span class="string">&#x27;retryAttempts&#x27;</span>];</span><br><span class="line">        <span class="keyword">const</span> missing = required.<span class="title function_">filter</span>(<span class="function"><span class="params">key</span> =&gt;</span> !(key <span class="keyword">in</span> <span class="title class_">AppConfig</span>.#config));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (missing.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`Missing required config keys: <span class="subst">$&#123;missing.join(<span class="string">&#x27;, &#x27;</span>)&#125;</span>`</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 类型验证</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="title class_">AppConfig</span>.#config.<span class="property">timeout</span> !== <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;timeout must be a number&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="title class_">AppConfig</span>.#config.<span class="property">retryAttempts</span> !== <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;retryAttempts must be a number&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Configuration is valid&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用配置管理</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 初始化配置</span></span><br><span class="line">    <span class="title class_">AppConfig</span>.<span class="title function_">initialize</span>(&#123;</span><br><span class="line">        <span class="attr">apiUrl</span>: <span class="string">&#x27;https://my-api.com&#x27;</span>,</span><br><span class="line">        <span class="attr">debug</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">customSetting</span>: <span class="string">&#x27;custom value&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取配置</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;API URL:&#x27;</span>, <span class="title class_">AppConfig</span>.<span class="title function_">get</span>(<span class="string">&#x27;apiUrl&#x27;</span>));</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Debug mode:&#x27;</span>, <span class="title class_">AppConfig</span>.<span class="title function_">get</span>(<span class="string">&#x27;debug&#x27;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置环境</span></span><br><span class="line">    <span class="title class_">AppConfig</span>.<span class="title function_">setEnvironment</span>(<span class="string">&#x27;production&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 验证配置</span></span><br><span class="line">    <span class="title class_">AppConfig</span>.<span class="title function_">validate</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取所有配置</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;All config:&#x27;</span>, <span class="title class_">AppConfig</span>.<span class="title function_">getAll</span>());</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Config error:&#x27;</span>, error.<span class="property">message</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="五、私有属性和方法"><a href="#五、私有属性和方法" class="headerlink" title="五、私有属性和方法"></a>五、私有属性和方法</h1><p>ES2022引入了真正的私有字段和方法，使用<code>#</code>前缀标识。</p>
<h2 id="（一）私有属性"><a href="#（一）私有属性" class="headerlink" title="（一）私有属性"></a>（一）私有属性</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BankAccount</span> &#123;</span><br><span class="line">    <span class="comment">// 私有属性</span></span><br><span class="line">    #balance = <span class="number">0</span>;</span><br><span class="line">    #accountNumber;</span><br><span class="line">    #pin;</span><br><span class="line">    #transactionHistory = [];</span><br><span class="line">    #isLocked = <span class="literal">false</span>;</span><br><span class="line">    #failedAttempts = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态私有属性</span></span><br><span class="line">    <span class="keyword">static</span> #totalAccounts = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> #bankName = <span class="string">&#x27;SecureBank&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">initialBalance, pin</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (initialBalance &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Initial balance cannot be negative&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.#balance = initialBalance;</span><br><span class="line">        <span class="variable language_">this</span>.#pin = pin;</span><br><span class="line">        <span class="variable language_">this</span>.#accountNumber = <span class="variable language_">this</span>.#<span class="title function_">generateAccountNumber</span>();</span><br><span class="line"></span><br><span class="line">        <span class="title class_">BankAccount</span>.#totalAccounts++;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.#<span class="title function_">addTransaction</span>(<span class="string">&#x27;Account opened&#x27;</span>, initialBalance);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有方法</span></span><br><span class="line">    #<span class="title function_">generateAccountNumber</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`ACC<span class="subst">$&#123;<span class="built_in">Date</span>.now()&#125;</span><span class="subst">$&#123;<span class="built_in">Math</span>.random().toString(<span class="number">36</span>).substr(<span class="number">2</span>, <span class="number">4</span>).toUpperCase()&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #<span class="title function_">validatePin</span>(<span class="params">pin</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.#pin === pin;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #<span class="title function_">addTransaction</span>(<span class="params">type, amount, balance = <span class="variable language_">this</span>.#balance</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.#transactionHistory.<span class="title function_">push</span>(&#123;</span><br><span class="line">            <span class="attr">id</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>(),</span><br><span class="line">            type,</span><br><span class="line">            amount,</span><br><span class="line">            balance,</span><br><span class="line">            <span class="attr">timestamp</span>: <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #<span class="title function_">checkAccountLock</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.#isLocked) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Account is locked due to multiple failed attempts&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #<span class="title function_">handleFailedAttempt</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.#failedAttempts++;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.#failedAttempts &gt;= <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.#isLocked = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Account locked after 3 failed PIN attempts&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`Invalid PIN. <span class="subst">$&#123;<span class="number">3</span> - <span class="variable language_">this</span>.#failedAttempts&#125;</span> attempts remaining`</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 公共方法</span></span><br><span class="line">    <span class="title function_">deposit</span>(<span class="params">amount, pin</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.#<span class="title function_">checkAccountLock</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">this</span>.#<span class="title function_">validatePin</span>(pin)) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.#<span class="title function_">handleFailedAttempt</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.#failedAttempts = <span class="number">0</span>; <span class="comment">// 重置失败次数</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (amount &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Deposit amount must be positive&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.#balance += amount;</span><br><span class="line">        <span class="variable language_">this</span>.#<span class="title function_">addTransaction</span>(<span class="string">&#x27;Deposit&#x27;</span>, amount);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">success</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">message</span>: <span class="string">`Deposited $<span class="subst">$&#123;amount&#125;</span>`</span>,</span><br><span class="line">            <span class="attr">balance</span>: <span class="variable language_">this</span>.#balance</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">withdraw</span>(<span class="params">amount, pin</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.#<span class="title function_">checkAccountLock</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">this</span>.#<span class="title function_">validatePin</span>(pin)) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.#<span class="title function_">handleFailedAttempt</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.#failedAttempts = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (amount &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Withdrawal amount must be positive&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (amount &gt; <span class="variable language_">this</span>.#balance) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Insufficient funds&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.#balance -= amount;</span><br><span class="line">        <span class="variable language_">this</span>.#<span class="title function_">addTransaction</span>(<span class="string">&#x27;Withdrawal&#x27;</span>, -amount);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">success</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">message</span>: <span class="string">`Withdrew $<span class="subst">$&#123;amount&#125;</span>`</span>,</span><br><span class="line">            <span class="attr">balance</span>: <span class="variable language_">this</span>.#balance</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">getBalance</span>(<span class="params">pin</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.#<span class="title function_">checkAccountLock</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">this</span>.#<span class="title function_">validatePin</span>(pin)) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.#<span class="title function_">handleFailedAttempt</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.#failedAttempts = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.#balance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">getAccountInfo</span>(<span class="params">pin</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.#<span class="title function_">checkAccountLock</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">this</span>.#<span class="title function_">validatePin</span>(pin)) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.#<span class="title function_">handleFailedAttempt</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.#failedAttempts = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">accountNumber</span>: <span class="variable language_">this</span>.#accountNumber,</span><br><span class="line">            <span class="attr">balance</span>: <span class="variable language_">this</span>.#balance,</span><br><span class="line">            <span class="attr">isLocked</span>: <span class="variable language_">this</span>.#isLocked,</span><br><span class="line">            <span class="attr">transactionCount</span>: <span class="variable language_">this</span>.#transactionHistory.<span class="property">length</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">getTransactionHistory</span>(<span class="params">pin, limit = <span class="number">10</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.#<span class="title function_">checkAccountLock</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">this</span>.#<span class="title function_">validatePin</span>(pin)) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.#<span class="title function_">handleFailedAttempt</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.#failedAttempts = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.#transactionHistory</span><br><span class="line">            .<span class="title function_">slice</span>(-limit)</span><br><span class="line">            .<span class="title function_">reverse</span>(); <span class="comment">// 最新的在前面</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 管理员方法（仅用于演示，实际应用中需要更严格的权限控制）</span></span><br><span class="line">    <span class="title function_">unlockAccount</span>(<span class="params">adminCode</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (adminCode === <span class="string">&#x27;ADMIN123&#x27;</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.#isLocked = <span class="literal">false</span>;</span><br><span class="line">            <span class="variable language_">this</span>.#failedAttempts = <span class="number">0</span>;</span><br><span class="line">            <span class="variable language_">this</span>.#<span class="title function_">addTransaction</span>(<span class="string">&#x27;Account unlocked by admin&#x27;</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> &#123; <span class="attr">success</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;Account unlocked&#x27;</span> &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Invalid admin code&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态方法</span></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">getTotalAccounts</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">BankAccount</span>.#totalAccounts;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">getBankName</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">BankAccount</span>.#bankName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> account = <span class="keyword">new</span> <span class="title class_">BankAccount</span>(<span class="number">1000</span>, <span class="string">&#x27;1234&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Account created&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Balance:&#x27;</span>, account.<span class="title function_">getBalance</span>(<span class="string">&#x27;1234&#x27;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存款</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(account.<span class="title function_">deposit</span>(<span class="number">500</span>, <span class="string">&#x27;1234&#x27;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 取款</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(account.<span class="title function_">withdraw</span>(<span class="number">200</span>, <span class="string">&#x27;1234&#x27;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取账户信息</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Account info:&#x27;</span>, account.<span class="title function_">getAccountInfo</span>(<span class="string">&#x27;1234&#x27;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取交易历史</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Transaction history:&#x27;</span>, account.<span class="title function_">getTransactionHistory</span>(<span class="string">&#x27;1234&#x27;</span>, <span class="number">5</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 尝试访问私有属性（会失败）</span></span><br><span class="line">    <span class="comment">// console.log(account.#balance); // SyntaxError: Private field &#x27;#balance&#x27; must be declared in an enclosing class</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 错误的PIN测试</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        account.<span class="title function_">getBalance</span>(<span class="string">&#x27;wrong&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;PIN error:&#x27;</span>, error.<span class="property">message</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Total accounts:&#x27;</span>, <span class="title class_">BankAccount</span>.<span class="title function_">getTotalAccounts</span>());</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Account error:&#x27;</span>, error.<span class="property">message</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="（二）私有方法的高级应用"><a href="#（二）私有方法的高级应用" class="headerlink" title="（二）私有方法的高级应用"></a>（二）私有方法的高级应用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DataProcessor</span> &#123;</span><br><span class="line">    <span class="comment">// 私有属性</span></span><br><span class="line">    #data = [];</span><br><span class="line">    #processedData = <span class="literal">null</span>;</span><br><span class="line">    #isProcessing = <span class="literal">false</span>;</span><br><span class="line">    #processingSteps = [];</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">initialData = []</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.#data = [...initialData];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有方法 - 数据验证</span></span><br><span class="line">    #<span class="title function_">validateData</span>(<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(data)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Data must be an array&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> data.<span class="title function_">every</span>(<span class="function"><span class="params">item</span> =&gt;</span></span><br><span class="line">            <span class="keyword">typeof</span> item === <span class="string">&#x27;object&#x27;</span> &amp;&amp;</span><br><span class="line">            item !== <span class="literal">null</span> &amp;&amp;</span><br><span class="line">            <span class="string">&#x27;value&#x27;</span> <span class="keyword">in</span> item</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有方法 - 数据清洗</span></span><br><span class="line">    #<span class="title function_">cleanData</span>(<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.#<span class="title function_">addProcessingStep</span>(<span class="string">&#x27;Data cleaning started&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> cleaned = data</span><br><span class="line">            .<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">value</span> !== <span class="literal">null</span> &amp;&amp; item.<span class="property">value</span> !== <span class="literal">undefined</span>)</span><br><span class="line">            .<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> (&#123;</span><br><span class="line">                ...item,</span><br><span class="line">                <span class="attr">value</span>: <span class="keyword">typeof</span> item.<span class="property">value</span> === <span class="string">&#x27;string&#x27;</span> ? item.<span class="property">value</span>.<span class="title function_">trim</span>() : item.<span class="property">value</span></span><br><span class="line">            &#125;));</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.#<span class="title function_">addProcessingStep</span>(<span class="string">`Data cleaning completed. <span class="subst">$&#123;cleaned.length&#125;</span> items remaining`</span>);</span><br><span class="line">        <span class="keyword">return</span> cleaned;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有方法 - 数据转换</span></span><br><span class="line">    #<span class="title function_">transformData</span>(<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.#<span class="title function_">addProcessingStep</span>(<span class="string">&#x27;Data transformation started&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> transformed = data.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> (&#123;</span><br><span class="line">            ...item,</span><br><span class="line">            <span class="attr">value</span>: <span class="keyword">typeof</span> item.<span class="property">value</span> === <span class="string">&#x27;string&#x27;</span> ?</span><br><span class="line">                <span class="built_in">parseFloat</span>(item.<span class="property">value</span>) || <span class="number">0</span> :</span><br><span class="line">                <span class="title class_">Number</span>(item.<span class="property">value</span>) || <span class="number">0</span>,</span><br><span class="line">            <span class="attr">processed</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">processedAt</span>: <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line">        &#125;));</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.#<span class="title function_">addProcessingStep</span>(<span class="string">&#x27;Data transformation completed&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> transformed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有方法 - 数据聚合</span></span><br><span class="line">    #<span class="title function_">aggregateData</span>(<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.#<span class="title function_">addProcessingStep</span>(<span class="string">&#x27;Data aggregation started&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> aggregated = &#123;</span><br><span class="line">            <span class="attr">total</span>: data.<span class="property">length</span>,</span><br><span class="line">            <span class="attr">sum</span>: data.<span class="title function_">reduce</span>(<span class="function">(<span class="params">sum, item</span>) =&gt;</span> sum + item.<span class="property">value</span>, <span class="number">0</span>),</span><br><span class="line">            <span class="attr">average</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">min</span>: <span class="title class_">Math</span>.<span class="title function_">min</span>(...data.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">value</span>)),</span><br><span class="line">            <span class="attr">max</span>: <span class="title class_">Math</span>.<span class="title function_">max</span>(...data.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">value</span>)),</span><br><span class="line">            <span class="attr">items</span>: data</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        aggregated.<span class="property">average</span> = aggregated.<span class="property">total</span> &gt; <span class="number">0</span> ? aggregated.<span class="property">sum</span> / aggregated.<span class="property">total</span> : <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.#<span class="title function_">addProcessingStep</span>(<span class="string">&#x27;Data aggregation completed&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> aggregated;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有方法 - 添加处理步骤记录</span></span><br><span class="line">    #<span class="title function_">addProcessingStep</span>(<span class="params">step</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.#processingSteps.<span class="title function_">push</span>(&#123;</span><br><span class="line">            step,</span><br><span class="line">            <span class="attr">timestamp</span>: <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有方法 - 重置处理状态</span></span><br><span class="line">    #<span class="title function_">resetProcessingState</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.#isProcessing = <span class="literal">false</span>;</span><br><span class="line">        <span class="variable language_">this</span>.#processingSteps = [];</span><br><span class="line">        <span class="variable language_">this</span>.#processedData = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 公共方法 - 添加数据</span></span><br><span class="line">    <span class="title function_">addData</span>(<span class="params">newData</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.#isProcessing) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Cannot add data while processing&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">this</span>.#<span class="title function_">validateData</span>(newData)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Invalid data format&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.#data.<span class="title function_">push</span>(...newData);</span><br><span class="line">        <span class="variable language_">this</span>.#<span class="title function_">resetProcessingState</span>(); <span class="comment">// 重置之前的处理结果</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.#data.<span class="property">length</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 公共方法 - 处理数据</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">processData</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.#isProcessing) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Processing already in progress&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.#data.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;No data to process&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.#isProcessing = <span class="literal">true</span>;</span><br><span class="line">        <span class="variable language_">this</span>.#<span class="title function_">resetProcessingState</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.#<span class="title function_">addProcessingStep</span>(<span class="string">&#x27;Processing started&#x27;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 模拟异步处理</span></span><br><span class="line">            <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(resolve, <span class="number">100</span>));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> processedData = [...<span class="variable language_">this</span>.#data];</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 执行处理管道</span></span><br><span class="line">            processedData = <span class="variable language_">this</span>.#<span class="title function_">cleanData</span>(processedData);</span><br><span class="line">            <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(resolve, <span class="number">50</span>));</span><br><span class="line"></span><br><span class="line">            processedData = <span class="variable language_">this</span>.#<span class="title function_">transformData</span>(processedData);</span><br><span class="line">            <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(resolve, <span class="number">50</span>));</span><br><span class="line"></span><br><span class="line">            <span class="variable language_">this</span>.#processedData = <span class="variable language_">this</span>.#<span class="title function_">aggregateData</span>(processedData);</span><br><span class="line"></span><br><span class="line">            <span class="variable language_">this</span>.#<span class="title function_">addProcessingStep</span>(<span class="string">&#x27;Processing completed successfully&#x27;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="attr">success</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">result</span>: <span class="variable language_">this</span>.#processedData,</span><br><span class="line">                <span class="attr">steps</span>: [...<span class="variable language_">this</span>.#processingSteps]</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.#<span class="title function_">addProcessingStep</span>(<span class="string">`Processing failed: <span class="subst">$&#123;error.message&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">throw</span> error;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.#isProcessing = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 公共方法 - 获取处理结果</span></span><br><span class="line">    <span class="title function_">getProcessedData</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.#isProcessing) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Processing in progress&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">this</span>.#processedData) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;No processed data available. Call processData() first.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123; ...<span class="variable language_">this</span>.#processedData &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 公共方法 - 获取处理步骤</span></span><br><span class="line">    <span class="title function_">getProcessingSteps</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> [...<span class="variable language_">this</span>.#processingSteps];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 公共方法 - 获取原始数据统计</span></span><br><span class="line">    <span class="title function_">getDataStats</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">totalItems</span>: <span class="variable language_">this</span>.#data.<span class="property">length</span>,</span><br><span class="line">            <span class="attr">isProcessing</span>: <span class="variable language_">this</span>.#isProcessing,</span><br><span class="line">            <span class="attr">hasProcessedData</span>: <span class="variable language_">this</span>.#processedData !== <span class="literal">null</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 公共方法 - 清除所有数据</span></span><br><span class="line">    <span class="title function_">clearData</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.#isProcessing) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Cannot clear data while processing&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.#data = [];</span><br><span class="line">        <span class="variable language_">this</span>.#<span class="title function_">resetProcessingState</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">demonstrateDataProcessor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> processor = <span class="keyword">new</span> <span class="title class_">DataProcessor</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加测试数据</span></span><br><span class="line">    <span class="keyword">const</span> testData = [</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">value</span>: <span class="string">&#x27;10.5&#x27;</span>, <span class="attr">category</span>: <span class="string">&#x27;A&#x27;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">value</span>: <span class="number">20</span>, <span class="attr">category</span>: <span class="string">&#x27;B&#x27;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">value</span>: <span class="string">&#x27;30.7&#x27;</span>, <span class="attr">category</span>: <span class="string">&#x27;A&#x27;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">value</span>: <span class="literal">null</span>, <span class="attr">category</span>: <span class="string">&#x27;C&#x27;</span> &#125;, <span class="comment">// 将被清理掉</span></span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="number">5</span>, <span class="attr">value</span>: <span class="string">&#x27;  15.2  &#x27;</span>, <span class="attr">category</span>: <span class="string">&#x27;B&#x27;</span> &#125; <span class="comment">// 将被trim</span></span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Adding data...&#x27;</span>);</span><br><span class="line">        <span class="keyword">const</span> count = processor.<span class="title function_">addData</span>(testData);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Added <span class="subst">$&#123;count&#125;</span> total items`</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Data stats:&#x27;</span>, processor.<span class="title function_">getDataStats</span>());</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Processing data...&#x27;</span>);</span><br><span class="line">        <span class="keyword">const</span> result = <span class="keyword">await</span> processor.<span class="title function_">processData</span>();</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Processing result:&#x27;</span>, result.<span class="property">result</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Processing steps:&#x27;</span>);</span><br><span class="line">        result.<span class="property">steps</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">step</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`- <span class="subst">$&#123;step.step&#125;</span> at <span class="subst">$&#123;step.timestamp.toISOString()&#125;</span>`</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取处理后的数据</span></span><br><span class="line">        <span class="keyword">const</span> processedData = processor.<span class="title function_">getProcessedData</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Final processed data:&#x27;</span>, processedData);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error:&#x27;</span>, error.<span class="property">message</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// demonstrateDataProcessor();</span></span><br></pre></td></tr></table></figure>

<h1 id="六、参考资料"><a href="#六、参考资料" class="headerlink" title="六、参考资料"></a>六、参考资料</h1><h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes">MDN - Classes</a></li>
<li><a href="https://www.ecma-international.org/ecma-262/6.0/#sec-class-definitions">ECMAScript 2015 Language Specification</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes/constructor">MDN - Constructor</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes/static">MDN - Static</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes/Private_class_fields">MDN - Private class features</a></li>
</ul>
<h2 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h2><ul>
<li><a href="./%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91JavaScript%E4%B8%AD%E7%9A%84%E6%A0%B8%E5%BF%83%EF%BC%9A%E7%90%86%E8%A7%A3%E5%92%8C%E4%BD%BF%E7%94%A8Document%E5%AF%B9%E8%B1%A1.md">【前端】JavaScript中的核心：理解和使用Document对象</a></li>
<li><a href="./%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91TypeScript%E4%B8%8EJavaScript%E5%AF%B9%E6%AF%94%EF%BC%9A%E5%BC%82%E5%90%8C%E3%80%81%E4%BC%98%E5%8A%BF%E5%8F%8A%E9%80%82%E7%94%A8%E5%9C%BA%E6%99%AF.md">【前端】TypeScript与JavaScript对比：异同、优势及适用场景</a></li>
<li><a href="../%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/%E3%80%90%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%E3%80%91JavaScript%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91%E6%94%BB%E7%95%A5%EF%BC%9A%E5%89%8D%E7%AB%AF%E5%88%B0%E5%90%8E%E7%AB%AF%E7%9A%84%E5%AE%8C%E6%95%B4%E5%BE%81%E7%A8%8B.md">【学习路线】JavaScript全栈开发攻略：前端到后端的完整征程</a></li>
<li><a href="./%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E8%AF%A6%E8%A7%A3%EF%BC%9A%E4%BB%8E%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E5%88%B0%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E7%9A%84%E5%AE%8C%E6%95%B4%E6%8C%87%E5%8D%97.md">【前端】跨域问题详解：从同源策略到解决方案的完整指南</a></li>
</ul>
<h2 id="技术资源"><a href="#技术资源" class="headerlink" title="技术资源"></a>技术资源</h2><ul>
<li><a href="https://babeljs.io/repl">Babel在线转换器</a></li>
<li><a href="https://kangax.github.io/compat-table/es6/">JavaScript类兼容性表</a></li>
<li><a href="https://node.green/">Node.js ES6支持情况</a></li>
<li><a href="https://caniuse.com/es6-class">Can I Use - JavaScript Classes</a></li>
</ul>
<h2 id="学习资源"><a href="#学习资源" class="headerlink" title="学习资源"></a>学习资源</h2><ul>
<li><a href="https://book.douban.com/subject/10546125/">JavaScript高级程序设计</a></li>
<li><a href="https://book.douban.com/subject/26351021/">你不知道的JavaScript</a></li>
<li><a href="https://book.douban.com/subject/27127030/">ES6标准入门</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[深入解析JavaScript中Class的本质、语法特性、继承机制，以及与传统原型链的关系，掌握现代JavaScript面向对象编程的核心概念]]>
    
    </summary>
    
      <category term="前端" scheme="https://uwakeme.tech/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="面向对象" scheme="https://uwakeme.tech/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="JavaScript" scheme="https://uwakeme.tech/tags/JavaScript/"/>
    
      <category term="ES6" scheme="https://uwakeme.tech/tags/ES6/"/>
    
      <category term="Class" scheme="https://uwakeme.tech/tags/Class/"/>
    
      <category term="原型链" scheme="https://uwakeme.tech/tags/%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    
      <category term="继承" scheme="https://uwakeme.tech/tags/%E7%BB%A7%E6%89%BF/"/>
    
      <category term="编程范式" scheme="https://uwakeme.tech/tags/%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F/"/>
    
      <category term="前端" scheme="https://uwakeme.tech/categories/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[【前端】跨域问题详解：从同源策略到解决方案的完整指南]]></title>
    <link href="https://uwakeme.tech/2025/07/28/%E5%89%8D%E7%AB%AF/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E8%AF%A6%E8%A7%A3%EF%BC%9A%E4%BB%8E%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E5%88%B0%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E7%9A%84%E5%AE%8C%E6%95%B4%E6%8C%87%E5%8D%97/"/>
    <id>https://uwakeme.tech/2025/07/28/前端/【前端】跨域问题详解：从同源策略到解决方案的完整指南/</id>
    <published>2025-07-27T16:00:00.000Z</published>
    <updated>2025-07-28T03:33:31.304Z</updated>
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>跨域问题是前端开发中最常遇到的问题之一，它源于浏览器的同源策略安全机制。随着现代Web应用架构的复杂化，前后端分离、微服务架构的普及，跨域问题变得更加突出。本文将从同源策略的基本概念出发，深入分析跨域问题的本质，并详细介绍各种跨域解决方案的原理、实现方式和适用场景。</p>
<h1 id="一、同源策略基础"><a href="#一、同源策略基础" class="headerlink" title="一、同源策略基础"></a>一、同源策略基础</h1><h2 id="（一）什么是同源策略"><a href="#（一）什么是同源策略" class="headerlink" title="（一）什么是同源策略"></a>（一）什么是同源策略</h2><p>同源策略（Same-Origin Policy）是浏览器的一个重要安全机制，它限制了从一个源加载的文档或脚本如何与来自另一个源的资源进行交互。这是一个用于隔离潜在恶意文档的重要安全机制。</p>
<h3 id="1-源的定义"><a href="#1-源的定义" class="headerlink" title="1. 源的定义"></a>1. 源的定义</h3><p>一个源由三个部分组成：</p>
<ul>
<li><strong>协议（Protocol）</strong>：如 <code>http://</code> 或 <code>https://</code></li>
<li><strong>域名（Domain）</strong>：如 <code>example.com</code> 或 <code>api.example.com</code></li>
<li><strong>端口（Port）</strong>：如 <code>:80</code>、<code>:443</code>、<code>:3000</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 同源示例</span></span><br><span class="line"><span class="keyword">const</span> currentOrigin = <span class="string">&#x27;https://www.example.com:443&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下URL与当前源的对比：</span></span><br><span class="line"><span class="keyword">const</span> urls = [</span><br><span class="line">    <span class="string">&#x27;https://www.example.com:443/api/data&#x27;</span>,     <span class="comment">// ✅ 同源（协议、域名、端口都相同）</span></span><br><span class="line">    <span class="string">&#x27;https://www.example.com/api/data&#x27;</span>,         <span class="comment">// ✅ 同源（HTTPS默认端口443）</span></span><br><span class="line">    <span class="string">&#x27;http://www.example.com:443/api/data&#x27;</span>,      <span class="comment">// ❌ 跨域（协议不同）</span></span><br><span class="line">    <span class="string">&#x27;https://api.example.com:443/api/data&#x27;</span>,     <span class="comment">// ❌ 跨域（域名不同）</span></span><br><span class="line">    <span class="string">&#x27;https://www.example.com:8080/api/data&#x27;</span>,    <span class="comment">// ❌ 跨域（端口不同）</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<h3 id="2-同源策略的限制范围"><a href="#2-同源策略的限制范围" class="headerlink" title="2. 同源策略的限制范围"></a>2. 同源策略的限制范围</h3><p>同源策略主要限制以下几个方面：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. XMLHttpRequest和Fetch API</span></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;https://api.other-domain.com/data&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">json</span>())</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 跨域请求会被阻止</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;CORS error:&#x27;</span>, error);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. DOM访问限制</span></span><br><span class="line"><span class="comment">// 无法访问不同源的iframe内容</span></span><br><span class="line"><span class="keyword">const</span> iframe = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;cross-origin-iframe&#x27;</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> iframeDocument = iframe.<span class="property">contentDocument</span>; <span class="comment">// 会抛出错误</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Cannot access cross-origin iframe:&#x27;</span>, error);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. Cookie、LocalStorage、SessionStorage访问限制</span></span><br><span class="line"><span class="comment">// 无法读取其他域的存储数据</span></span><br></pre></td></tr></table></figure>

<h2 id="（二）同源策略的安全意义"><a href="#（二）同源策略的安全意义" class="headerlink" title="（二）同源策略的安全意义"></a>（二）同源策略的安全意义</h2><h3 id="1-防止恶意脚本攻击"><a href="#1-防止恶意脚本攻击" class="headerlink" title="1. 防止恶意脚本攻击"></a>1. 防止恶意脚本攻击</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 恶意网站示例：如果没有同源策略</span></span><br><span class="line"><span class="comment">// 恶意网站 evil.com 上的脚本</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">stealUserData</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 如果没有同源策略，恶意脚本可以：</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 1. 读取用户在银行网站的Cookie</span></span><br><span class="line">    <span class="keyword">const</span> bankCookies = <span class="variable language_">document</span>.<span class="property">cookie</span>; <span class="comment">// 被同源策略阻止</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2. 向银行API发送请求</span></span><br><span class="line">    <span class="title function_">fetch</span>(<span class="string">&#x27;https://bank.com/api/transfer&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">        <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">            <span class="attr">to</span>: <span class="string">&#x27;evil-account&#x27;</span>,</span><br><span class="line">            <span class="attr">amount</span>: <span class="number">10000</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;); <span class="comment">// 被同源策略阻止</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 3. 读取用户的个人信息</span></span><br><span class="line">    <span class="keyword">const</span> userInfo = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;userInfo&#x27;</span>); <span class="comment">// 被同源策略阻止</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-保护用户隐私"><a href="#2-保护用户隐私" class="headerlink" title="2. 保护用户隐私"></a>2. 保护用户隐私</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 同源策略保护用户隐私的示例</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PrivacyProtection</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">sensitiveData</span> = &#123;</span><br><span class="line">            <span class="attr">personalInfo</span>: <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;personalInfo&#x27;</span>),</span><br><span class="line">            <span class="attr">authToken</span>: <span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;authToken&#x27;</span>),</span><br><span class="line">            <span class="attr">userPreferences</span>: <span class="variable language_">this</span>.<span class="title function_">getCookieValue</span>(<span class="string">&#x27;preferences&#x27;</span>)</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 只有同源的脚本才能访问这些数据</span></span><br><span class="line">    <span class="title function_">getSensitiveData</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 这些数据只能被同源的脚本访问</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">sensitiveData</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">getCookieValue</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> value = <span class="string">`; <span class="subst">$&#123;<span class="variable language_">document</span>.cookie&#125;</span>`</span>;</span><br><span class="line">        <span class="keyword">const</span> parts = value.<span class="title function_">split</span>(<span class="string">`; <span class="subst">$&#123;name&#125;</span>=`</span>);</span><br><span class="line">        <span class="keyword">if</span> (parts.<span class="property">length</span> === <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> parts.<span class="title function_">pop</span>().<span class="title function_">split</span>(<span class="string">&#x27;;&#x27;</span>).<span class="title function_">shift</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="二、跨域问题的表现形式"><a href="#二、跨域问题的表现形式" class="headerlink" title="二、跨域问题的表现形式"></a>二、跨域问题的表现形式</h1><h2 id="（一）常见的跨域错误"><a href="#（一）常见的跨域错误" class="headerlink" title="（一）常见的跨域错误"></a>（一）常见的跨域错误</h2><h3 id="1-CORS错误"><a href="#1-CORS错误" class="headerlink" title="1. CORS错误"></a>1. CORS错误</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 典型的CORS错误示例</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchCrossOriginData</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;https://api.external-service.com/data&#x27;</span>);</span><br><span class="line">        <span class="keyword">const</span> data = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="comment">// 浏览器控制台会显示类似错误：</span></span><br><span class="line">        <span class="comment">// Access to fetch at &#x27;https://api.external-service.com/data&#x27; </span></span><br><span class="line">        <span class="comment">// from origin &#x27;https://my-website.com&#x27; has been blocked by CORS policy</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;CORS Error:&#x27;</span>, error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-不同类型请求的跨域表现"><a href="#2-不同类型请求的跨域表现" class="headerlink" title="2. 不同类型请求的跨域表现"></a>2. 不同类型请求的跨域表现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 跨域请求检测工具</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CrossOriginDetector</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">currentOrigin</span> = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">origin</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 检测URL是否跨域</span></span><br><span class="line">    <span class="title function_">isCrossOrigin</span>(<span class="params">url</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> targetURL = <span class="keyword">new</span> <span class="title function_">URL</span>(url);</span><br><span class="line">            <span class="keyword">const</span> currentURL = <span class="keyword">new</span> <span class="title function_">URL</span>(<span class="variable language_">this</span>.<span class="property">currentOrigin</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                targetURL.<span class="property">protocol</span> !== currentURL.<span class="property">protocol</span> ||</span><br><span class="line">                targetURL.<span class="property">hostname</span> !== currentURL.<span class="property">hostname</span> ||</span><br><span class="line">                targetURL.<span class="property">port</span> !== currentURL.<span class="property">port</span></span><br><span class="line">            );</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Invalid URL:&#x27;</span>, url);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 测试不同类型的跨域请求</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">testCrossOriginRequests</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> testUrls = [</span><br><span class="line">            <span class="string">&#x27;https://api.github.com/users/octocat&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;https://jsonplaceholder.typicode.com/posts/1&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;https://httpbin.org/get&#x27;</span></span><br><span class="line">        ];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> url <span class="keyword">of</span> testUrls) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Testing: <span class="subst">$&#123;url&#125;</span>`</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Is cross-origin: <span class="subst">$&#123;<span class="variable language_">this</span>.isCrossOrigin(url)&#125;</span>`</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 测试fetch请求</span></span><br><span class="line">                <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(url);</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`✅ Fetch successful: <span class="subst">$&#123;response.status&#125;</span>`</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`❌ Fetch failed: <span class="subst">$&#123;error.message&#125;</span>`</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 测试图片加载（通常不受CORS限制）</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">testImageLoad</span>(url);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">testImageLoad</span>(<span class="params">url</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> img = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">        img.<span class="property">onload</span> = <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`✅ Image load successful: <span class="subst">$&#123;url&#125;</span>`</span>);</span><br><span class="line">        img.<span class="property">onerror</span> = <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`❌ Image load failed: <span class="subst">$&#123;url&#125;</span>`</span>);</span><br><span class="line">        img.<span class="property">src</span> = url;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">const</span> detector = <span class="keyword">new</span> <span class="title class_">CrossOriginDetector</span>();</span><br><span class="line">detector.<span class="title function_">testCrossOriginRequests</span>();</span><br></pre></td></tr></table></figure>

<h2 id="（二）哪些资源不受同源策略限制"><a href="#（二）哪些资源不受同源策略限制" class="headerlink" title="（二）哪些资源不受同源策略限制"></a>（二）哪些资源不受同源策略限制</h2><h3 id="1-标签嵌入资源"><a href="#1-标签嵌入资源" class="headerlink" title="1. 标签嵌入资源"></a>1. 标签嵌入资源</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 以下资源通常不受同源策略限制 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 图片 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://external-site.com/image.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;External Image&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 样式表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://external-site.com/styles.css&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 脚本文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://external-site.com/script.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 字体文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="keyword">@font-face</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-family</span>: <span class="string">&#x27;ExternalFont&#x27;</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;https://external-site.com/font.woff2&#x27;</span>);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 视频和音频 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;https://external-site.com/video.mp4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;https://external-site.com/audio.mp3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- iframe（但内容访问受限） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;https://external-site.com/page.html&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-表单提交"><a href="#2-表单提交" class="headerlink" title="2. 表单提交"></a>2. 表单提交</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 表单可以向任何域提交数据 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;https://external-api.com/submit&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;data&quot;</span> <span class="attr">value</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>Submit to External Domain<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JavaScript表单提交也不受同源策略限制</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">submitToExternalDomain</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> form = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;form&#x27;</span>);</span><br><span class="line">    form.<span class="property">method</span> = <span class="string">&#x27;POST&#x27;</span>;</span><br><span class="line">    form.<span class="property">action</span> = <span class="string">&#x27;https://external-api.com/submit&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> input = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;input&#x27;</span>);</span><br><span class="line">    input.<span class="property">type</span> = <span class="string">&#x27;hidden&#x27;</span>;</span><br><span class="line">    input.<span class="property">name</span> = <span class="string">&#x27;data&#x27;</span>;</span><br><span class="line">    input.<span class="property">value</span> = <span class="string">&#x27;test data&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">    form.<span class="title function_">appendChild</span>(input);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(form);</span><br><span class="line">    form.<span class="title function_">submit</span>(); <span class="comment">// 这个提交不会被同源策略阻止</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="三、CORS（跨域资源共享）详解"><a href="#三、CORS（跨域资源共享）详解" class="headerlink" title="三、CORS（跨域资源共享）详解"></a>三、CORS（跨域资源共享）详解</h1><h2 id="（一）CORS基本概念"><a href="#（一）CORS基本概念" class="headerlink" title="（一）CORS基本概念"></a>（一）CORS基本概念</h2><p>CORS（Cross-Origin Resource Sharing）是W3C标准，它使用额外的HTTP头来告诉浏览器让运行在一个域上的Web应用被准许访问来自不同源服务器上的指定资源。</p>
<h3 id="1-CORS工作原理"><a href="#1-CORS工作原理" class="headerlink" title="1. CORS工作原理"></a>1. CORS工作原理</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CORS请求流程示例</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CORSExample</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">apiBase</span> = <span class="string">&#x27;https://api.external-service.com&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 简单请求示例</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">makeSimpleRequest</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.apiBase&#125;</span>/data`</span>, &#123;</span><br><span class="line">                <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">                <span class="attr">headers</span>: &#123;</span><br><span class="line">                    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 浏览器会自动添加Origin头</span></span><br><span class="line">            <span class="comment">// Origin: https://my-website.com</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 服务器需要返回适当的CORS头</span></span><br><span class="line">            <span class="comment">// Access-Control-Allow-Origin: https://my-website.com</span></span><br><span class="line">            <span class="comment">// 或者 Access-Control-Allow-Origin: *</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;CORS request failed:&#x27;</span>, error);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 预检请求示例</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">makePreflightRequest</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.apiBase&#125;</span>/data`</span>, &#123;</span><br><span class="line">                <span class="attr">method</span>: <span class="string">&#x27;PUT&#x27;</span>,</span><br><span class="line">                <span class="attr">headers</span>: &#123;</span><br><span class="line">                    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;X-Custom-Header&#x27;</span>: <span class="string">&#x27;custom-value&#x27;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123; <span class="attr">data</span>: <span class="string">&#x27;test&#x27;</span> &#125;)</span><br><span class="line">            &#125;);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 浏览器会先发送OPTIONS预检请求</span></span><br><span class="line">            <span class="comment">// OPTIONS /data HTTP/1.1</span></span><br><span class="line">            <span class="comment">// Origin: https://my-website.com</span></span><br><span class="line">            <span class="comment">// Access-Control-Request-Method: PUT</span></span><br><span class="line">            <span class="comment">// Access-Control-Request-Headers: X-Custom-Header</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Preflight request failed:&#x27;</span>, error);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-简单请求-vs-预检请求"><a href="#2-简单请求-vs-预检请求" class="headerlink" title="2. 简单请求 vs 预检请求"></a>2. 简单请求 vs 预检请求</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请求类型判断工具</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CORSRequestAnalyzer</span> &#123;</span><br><span class="line">    <span class="comment">// 简单请求的条件</span></span><br><span class="line">    <span class="title function_">isSimpleRequest</span>(<span class="params">method, headers, contentType</span>) &#123;</span><br><span class="line">        <span class="comment">// 1. 方法必须是以下之一</span></span><br><span class="line">        <span class="keyword">const</span> simpleMethods = [<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;HEAD&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>];</span><br><span class="line">        <span class="keyword">if</span> (!simpleMethods.<span class="title function_">includes</span>(method.<span class="title function_">toUpperCase</span>())) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2. 只能包含简单头部</span></span><br><span class="line">        <span class="keyword">const</span> simpleHeaders = [</span><br><span class="line">            <span class="string">&#x27;accept&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;accept-language&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;content-language&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;content-type&#x27;</span></span><br><span class="line">        ];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">const</span> headerKeys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(headers).<span class="title function_">map</span>(<span class="function"><span class="params">key</span> =&gt;</span> key.<span class="title function_">toLowerCase</span>());</span><br><span class="line">        <span class="keyword">const</span> hasComplexHeaders = headerKeys.<span class="title function_">some</span>(<span class="function"><span class="params">key</span> =&gt;</span> !simpleHeaders.<span class="title function_">includes</span>(key));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (hasComplexHeaders) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3. Content-Type必须是以下之一</span></span><br><span class="line">        <span class="keyword">if</span> (contentType) &#123;</span><br><span class="line">            <span class="keyword">const</span> simpleContentTypes = [</span><br><span class="line">                <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;multipart/form-data&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;text/plain&#x27;</span></span><br><span class="line">            ];</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (!simpleContentTypes.<span class="title function_">includes</span>(contentType)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 分析请求类型</span></span><br><span class="line">    <span class="title function_">analyzeRequest</span>(<span class="params">method, headers = &#123;&#125;, contentType = <span class="literal">null</span></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> isSimple = <span class="variable language_">this</span>.<span class="title function_">isSimpleRequest</span>(method, headers, contentType);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            isSimple,</span><br><span class="line">            <span class="attr">requiresPreflight</span>: !isSimple,</span><br><span class="line">            <span class="attr">analysis</span>: &#123;</span><br><span class="line">                <span class="attr">method</span>: method,</span><br><span class="line">                <span class="attr">headers</span>: headers,</span><br><span class="line">                <span class="attr">contentType</span>: contentType,</span><br><span class="line">                <span class="attr">reason</span>: isSimple ? <span class="string">&#x27;Meets all simple request criteria&#x27;</span> : <span class="string">&#x27;Contains complex headers or method&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">const</span> analyzer = <span class="keyword">new</span> <span class="title class_">CORSRequestAnalyzer</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简单请求示例</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(analyzer.<span class="title function_">analyzeRequest</span>(<span class="string">&#x27;GET&#x27;</span>, &#123;</span><br><span class="line">    <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 预检请求示例</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(analyzer.<span class="title function_">analyzeRequest</span>(<span class="string">&#x27;PUT&#x27;</span>, &#123;</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Authorization&#x27;</span>: <span class="string">&#x27;Bearer token123&#x27;</span></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure>

<h2 id="（二）服务端CORS配置"><a href="#（二）服务端CORS配置" class="headerlink" title="（二）服务端CORS配置"></a>（二）服务端CORS配置</h2><h3 id="1-Node-js-Express-CORS配置"><a href="#1-Node-js-Express-CORS配置" class="headerlink" title="1. Node.js&#x2F;Express CORS配置"></a>1. Node.js&#x2F;Express CORS配置</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Express服务器CORS配置示例</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">&#x27;cors&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 基本CORS配置</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cors</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 自定义CORS配置</span></span><br><span class="line"><span class="keyword">const</span> corsOptions = &#123;</span><br><span class="line">    <span class="attr">origin</span>: <span class="keyword">function</span> (<span class="params">origin, callback</span>) &#123;</span><br><span class="line">        <span class="comment">// 允许的域名列表</span></span><br><span class="line">        <span class="keyword">const</span> allowedOrigins = [</span><br><span class="line">            <span class="string">&#x27;https://my-website.com&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;https://admin.my-website.com&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;http://localhost:3000&#x27;</span></span><br><span class="line">        ];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 允许没有origin的请求（如移动应用）</span></span><br><span class="line">        <span class="keyword">if</span> (!origin) <span class="keyword">return</span> <span class="title function_">callback</span>(<span class="literal">null</span>, <span class="literal">true</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (allowedOrigins.<span class="title function_">indexOf</span>(origin) !== -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="title function_">callback</span>(<span class="literal">null</span>, <span class="literal">true</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_">callback</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Not allowed by CORS&#x27;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>: [<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;PUT&#x27;</span>, <span class="string">&#x27;DELETE&#x27;</span>],</span><br><span class="line">    <span class="attr">allowedHeaders</span>: [<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;Authorization&#x27;</span>, <span class="string">&#x27;X-Requested-With&#x27;</span>],</span><br><span class="line">    <span class="attr">credentials</span>: <span class="literal">true</span>, <span class="comment">// 允许携带Cookie</span></span><br><span class="line">    <span class="attr">maxAge</span>: <span class="number">86400</span> <span class="comment">// 预检请求缓存时间（秒）</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cors</span>(corsOptions));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 手动设置CORS头</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> origin = req.<span class="property">headers</span>.<span class="property">origin</span>;</span><br><span class="line">    <span class="keyword">const</span> allowedOrigins = [<span class="string">&#x27;https://my-website.com&#x27;</span>, <span class="string">&#x27;http://localhost:3000&#x27;</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (allowedOrigins.<span class="title function_">includes</span>(origin)) &#123;</span><br><span class="line">        res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, origin);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="string">&#x27;GET, POST, PUT, DELETE, OPTIONS&#x27;</span>);</span><br><span class="line">    res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="string">&#x27;Content-Type, Authorization&#x27;</span>);</span><br><span class="line">    res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Credentials&#x27;</span>, <span class="string">&#x27;true&#x27;</span>);</span><br><span class="line">    res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Max-Age&#x27;</span>, <span class="string">&#x27;86400&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 处理预检请求</span></span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">method</span> === <span class="string">&#x27;OPTIONS&#x27;</span>) &#123;</span><br><span class="line">        res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">end</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// API路由</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/api/data&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">json</span>(&#123; <span class="attr">message</span>: <span class="string">&#x27;CORS enabled data&#x27;</span>, <span class="attr">timestamp</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>() &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3001</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;CORS-enabled server running on port 3001&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="2-其他服务器CORS配置"><a href="#2-其他服务器CORS配置" class="headerlink" title="2. 其他服务器CORS配置"></a>2. 其他服务器CORS配置</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Nginx CORS配置</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> api.example.com;</span><br><span class="line">    </span><br><span class="line">    <span class="section">location</span> /api/ &#123;</span><br><span class="line">        <span class="comment"># 处理预检请求</span></span><br><span class="line">        <span class="attribute">if</span> (<span class="variable">$request_method</span> = <span class="string">&#x27;OPTIONS&#x27;</span>) &#123;</span><br><span class="line">            <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span> <span class="string">&#x27;<span class="variable">$http_origin</span>&#x27;</span> always;</span><br><span class="line">            <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span> <span class="string">&#x27;GET, POST, PUT, DELETE, OPTIONS&#x27;</span> always;</span><br><span class="line">            <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span> <span class="string">&#x27;Content-Type, Authorization, X-Requested-With&#x27;</span> always;</span><br><span class="line">            <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Max-Age&#x27;</span> <span class="number">86400</span> always;</span><br><span class="line">            <span class="attribute">add_header</span> <span class="string">&#x27;Content-Length&#x27;</span> <span class="number">0</span>;</span><br><span class="line">            <span class="attribute">add_header</span> <span class="string">&#x27;Content-Type&#x27;</span> <span class="string">&#x27;text/plain&#x27;</span>;</span><br><span class="line">            <span class="attribute">return</span> <span class="number">204</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 处理实际请求</span></span><br><span class="line">        <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span> <span class="string">&#x27;<span class="variable">$http_origin</span>&#x27;</span> always;</span><br><span class="line">        <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Credentials&#x27;</span> <span class="string">&#x27;true&#x27;</span> always;</span><br><span class="line">        </span><br><span class="line">        <span class="attribute">proxy_pass</span> http://backend;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Apache CORS配置 (.htaccess)</span></span><br><span class="line"><span class="section">&lt;IfModule mod_headers.c&gt;</span></span><br><span class="line">    <span class="comment"># 处理预检请求</span></span><br><span class="line">    <span class="attribute">RewriteEngine</span> <span class="literal">On</span></span><br><span class="line">    <span class="attribute">RewriteCond</span> <span class="variable">%&#123;REQUEST_METHOD&#125;</span> OPTIONS</span><br><span class="line">    <span class="attribute">RewriteRule</span> ^(.*)$ $<span class="number">1</span><span class="meta"> [R=200,L]</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 设置CORS头</span></span><br><span class="line">    <span class="attribute">Header</span> always set Access-Control-<span class="literal">Allow</span>-Origin <span class="string">&quot;*&quot;</span></span><br><span class="line">    <span class="attribute">Header</span> always set Access-Control-<span class="literal">Allow</span>-Methods <span class="string">&quot;GET, POST, PUT, DELETE, OPTIONS&quot;</span></span><br><span class="line">    <span class="attribute">Header</span> always set Access-Control-<span class="literal">Allow</span>-Headers <span class="string">&quot;Content-Type, Authorization, X-Requested-With&quot;</span></span><br><span class="line">    <span class="attribute">Header</span> always set Access-Control-Max-Age <span class="string">&quot;86400&quot;</span></span><br><span class="line"><span class="section">&lt;/IfModule&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="四、JSONP跨域解决方案"><a href="#四、JSONP跨域解决方案" class="headerlink" title="四、JSONP跨域解决方案"></a>四、JSONP跨域解决方案</h1><h2 id="（一）JSONP原理与实现"><a href="#（一）JSONP原理与实现" class="headerlink" title="（一）JSONP原理与实现"></a>（一）JSONP原理与实现</h2><p>JSONP（JSON with Padding）是一种利用<code>&lt;script&gt;</code>标签不受同源策略限制的特性来实现跨域请求的技术。</p>
<h3 id="1-JSONP基本原理"><a href="#1-JSONP基本原理" class="headerlink" title="1. JSONP基本原理"></a>1. JSONP基本原理</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JSONP实现原理</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JSONPClient</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">callbackCounter</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">callbacks</span> = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送JSONP请求</span></span><br><span class="line">    <span class="title function_">request</span>(<span class="params">url, options = &#123;&#125;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 生成唯一的回调函数名</span></span><br><span class="line">            <span class="keyword">const</span> callbackName = <span class="string">`jsonp_callback_<span class="subst">$&#123;<span class="built_in">Date</span>.now()&#125;</span>_<span class="subst">$&#123;++<span class="variable language_">this</span>.callbackCounter&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置超时时间</span></span><br><span class="line">            <span class="keyword">const</span> timeout = options.<span class="property">timeout</span> || <span class="number">10000</span>;</span><br><span class="line">            <span class="keyword">let</span> timeoutId;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建全局回调函数</span></span><br><span class="line">            <span class="variable language_">window</span>[callbackName] = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// 清理工作</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">cleanup</span>(callbackName, timeoutId);</span><br><span class="line">                <span class="title function_">resolve</span>(data);</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建script标签</span></span><br><span class="line">            <span class="keyword">const</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">            script.<span class="property">src</span> = <span class="variable language_">this</span>.<span class="title function_">buildURL</span>(url, callbackName, options.<span class="property">params</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 错误处理</span></span><br><span class="line">            script.<span class="property">onerror</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">cleanup</span>(callbackName, timeoutId);</span><br><span class="line">                <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;JSONP request failed&#x27;</span>));</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置超时</span></span><br><span class="line">            timeoutId = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">cleanup</span>(callbackName, timeoutId);</span><br><span class="line">                <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;JSONP request timeout&#x27;</span>));</span><br><span class="line">            &#125;, timeout);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 添加到页面并发送请求</span></span><br><span class="line">            <span class="variable language_">document</span>.<span class="property">head</span>.<span class="title function_">appendChild</span>(script);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构建请求URL</span></span><br><span class="line">    <span class="title function_">buildURL</span>(<span class="params">url, callbackName, params = &#123;&#125;</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> urlObj = <span class="keyword">new</span> <span class="title function_">URL</span>(url);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加回调参数</span></span><br><span class="line">        urlObj.<span class="property">searchParams</span>.<span class="title function_">set</span>(<span class="string">&#x27;callback&#x27;</span>, callbackName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加其他参数</span></span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">keys</span>(params).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">            urlObj.<span class="property">searchParams</span>.<span class="title function_">set</span>(key, params[key]);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> urlObj.<span class="title function_">toString</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清理资源</span></span><br><span class="line">    <span class="title function_">cleanup</span>(<span class="params">callbackName, timeoutId</span>) &#123;</span><br><span class="line">        <span class="comment">// 清除超时定时器</span></span><br><span class="line">        <span class="keyword">if</span> (timeoutId) &#123;</span><br><span class="line">            <span class="built_in">clearTimeout</span>(timeoutId);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除全局回调函数</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">window</span>[callbackName]) &#123;</span><br><span class="line">            <span class="keyword">delete</span> <span class="variable language_">window</span>[callbackName];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 移除script标签</span></span><br><span class="line">        <span class="keyword">const</span> script = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">`script[src*=&quot;<span class="subst">$&#123;callbackName&#125;</span>&quot;]`</span>);</span><br><span class="line">        <span class="keyword">if</span> (script &amp;&amp; script.<span class="property">parentNode</span>) &#123;</span><br><span class="line">            script.<span class="property">parentNode</span>.<span class="title function_">removeChild</span>(script);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">const</span> jsonpClient = <span class="keyword">new</span> <span class="title class_">JSON</span>PClient();</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchWeatherData</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> data = <span class="keyword">await</span> jsonpClient.<span class="title function_">request</span>(<span class="string">&#x27;https://api.weather.com/data&#x27;</span>, &#123;</span><br><span class="line">            <span class="attr">params</span>: &#123;</span><br><span class="line">                <span class="attr">city</span>: <span class="string">&#x27;Beijing&#x27;</span>,</span><br><span class="line">                <span class="attr">key</span>: <span class="string">&#x27;your-api-key&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">timeout</span>: <span class="number">5000</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Weather data:&#x27;</span>, data);</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Failed to fetch weather data:&#x27;</span>, error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-服务端JSONP支持"><a href="#2-服务端JSONP支持" class="headerlink" title="2. 服务端JSONP支持"></a>2. 服务端JSONP支持</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Node.js服务端JSONP支持</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// JSONP中间件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">jsonp</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">    res.<span class="property">jsonp</span> = <span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> callback = req.<span class="property">query</span>.<span class="property">callback</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (callback) &#123;</span><br><span class="line">            <span class="comment">// 安全检查：确保callback是有效的函数名</span></span><br><span class="line">            <span class="keyword">if</span> (!<span class="regexp">/^[a-zA-Z_$][a-zA-Z0-9_$]*$/</span>.<span class="title function_">test</span>(callback)) &#123;</span><br><span class="line">                <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">json</span>(&#123; <span class="attr">error</span>: <span class="string">&#x27;Invalid callback name&#x27;</span> &#125;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 返回JSONP响应</span></span><br><span class="line">            res.<span class="title function_">set</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/javascript&#x27;</span>);</span><br><span class="line">            res.<span class="title function_">send</span>(<span class="string">`<span class="subst">$&#123;callback&#125;</span>(<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(data)&#125;</span>);`</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 普通JSON响应</span></span><br><span class="line">            res.<span class="title function_">json</span>(data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(jsonp);</span><br><span class="line"></span><br><span class="line"><span class="comment">// API端点</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/api/data&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> data = &#123;</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&#x27;Hello from JSONP API&#x27;</span>,</span><br><span class="line">        <span class="attr">timestamp</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>(),</span><br><span class="line">        <span class="attr">params</span>: req.<span class="property">query</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    res.<span class="title function_">jsonp</span>(data);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3002</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;JSONP server running on port 3002&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="（二）JSONP的优缺点"><a href="#（二）JSONP的优缺点" class="headerlink" title="（二）JSONP的优缺点"></a>（二）JSONP的优缺点</h2><h3 id="1-优点"><a href="#1-优点" class="headerlink" title="1. 优点"></a>1. 优点</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JSONP优点演示</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JSONPAdvantages</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 兼容性好 - 支持所有浏览器</span></span><br><span class="line">    <span class="title function_">demonstrateCompatibility</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;JSONP works in all browsers, including IE6+&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 即使在老旧浏览器中也能工作</span></span><br><span class="line">        <span class="keyword">const</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">        script.<span class="property">src</span> = <span class="string">&#x27;https://api.example.com/data?callback=handleData&#x27;</span>;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">head</span>.<span class="title function_">appendChild</span>(script);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 实现简单</span></span><br><span class="line">    <span class="title function_">simpleImplementation</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 最简单的JSONP实现</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">jsonp</span>(<span class="params">url, callback</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">            <span class="keyword">const</span> callbackName = <span class="string">&#x27;jsonp_&#x27;</span> + <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line"></span><br><span class="line">            <span class="variable language_">window</span>[callbackName] = <span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">                <span class="title function_">callback</span>(data);</span><br><span class="line">                <span class="variable language_">document</span>.<span class="property">head</span>.<span class="title function_">removeChild</span>(script);</span><br><span class="line">                <span class="keyword">delete</span> <span class="variable language_">window</span>[callbackName];</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            script.<span class="property">src</span> = url + <span class="string">&#x27;?callback=&#x27;</span> + callbackName;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="property">head</span>.<span class="title function_">appendChild</span>(script);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用</span></span><br><span class="line">        <span class="title function_">jsonp</span>(<span class="string">&#x27;https://api.example.com/data&#x27;</span>, <span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Received data:&#x27;</span>, data);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 不需要服务器特殊配置（相比CORS）</span></span><br><span class="line">    <span class="title function_">noSpecialServerConfig</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server only needs to support callback parameter&#x27;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;No need for CORS headers configuration&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-缺点和限制"><a href="#2-缺点和限制" class="headerlink" title="2. 缺点和限制"></a>2. 缺点和限制</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JSONP缺点演示</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JSONPLimitations</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 只支持GET请求</span></span><br><span class="line">    <span class="title function_">demonstrateGETOnly</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;JSONP只能发送GET请求，无法发送POST、PUT、DELETE等&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 无法实现的操作</span></span><br><span class="line">        <span class="comment">// jsonp(&#x27;https://api.example.com/users&#x27;, &#x27;POST&#x27;, userData); // 不可能</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 安全风险</span></span><br><span class="line">    <span class="title function_">demonstrateSecurityRisks</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// XSS风险：恶意服务器可以执行任意JavaScript代码</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">unsafeJSONP</span>(<span class="params">url</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">            script.<span class="property">src</span> = url; <span class="comment">// 如果服务器返回恶意代码，会被执行</span></span><br><span class="line">            <span class="variable language_">document</span>.<span class="property">head</span>.<span class="title function_">appendChild</span>(script);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 安全的JSONP实现应该验证响应</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">safeJSONP</span>(<span class="params">url, callback</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">            <span class="keyword">const</span> callbackName = <span class="string">&#x27;jsonp_&#x27;</span> + <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line"></span><br><span class="line">            <span class="variable language_">window</span>[callbackName] = <span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 验证数据格式</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">typeof</span> data === <span class="string">&#x27;object&#x27;</span> &amp;&amp; data !== <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="title function_">callback</span>(data);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Invalid JSONP response&#x27;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;JSONP security error:&#x27;</span>, error);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">// 清理</span></span><br><span class="line">                    <span class="variable language_">document</span>.<span class="property">head</span>.<span class="title function_">removeChild</span>(script);</span><br><span class="line">                    <span class="keyword">delete</span> <span class="variable language_">window</span>[callbackName];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            script.<span class="property">src</span> = url + <span class="string">&#x27;?callback=&#x27;</span> + callbackName;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="property">head</span>.<span class="title function_">appendChild</span>(script);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 错误处理困难</span></span><br><span class="line">    <span class="title function_">demonstrateErrorHandling</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">jsonpWithErrorHandling</span>(<span class="params">url, callback, errorCallback</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">            <span class="keyword">const</span> callbackName = <span class="string">&#x27;jsonp_&#x27;</span> + <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">            <span class="keyword">let</span> timeoutId;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 成功回调</span></span><br><span class="line">            <span class="variable language_">window</span>[callbackName] = <span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">                <span class="built_in">clearTimeout</span>(timeoutId);</span><br><span class="line">                <span class="title function_">callback</span>(data);</span><br><span class="line">                <span class="title function_">cleanup</span>();</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 错误处理</span></span><br><span class="line">            script.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="built_in">clearTimeout</span>(timeoutId);</span><br><span class="line">                <span class="title function_">errorCallback</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;JSONP request failed&#x27;</span>));</span><br><span class="line">                <span class="title function_">cleanup</span>();</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 超时处理</span></span><br><span class="line">            timeoutId = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="title function_">errorCallback</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;JSONP request timeout&#x27;</span>));</span><br><span class="line">                <span class="title function_">cleanup</span>();</span><br><span class="line">            &#125;, <span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">function</span> <span class="title function_">cleanup</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (script.<span class="property">parentNode</span>) &#123;</span><br><span class="line">                    script.<span class="property">parentNode</span>.<span class="title function_">removeChild</span>(script);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">delete</span> <span class="variable language_">window</span>[callbackName];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            script.<span class="property">src</span> = url + <span class="string">&#x27;?callback=&#x27;</span> + callbackName;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="property">head</span>.<span class="title function_">appendChild</span>(script);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="五、代理服务器解决方案"><a href="#五、代理服务器解决方案" class="headerlink" title="五、代理服务器解决方案"></a>五、代理服务器解决方案</h1><h2 id="（一）开发环境代理配置"><a href="#（一）开发环境代理配置" class="headerlink" title="（一）开发环境代理配置"></a>（一）开发环境代理配置</h2><h3 id="1-Webpack-Dev-Server代理"><a href="#1-Webpack-Dev-Server代理" class="headerlink" title="1. Webpack Dev Server代理"></a>1. Webpack Dev Server代理</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">// ... 其他配置</span></span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">        <span class="attr">port</span>: <span class="number">3000</span>,</span><br><span class="line">        <span class="attr">proxy</span>: &#123;</span><br><span class="line">            <span class="comment">// 代理API请求</span></span><br><span class="line">            <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">                <span class="attr">target</span>: <span class="string">&#x27;https://api.external-service.com&#x27;</span>,</span><br><span class="line">                <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">pathRewrite</span>: &#123;</span><br><span class="line">                    <span class="string">&#x27;^/api&#x27;</span>: <span class="string">&#x27;&#x27;</span> <span class="comment">// 移除/api前缀</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">secure</span>: <span class="literal">true</span>, <span class="comment">// 支持HTTPS</span></span><br><span class="line">                <span class="attr">logLevel</span>: <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 多个代理配置</span></span><br><span class="line">            <span class="string">&#x27;/auth&#x27;</span>: &#123;</span><br><span class="line">                <span class="attr">target</span>: <span class="string">&#x27;https://auth.external-service.com&#x27;</span>,</span><br><span class="line">                <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">headers</span>: &#123;</span><br><span class="line">                    <span class="string">&#x27;Authorization&#x27;</span>: <span class="string">&#x27;Bearer your-token&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 条件代理</span></span><br><span class="line">            <span class="string">&#x27;/conditional&#x27;</span>: &#123;</span><br><span class="line">                <span class="attr">target</span>: <span class="string">&#x27;https://api.external-service.com&#x27;</span>,</span><br><span class="line">                <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">bypass</span>: <span class="keyword">function</span>(<span class="params">req, res, proxyOptions</span>) &#123;</span><br><span class="line">                    <span class="comment">// 根据条件决定是否代理</span></span><br><span class="line">                    <span class="keyword">if</span> (req.<span class="property">headers</span>.<span class="property">accept</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;html&#x27;</span>) !== -<span class="number">1</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="string">&#x27;/index.html&#x27;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="2-Vite代理配置"><a href="#2-Vite代理配置" class="headerlink" title="2. Vite代理配置"></a>2. Vite代理配置</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vite.config.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">    <span class="attr">server</span>: &#123;</span><br><span class="line">        <span class="attr">port</span>: <span class="number">3000</span>,</span><br><span class="line">        <span class="attr">proxy</span>: &#123;</span><br><span class="line">            <span class="comment">// 字符串简写</span></span><br><span class="line">            <span class="string">&#x27;/api&#x27;</span>: <span class="string">&#x27;https://api.external-service.com&#x27;</span>,</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 详细配置</span></span><br><span class="line">            <span class="string">&#x27;/api/v2&#x27;</span>: &#123;</span><br><span class="line">                <span class="attr">target</span>: <span class="string">&#x27;https://api-v2.external-service.com&#x27;</span>,</span><br><span class="line">                <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">rewrite</span>: <span class="function">(<span class="params">path</span>) =&gt;</span> path.<span class="title function_">replace</span>(<span class="regexp">/^\/api\/v2/</span>, <span class="string">&#x27;&#x27;</span>),</span><br><span class="line">                <span class="attr">configure</span>: <span class="function">(<span class="params">proxy, options</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="comment">// 自定义代理配置</span></span><br><span class="line">                    proxy.<span class="title function_">on</span>(<span class="string">&#x27;proxyReq&#x27;</span>, <span class="function">(<span class="params">proxyReq, req, res</span>) =&gt;</span> &#123;</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Proxying request:&#x27;</span>, req.<span class="property">url</span>);</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">            <span class="comment">// WebSocket代理</span></span><br><span class="line">            <span class="string">&#x27;/socket.io&#x27;</span>: &#123;</span><br><span class="line">                <span class="attr">target</span>: <span class="string">&#x27;ws://localhost:3001&#x27;</span>,</span><br><span class="line">                <span class="attr">ws</span>: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="3-Create-React-App代理"><a href="#3-Create-React-App代理" class="headerlink" title="3. Create React App代理"></a>3. Create React App代理</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;my-app&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;proxy&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://api.external-service.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 或者使用setupProxy.js进行高级配置</span></span><br><span class="line"><span class="comment">// src/setupProxy.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; createProxyMiddleware &#125; = <span class="built_in">require</span>(<span class="string">&#x27;http-proxy-middleware&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span>(<span class="params">app</span>) &#123;</span><br><span class="line">    app.<span class="title function_">use</span>(</span><br><span class="line">        <span class="string">&#x27;/api&#x27;</span>,</span><br><span class="line">        <span class="title function_">createProxyMiddleware</span>(&#123;</span><br><span class="line">            <span class="attr">target</span>: <span class="string">&#x27;https://api.external-service.com&#x27;</span>,</span><br><span class="line">            <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">pathRewrite</span>: &#123;</span><br><span class="line">                <span class="string">&#x27;^/api&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onProxyReq</span>: <span class="keyword">function</span>(<span class="params">proxyReq, req, res</span>) &#123;</span><br><span class="line">                <span class="comment">// 修改代理请求</span></span><br><span class="line">                proxyReq.<span class="title function_">setHeader</span>(<span class="string">&#x27;X-Forwarded-For&#x27;</span>, req.<span class="property">ip</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onProxyRes</span>: <span class="keyword">function</span>(<span class="params">proxyRes, req, res</span>) &#123;</span><br><span class="line">                <span class="comment">// 修改代理响应</span></span><br><span class="line">                proxyRes.<span class="property">headers</span>[<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>] = <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    app.<span class="title function_">use</span>(</span><br><span class="line">        <span class="string">&#x27;/auth&#x27;</span>,</span><br><span class="line">        <span class="title function_">createProxyMiddleware</span>(&#123;</span><br><span class="line">            <span class="attr">target</span>: <span class="string">&#x27;https://auth.external-service.com&#x27;</span>,</span><br><span class="line">            <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">secure</span>: <span class="literal">true</span></span><br><span class="line">        &#125;)</span><br><span class="line">    );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="（二）生产环境代理"><a href="#（二）生产环境代理" class="headerlink" title="（二）生产环境代理"></a>（二）生产环境代理</h2><h3 id="1-Nginx反向代理"><a href="#1-Nginx反向代理" class="headerlink" title="1. Nginx反向代理"></a>1. Nginx反向代理</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># nginx.conf</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> my-website.com;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 前端静态文件</span></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span> /var/www/html;</span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># API代理</span></span><br><span class="line">    <span class="section">location</span> /api/ &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> https://api.external-service.com/;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 处理CORS</span></span><br><span class="line">        <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span> <span class="string">&#x27;*&#x27;</span> always;</span><br><span class="line">        <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span> <span class="string">&#x27;GET, POST, PUT, DELETE, OPTIONS&#x27;</span> always;</span><br><span class="line">        <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span> <span class="string">&#x27;Content-Type, Authorization&#x27;</span> always;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 预检请求处理</span></span><br><span class="line">        <span class="attribute">if</span> (<span class="variable">$request_method</span> = <span class="string">&#x27;OPTIONS&#x27;</span>) &#123;</span><br><span class="line">            <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Max-Age&#x27;</span> <span class="number">86400</span>;</span><br><span class="line">            <span class="attribute">add_header</span> <span class="string">&#x27;Content-Length&#x27;</span> <span class="number">0</span>;</span><br><span class="line">            <span class="attribute">add_header</span> <span class="string">&#x27;Content-Type&#x27;</span> <span class="string">&#x27;text/plain&#x27;</span>;</span><br><span class="line">            <span class="attribute">return</span> <span class="number">204</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># WebSocket代理</span></span><br><span class="line">    <span class="section">location</span> /ws/ &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> https://ws.external-service.com/;</span><br><span class="line">        <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Connection <span class="string">&quot;upgrade&quot;</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-Node-js代理服务器"><a href="#2-Node-js代理服务器" class="headerlink" title="2. Node.js代理服务器"></a>2. Node.js代理服务器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// proxy-server.js</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; createProxyMiddleware &#125; = <span class="built_in">require</span>(<span class="string">&#x27;http-proxy-middleware&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 静态文件服务</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;build&#x27;</span>)));</span><br><span class="line"></span><br><span class="line"><span class="comment">// API代理中间件</span></span><br><span class="line"><span class="keyword">const</span> apiProxy = <span class="title function_">createProxyMiddleware</span>(<span class="string">&#x27;/api&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">target</span>: <span class="string">&#x27;https://api.external-service.com&#x27;</span>,</span><br><span class="line">    <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">pathRewrite</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;^/api&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">onProxyReq</span>: <span class="function">(<span class="params">proxyReq, req, res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 添加认证头</span></span><br><span class="line">        <span class="keyword">if</span> (req.<span class="property">headers</span>.<span class="property">authorization</span>) &#123;</span><br><span class="line">            proxyReq.<span class="title function_">setHeader</span>(<span class="string">&#x27;Authorization&#x27;</span>, req.<span class="property">headers</span>.<span class="property">authorization</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 记录请求</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Proxying <span class="subst">$&#123;req.method&#125;</span> <span class="subst">$&#123;req.url&#125;</span> to <span class="subst">$&#123;proxyReq.path&#125;</span>`</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">onProxyRes</span>: <span class="function">(<span class="params">proxyRes, req, res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 添加CORS头</span></span><br><span class="line">        proxyRes.<span class="property">headers</span>[<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>] = <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">        proxyRes.<span class="property">headers</span>[<span class="string">&#x27;Access-Control-Allow-Credentials&#x27;</span>] = <span class="string">&#x27;true&#x27;</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">onError</span>: <span class="function">(<span class="params">err, req, res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Proxy error:&#x27;</span>, err);</span><br><span class="line">        res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">json</span>(&#123; <span class="attr">error</span>: <span class="string">&#x27;Proxy error&#x27;</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(apiProxy);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理SPA路由</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;*&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">sendFile</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;build&#x27;</span>, <span class="string">&#x27;index.html&#x27;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PORT</span> = process.<span class="property">env</span>.<span class="property">PORT</span> || <span class="number">3000</span>;</span><br><span class="line">app.<span class="title function_">listen</span>(<span class="variable constant_">PORT</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Proxy server running on port <span class="subst">$&#123;PORT&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="六、其他跨域解决方案"><a href="#六、其他跨域解决方案" class="headerlink" title="六、其他跨域解决方案"></a>六、其他跨域解决方案</h1><h2 id="（一）PostMessage跨域通信"><a href="#（一）PostMessage跨域通信" class="headerlink" title="（一）PostMessage跨域通信"></a>（一）PostMessage跨域通信</h2><h3 id="1-父子窗口通信"><a href="#1-父子窗口通信" class="headerlink" title="1. 父子窗口通信"></a>1. 父子窗口通信</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父窗口代码</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ParentWindowCommunicator</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">childWindow</span> = <span class="literal">null</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">targetOrigin</span> = <span class="string">&#x27;https://child-domain.com&#x27;</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setupMessageListener</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打开子窗口</span></span><br><span class="line">    <span class="title function_">openChildWindow</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">childWindow</span> = <span class="variable language_">window</span>.<span class="title function_">open</span>(</span><br><span class="line">            <span class="string">&#x27;https://child-domain.com/child.html&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;childWindow&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;width=600,height=400&#x27;</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 等待子窗口加载完成后发送消息</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">sendMessageToChild</span>(&#123;</span><br><span class="line">                <span class="attr">type</span>: <span class="string">&#x27;INIT&#x27;</span>,</span><br><span class="line">                <span class="attr">data</span>: &#123; <span class="attr">message</span>: <span class="string">&#x27;Hello from parent!&#x27;</span> &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送消息到子窗口</span></span><br><span class="line">    <span class="title function_">sendMessageToChild</span>(<span class="params">message</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">childWindow</span> &amp;&amp; !<span class="variable language_">this</span>.<span class="property">childWindow</span>.<span class="property">closed</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">childWindow</span>.<span class="title function_">postMessage</span>(message, <span class="variable language_">this</span>.<span class="property">targetOrigin</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听来自子窗口的消息</span></span><br><span class="line">    <span class="title function_">setupMessageListener</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;message&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 验证消息来源</span></span><br><span class="line">            <span class="keyword">if</span> (event.<span class="property">origin</span> !== <span class="variable language_">this</span>.<span class="property">targetOrigin</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&#x27;Received message from untrusted origin:&#x27;</span>, event.<span class="property">origin</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Received message from child:&#x27;</span>, event.<span class="property">data</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 处理不同类型的消息</span></span><br><span class="line">            <span class="keyword">switch</span> (event.<span class="property">data</span>.<span class="property">type</span>) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;CHILD_READY&#x27;</span>:</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="title function_">handleChildReady</span>(event.<span class="property">data</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;DATA_REQUEST&#x27;</span>:</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="title function_">handleDataRequest</span>(event.<span class="property">data</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;CLOSE_REQUEST&#x27;</span>:</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="title function_">handleCloseRequest</span>();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="attr">default</span>:</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Unknown message type:&#x27;</span>, event.<span class="property">data</span>.<span class="property">type</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">handleChildReady</span>(<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Child window is ready&#x27;</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">sendMessageToChild</span>(&#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;CONFIG&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>: &#123; <span class="attr">theme</span>: <span class="string">&#x27;dark&#x27;</span>, <span class="attr">language</span>: <span class="string">&#x27;zh-CN&#x27;</span> &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">handleDataRequest</span>(<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="comment">// 模拟数据获取</span></span><br><span class="line">        <span class="keyword">const</span> responseData = &#123;</span><br><span class="line">            <span class="attr">users</span>: [</span><br><span class="line">                &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span> &#125;,</span><br><span class="line">                &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;Bob&#x27;</span> &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">sendMessageToChild</span>(&#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;DATA_RESPONSE&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>: responseData,</span><br><span class="line">            <span class="attr">requestId</span>: data.<span class="property">requestId</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">handleCloseRequest</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">childWindow</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">childWindow</span>.<span class="title function_">close</span>();</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">childWindow</span> = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">const</span> communicator = <span class="keyword">new</span> <span class="title class_">ParentWindowCommunicator</span>();</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;openChild&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    communicator.<span class="title function_">openChildWindow</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子窗口代码 (child.html)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChildWindowCommunicator</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">parentOrigin</span> = <span class="string">&#x27;https://parent-domain.com&#x27;</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setupMessageListener</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">notifyParentReady</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通知父窗口子窗口已准备就绪</span></span><br><span class="line">    <span class="title function_">notifyParentReady</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">sendMessageToParent</span>(&#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;CHILD_READY&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>: &#123; <span class="attr">timestamp</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>() &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送消息到父窗口</span></span><br><span class="line">    <span class="title function_">sendMessageToParent</span>(<span class="params">message</span>) &#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">parent</span>.<span class="title function_">postMessage</span>(message, <span class="variable language_">this</span>.<span class="property">parentOrigin</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听来自父窗口的消息</span></span><br><span class="line">    <span class="title function_">setupMessageListener</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;message&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 验证消息来源</span></span><br><span class="line">            <span class="keyword">if</span> (event.<span class="property">origin</span> !== <span class="variable language_">this</span>.<span class="property">parentOrigin</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&#x27;Received message from untrusted origin:&#x27;</span>, event.<span class="property">origin</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Received message from parent:&#x27;</span>, event.<span class="property">data</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 处理不同类型的消息</span></span><br><span class="line">            <span class="keyword">switch</span> (event.<span class="property">data</span>.<span class="property">type</span>) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;INIT&#x27;</span>:</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="title function_">handleInit</span>(event.<span class="property">data</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;CONFIG&#x27;</span>:</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="title function_">handleConfig</span>(event.<span class="property">data</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;DATA_RESPONSE&#x27;</span>:</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="title function_">handleDataResponse</span>(event.<span class="property">data</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="attr">default</span>:</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Unknown message type:&#x27;</span>, event.<span class="property">data</span>.<span class="property">type</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">handleInit</span>(<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;message&#x27;</span>).<span class="property">textContent</span> = data.<span class="property">data</span>.<span class="property">message</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">handleConfig</span>(<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="comment">// 应用配置</span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">className</span> = data.<span class="property">data</span>.<span class="property">theme</span>;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">lang</span> = data.<span class="property">data</span>.<span class="property">language</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">handleDataResponse</span>(<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="comment">// 显示数据</span></span><br><span class="line">        <span class="keyword">const</span> userList = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;userList&#x27;</span>);</span><br><span class="line">        userList.<span class="property">innerHTML</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        data.<span class="property">data</span>.<span class="property">users</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">user</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line">            li.<span class="property">textContent</span> = <span class="string">`<span class="subst">$&#123;user.id&#125;</span>: <span class="subst">$&#123;user.name&#125;</span>`</span>;</span><br><span class="line">            userList.<span class="title function_">appendChild</span>(li);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 请求数据</span></span><br><span class="line">    <span class="title function_">requestData</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">sendMessageToParent</span>(&#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;DATA_REQUEST&#x27;</span>,</span><br><span class="line">            <span class="attr">requestId</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 请求关闭窗口</span></span><br><span class="line">    <span class="title function_">requestClose</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">sendMessageToParent</span>(&#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;CLOSE_REQUEST&#x27;</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化子窗口通信</span></span><br><span class="line"><span class="keyword">const</span> childCommunicator = <span class="keyword">new</span> <span class="title class_">ChildWindowCommunicator</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绑定事件</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;requestData&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    childCommunicator.<span class="title function_">requestData</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;closeWindow&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    childCommunicator.<span class="title function_">requestClose</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="2-iframe跨域通信"><a href="#2-iframe跨域通信" class="headerlink" title="2. iframe跨域通信"></a>2. iframe跨域通信</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主页面代码</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IframeCommunicator</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">iframeId, targetOrigin</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">iframe</span> = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(iframeId);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">targetOrigin</span> = targetOrigin;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setupMessageListener</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送消息到iframe</span></span><br><span class="line">    <span class="title function_">sendMessageToIframe</span>(<span class="params">message</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">iframe</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">iframe</span>.<span class="property">contentWindow</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">iframe</span>.<span class="property">contentWindow</span>.<span class="title function_">postMessage</span>(message, <span class="variable language_">this</span>.<span class="property">targetOrigin</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听来自iframe的消息</span></span><br><span class="line">    <span class="title function_">setupMessageListener</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;message&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (event.<span class="property">origin</span> !== <span class="variable language_">this</span>.<span class="property">targetOrigin</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Received message from iframe:&#x27;</span>, event.<span class="property">data</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">switch</span> (event.<span class="property">data</span>.<span class="property">type</span>) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;IFRAME_LOADED&#x27;</span>:</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="title function_">handleIframeLoaded</span>();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;HEIGHT_CHANGE&#x27;</span>:</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="title function_">handleHeightChange</span>(event.<span class="property">data</span>.<span class="property">height</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;NAVIGATION&#x27;</span>:</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="title function_">handleNavigation</span>(event.<span class="property">data</span>.<span class="property">url</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">handleIframeLoaded</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Iframe loaded successfully&#x27;</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">sendMessageToIframe</span>(&#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;INIT_CONFIG&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>: &#123;</span><br><span class="line">                <span class="attr">theme</span>: <span class="string">&#x27;light&#x27;</span>,</span><br><span class="line">                <span class="attr">apiKey</span>: <span class="string">&#x27;your-api-key&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">handleHeightChange</span>(<span class="params">height</span>) &#123;</span><br><span class="line">        <span class="comment">// 动态调整iframe高度</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">iframe</span>.<span class="property">style</span>.<span class="property">height</span> = height + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">handleNavigation</span>(<span class="params">url</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Iframe navigated to:&#x27;</span>, url);</span><br><span class="line">        <span class="comment">// 可以在这里更新主页面的状态</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">const</span> iframeCommunicator = <span class="keyword">new</span> <span class="title class_">IframeCommunicator</span>(<span class="string">&#x27;myIframe&#x27;</span>, <span class="string">&#x27;https://iframe-domain.com&#x27;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- iframe页面代码 --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Iframe Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Iframe Content<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;changeHeight&quot;</span>&gt;</span>Change Height<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;navigate&quot;</span>&gt;</span>Navigate<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">class</span> <span class="title class_">IframeChild</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">parentOrigin</span> = <span class="string">&#x27;https://parent-domain.com&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="title function_">setupMessageListener</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="title function_">notifyLoaded</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">notifyLoaded</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="title function_">sendMessageToParent</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">type</span>: <span class="string">&#x27;IFRAME_LOADED&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">sendMessageToParent</span>(<span class="params">message</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">window</span>.<span class="property">parent</span>.<span class="title function_">postMessage</span>(message, <span class="variable language_">this</span>.<span class="property">parentOrigin</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">setupMessageListener</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;message&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (event.<span class="property">origin</span> !== <span class="variable language_">this</span>.<span class="property">parentOrigin</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">switch</span> (event.<span class="property">data</span>.<span class="property">type</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">case</span> <span class="string">&#x27;INIT_CONFIG&#x27;</span>:</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">this</span>.<span class="title function_">handleConfig</span>(event.<span class="property">data</span>.<span class="property">data</span>);</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">handleConfig</span>(<span class="params">config</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">className</span> = config.<span class="property">theme</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 使用API密钥等配置</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">changeHeight</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> newHeight = <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">300</span> + <span class="number">200</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;content&#x27;</span>).<span class="property">style</span>.<span class="property">height</span> = newHeight + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="title function_">sendMessageToParent</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">type</span>: <span class="string">&#x27;HEIGHT_CHANGE&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">height</span>: newHeight</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">navigate</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="title function_">sendMessageToParent</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">type</span>: <span class="string">&#x27;NAVIGATION&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">url</span>: <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span></span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> iframeChild = <span class="keyword">new</span> <span class="title class_">IframeChild</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;changeHeight&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        iframeChild.<span class="title function_">changeHeight</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;navigate&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        iframeChild.<span class="title function_">navigate</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="（二）WebSocket跨域通信"><a href="#（二）WebSocket跨域通信" class="headerlink" title="（二）WebSocket跨域通信"></a>（二）WebSocket跨域通信</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// WebSocket跨域通信示例</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CrossOriginWebSocket</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">url</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">url</span> = url;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">ws</span> = <span class="literal">null</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">reconnectAttempts</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">maxReconnectAttempts</span> = <span class="number">5</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">reconnectInterval</span> = <span class="number">1000</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">messageQueue</span> = [];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">connect</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">ws</span> = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="variable language_">this</span>.<span class="property">url</span>);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">setupEventHandlers</span>();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;WebSocket connection failed:&#x27;</span>, error);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">handleReconnect</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">setupEventHandlers</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">ws</span>.<span class="property">onopen</span> = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;WebSocket connected&#x27;</span>);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">reconnectAttempts</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 发送队列中的消息</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="variable language_">this</span>.<span class="property">messageQueue</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">const</span> message = <span class="variable language_">this</span>.<span class="property">messageQueue</span>.<span class="title function_">shift</span>();</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">ws</span>.<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(message));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">ws</span>.<span class="property">onmessage</span> = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">const</span> data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(event.<span class="property">data</span>);</span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">handleMessage</span>(data);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Failed to parse WebSocket message:&#x27;</span>, error);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">ws</span>.<span class="property">onclose</span> = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;WebSocket disconnected:&#x27;</span>, event.<span class="property">code</span>, event.<span class="property">reason</span>);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">handleReconnect</span>();</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">ws</span>.<span class="property">onerror</span> = <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;WebSocket error:&#x27;</span>, error);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">handleMessage</span>(<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (data.<span class="property">type</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;PING&#x27;</span>:</span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">send</span>(&#123; <span class="attr">type</span>: <span class="string">&#x27;PONG&#x27;</span> &#125;);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;DATA&#x27;</span>:</span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">onDataReceived</span>(data.<span class="property">payload</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;ERROR&#x27;</span>:</span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">onErrorReceived</span>(data.<span class="property">error</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="attr">default</span>:</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Unknown message type:&#x27;</span>, data.<span class="property">type</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">send</span>(<span class="params">message</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">ws</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">ws</span>.<span class="property">readyState</span> === <span class="title class_">WebSocket</span>.<span class="property">OPEN</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">ws</span>.<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(message));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 连接未就绪，加入队列</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">messageQueue</span>.<span class="title function_">push</span>(message);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">ws</span> || <span class="variable language_">this</span>.<span class="property">ws</span>.<span class="property">readyState</span> === <span class="title class_">WebSocket</span>.<span class="property">CLOSED</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">connect</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">handleReconnect</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">reconnectAttempts</span> &lt; <span class="variable language_">this</span>.<span class="property">maxReconnectAttempts</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">reconnectAttempts</span>++;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Attempting to reconnect (<span class="subst">$&#123;<span class="variable language_">this</span>.reconnectAttempts&#125;</span>/<span class="subst">$&#123;<span class="variable language_">this</span>.maxReconnectAttempts&#125;</span>)`</span>);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">connect</span>();</span><br><span class="line">            &#125;, <span class="variable language_">this</span>.<span class="property">reconnectInterval</span> * <span class="variable language_">this</span>.<span class="property">reconnectAttempts</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Max reconnection attempts reached&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">onDataReceived</span>(<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="comment">// 处理接收到的数据</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Received data:&#x27;</span>, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">onErrorReceived</span>(<span class="params">error</span>) &#123;</span><br><span class="line">        <span class="comment">// 处理错误</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Received error:&#x27;</span>, error);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">close</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">ws</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">ws</span>.<span class="title function_">close</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">const</span> wsClient = <span class="keyword">new</span> <span class="title class_">CrossOriginWebSocket</span>(<span class="string">&#x27;wss://api.external-service.com/ws&#x27;</span>);</span><br><span class="line">wsClient.<span class="title function_">connect</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送消息</span></span><br><span class="line">wsClient.<span class="title function_">send</span>(&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;SUBSCRIBE&#x27;</span>,</span><br><span class="line">    <span class="attr">channel</span>: <span class="string">&#x27;user-updates&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="七、跨域解决方案对比与选择"><a href="#七、跨域解决方案对比与选择" class="headerlink" title="七、跨域解决方案对比与选择"></a>七、跨域解决方案对比与选择</h1><h2 id="（一）解决方案对比表"><a href="#（一）解决方案对比表" class="headerlink" title="（一）解决方案对比表"></a>（一）解决方案对比表</h2><table>
<thead>
<tr>
<th>解决方案</th>
<th>适用场景</th>
<th>优点</th>
<th>缺点</th>
<th>浏览器支持</th>
</tr>
</thead>
<tbody><tr>
<td>CORS</td>
<td>现代Web应用</td>
<td>标准化、安全、功能完整</td>
<td>需要服务端支持</td>
<td>IE10+</td>
</tr>
<tr>
<td>JSONP</td>
<td>简单数据获取</td>
<td>兼容性好、实现简单</td>
<td>只支持GET、安全风险</td>
<td>所有浏览器</td>
</tr>
<tr>
<td>代理服务器</td>
<td>开发环境、生产环境</td>
<td>透明、无需客户端修改</td>
<td>增加服务器复杂度</td>
<td>不依赖浏览器</td>
</tr>
<tr>
<td>PostMessage</td>
<td>窗口间通信</td>
<td>安全、灵活</td>
<td>只适用于窗口通信</td>
<td>IE8+</td>
</tr>
<tr>
<td>WebSocket</td>
<td>实时通信</td>
<td>双向通信、实时性好</td>
<td>复杂度高</td>
<td>IE10+</td>
</tr>
</tbody></table>
<h2 id="（二）选择建议"><a href="#（二）选择建议" class="headerlink" title="（二）选择建议"></a>（二）选择建议</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 跨域解决方案选择器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CrossOriginSolutionSelector</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">scenarios</span> = &#123;</span><br><span class="line">            <span class="attr">modernWebApp</span>: &#123;</span><br><span class="line">                <span class="attr">solution</span>: <span class="string">&#x27;CORS&#x27;</span>,</span><br><span class="line">                <span class="attr">reason</span>: <span class="string">&#x27;标准化、安全、功能完整&#x27;</span>,</span><br><span class="line">                <span class="attr">implementation</span>: <span class="string">&#x27;server-side CORS headers&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">legacySupport</span>: &#123;</span><br><span class="line">                <span class="attr">solution</span>: <span class="string">&#x27;JSONP&#x27;</span>,</span><br><span class="line">                <span class="attr">reason</span>: <span class="string">&#x27;兼容老旧浏览器&#x27;</span>,</span><br><span class="line">                <span class="attr">implementation</span>: <span class="string">&#x27;callback-based requests&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">development</span>: &#123;</span><br><span class="line">                <span class="attr">solution</span>: <span class="string">&#x27;Proxy&#x27;</span>,</span><br><span class="line">                <span class="attr">reason</span>: <span class="string">&#x27;开发环境透明代理&#x27;</span>,</span><br><span class="line">                <span class="attr">implementation</span>: <span class="string">&#x27;webpack-dev-server proxy&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">production</span>: &#123;</span><br><span class="line">                <span class="attr">solution</span>: <span class="string">&#x27;Nginx Proxy&#x27;</span>,</span><br><span class="line">                <span class="attr">reason</span>: <span class="string">&#x27;生产环境反向代理&#x27;</span>,</span><br><span class="line">                <span class="attr">implementation</span>: <span class="string">&#x27;nginx reverse proxy&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">windowCommunication</span>: &#123;</span><br><span class="line">                <span class="attr">solution</span>: <span class="string">&#x27;PostMessage&#x27;</span>,</span><br><span class="line">                <span class="attr">reason</span>: <span class="string">&#x27;窗口间安全通信&#x27;</span>,</span><br><span class="line">                <span class="attr">implementation</span>: <span class="string">&#x27;window.postMessage API&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">realTimeData</span>: &#123;</span><br><span class="line">                <span class="attr">solution</span>: <span class="string">&#x27;WebSocket&#x27;</span>,</span><br><span class="line">                <span class="attr">reason</span>: <span class="string">&#x27;实时双向通信&#x27;</span>,</span><br><span class="line">                <span class="attr">implementation</span>: <span class="string">&#x27;WebSocket connection&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">recommend</span>(<span class="params">requirements</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;</span><br><span class="line">            browserSupport,</span><br><span class="line">            requestTypes,</span><br><span class="line">            realTime,</span><br><span class="line">            security,</span><br><span class="line">            serverControl</span><br><span class="line">        &#125; = requirements;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 实时通信需求</span></span><br><span class="line">        <span class="keyword">if</span> (realTime) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">scenarios</span>.<span class="property">realTimeData</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 窗口间通信</span></span><br><span class="line">        <span class="keyword">if</span> (requirements.<span class="property">windowCommunication</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">scenarios</span>.<span class="property">windowCommunication</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 无服务端控制权</span></span><br><span class="line">        <span class="keyword">if</span> (!serverControl) &#123;</span><br><span class="line">            <span class="keyword">if</span> (browserSupport === <span class="string">&#x27;legacy&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">scenarios</span>.<span class="property">legacySupport</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">scenarios</span>.<span class="property">development</span>; <span class="comment">// 使用代理</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 有服务端控制权</span></span><br><span class="line">        <span class="keyword">if</span> (serverControl) &#123;</span><br><span class="line">            <span class="keyword">if</span> (security === <span class="string">&#x27;high&#x27;</span> &amp;&amp; browserSupport === <span class="string">&#x27;modern&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">scenarios</span>.<span class="property">modernWebApp</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (browserSupport === <span class="string">&#x27;legacy&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">scenarios</span>.<span class="property">legacySupport</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">scenarios</span>.<span class="property">modernWebApp</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 默认推荐CORS</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">scenarios</span>.<span class="property">modernWebApp</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成实现建议</span></span><br><span class="line">    <span class="title function_">generateImplementationGuide</span>(<span class="params">solution</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> guides = &#123;</span><br><span class="line">            <span class="string">&#x27;CORS&#x27;</span>: <span class="string">`</span></span><br><span class="line"><span class="string">                1. 服务端设置CORS头：</span></span><br><span class="line"><span class="string">                   Access-Control-Allow-Origin: https://your-domain.com</span></span><br><span class="line"><span class="string">                   Access-Control-Allow-Methods: GET, POST, PUT, DELETE</span></span><br><span class="line"><span class="string">                   Access-Control-Allow-Headers: Content-Type, Authorization</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                2. 客户端正常发送请求：</span></span><br><span class="line"><span class="string">                   fetch(&#x27;https://api.example.com/data&#x27;)</span></span><br><span class="line"><span class="string">            `</span>,</span><br><span class="line">            <span class="string">&#x27;JSONP&#x27;</span>: <span class="string">`</span></span><br><span class="line"><span class="string">                1. 服务端支持callback参数：</span></span><br><span class="line"><span class="string">                   app.get(&#x27;/api/data&#x27;, (req, res) =&gt; &#123;</span></span><br><span class="line"><span class="string">                       const data = &#123; message: &#x27;Hello&#x27; &#125;;</span></span><br><span class="line"><span class="string">                       res.send(\`\$&#123;req.query.callback&#125;(\$&#123;JSON.stringify(data)&#125;);\`);</span></span><br><span class="line"><span class="string">                   &#125;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                2. 客户端使用JSONP：</span></span><br><span class="line"><span class="string">                   jsonp(&#x27;https://api.example.com/data&#x27;, callback);</span></span><br><span class="line"><span class="string">            `</span>,</span><br><span class="line">            <span class="string">&#x27;Proxy&#x27;</span>: <span class="string">`</span></span><br><span class="line"><span class="string">                1. 开发环境配置代理：</span></span><br><span class="line"><span class="string">                   // webpack.config.js</span></span><br><span class="line"><span class="string">                   devServer: &#123;</span></span><br><span class="line"><span class="string">                       proxy: &#123;</span></span><br><span class="line"><span class="string">                           &#x27;/api&#x27;: &#x27;https://api.example.com&#x27;</span></span><br><span class="line"><span class="string">                       &#125;</span></span><br><span class="line"><span class="string">                   &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                2. 生产环境使用Nginx：</span></span><br><span class="line"><span class="string">                   location /api/ &#123;</span></span><br><span class="line"><span class="string">                       proxy_pass https://api.example.com/;</span></span><br><span class="line"><span class="string">                   &#125;</span></span><br><span class="line"><span class="string">            `</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> guides[solution] || <span class="string">&#x27;请参考相应文档&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">const</span> selector = <span class="keyword">new</span> <span class="title class_">CrossOriginSolutionSelector</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> recommendation = selector.<span class="title function_">recommend</span>(&#123;</span><br><span class="line">    <span class="attr">browserSupport</span>: <span class="string">&#x27;modern&#x27;</span>,</span><br><span class="line">    <span class="attr">requestTypes</span>: [<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>],</span><br><span class="line">    <span class="attr">realTime</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">security</span>: <span class="string">&#x27;high&#x27;</span>,</span><br><span class="line">    <span class="attr">serverControl</span>: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;推荐方案:&#x27;</span>, recommendation);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;实现指南:&#x27;</span>, selector.<span class="title function_">generateImplementationGuide</span>(recommendation.<span class="property">solution</span>));</span><br></pre></td></tr></table></figure>

<h1 id="八、最佳实践与安全考虑"><a href="#八、最佳实践与安全考虑" class="headerlink" title="八、最佳实践与安全考虑"></a>八、最佳实践与安全考虑</h1><h2 id="（一）CORS安全最佳实践"><a href="#（一）CORS安全最佳实践" class="headerlink" title="（一）CORS安全最佳实践"></a>（一）CORS安全最佳实践</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CORS安全配置示例</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SecureCORSConfig</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">allowedOrigins</span> = [</span><br><span class="line">            <span class="string">&#x27;https://trusted-domain.com&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;https://admin.trusted-domain.com&#x27;</span></span><br><span class="line">        ];</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">allowedMethods</span> = [<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;PUT&#x27;</span>, <span class="string">&#x27;DELETE&#x27;</span>];</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">allowedHeaders</span> = [<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;Authorization&#x27;</span>, <span class="string">&#x27;X-Requested-With&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 验证Origin</span></span><br><span class="line">    <span class="title function_">validateOrigin</span>(<span class="params">origin</span>) &#123;</span><br><span class="line">        <span class="comment">// 生产环境严格验证</span></span><br><span class="line">        <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">allowedOrigins</span>.<span class="title function_">includes</span>(origin);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开发环境允许localhost</span></span><br><span class="line">        <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;development&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> localhostPattern = <span class="regexp">/^https?:\/\/localhost(:\d+)?$/</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">allowedOrigins</span>.<span class="title function_">includes</span>(origin) || localhostPattern.<span class="title function_">test</span>(origin);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成CORS中间件</span></span><br><span class="line">    <span class="title function_">createCORSMiddleware</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> origin = req.<span class="property">headers</span>.<span class="property">origin</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 验证Origin</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">validateOrigin</span>(origin)) &#123;</span><br><span class="line">                res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, origin);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置其他CORS头</span></span><br><span class="line">            res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="variable language_">this</span>.<span class="property">allowedMethods</span>.<span class="title function_">join</span>(<span class="string">&#x27;, &#x27;</span>));</span><br><span class="line">            res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="variable language_">this</span>.<span class="property">allowedHeaders</span>.<span class="title function_">join</span>(<span class="string">&#x27;, &#x27;</span>));</span><br><span class="line">            res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Credentials&#x27;</span>, <span class="string">&#x27;true&#x27;</span>);</span><br><span class="line">            res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Max-Age&#x27;</span>, <span class="string">&#x27;86400&#x27;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 处理预检请求</span></span><br><span class="line">            <span class="keyword">if</span> (req.<span class="property">method</span> === <span class="string">&#x27;OPTIONS&#x27;</span>) &#123;</span><br><span class="line">                res.<span class="title function_">status</span>(<span class="number">204</span>).<span class="title function_">end</span>();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="title function_">next</span>();</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 动态Origin验证</span></span><br><span class="line">    <span class="title function_">createDynamicOriginValidator</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function">(<span class="params">origin, callback</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 从数据库或配置文件获取允许的域名</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">getAllowedOriginsFromDB</span>()</span><br><span class="line">                .<span class="title function_">then</span>(<span class="function"><span class="params">allowedOrigins</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (allowedOrigins.<span class="title function_">includes</span>(origin)) &#123;</span><br><span class="line">                        <span class="title function_">callback</span>(<span class="literal">null</span>, <span class="literal">true</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="title function_">callback</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Not allowed by CORS&#x27;</span>));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="title function_">callback</span>(error);</span><br><span class="line">                &#125;);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">getAllowedOriginsFromDB</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 模拟从数据库获取允许的域名</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="title function_">resolve</span>([</span><br><span class="line">                    <span class="string">&#x27;https://trusted-domain.com&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;https://partner-domain.com&#x27;</span></span><br><span class="line">                ]);</span><br><span class="line">            &#125;, <span class="number">100</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="（二）跨域请求监控与日志"><a href="#（二）跨域请求监控与日志" class="headerlink" title="（二）跨域请求监控与日志"></a>（二）跨域请求监控与日志</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 跨域请求监控</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CrossOriginMonitor</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">requestLog</span> = [];</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">suspiciousRequests</span> = [];</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">rateLimiter</span> = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 记录跨域请求</span></span><br><span class="line">    <span class="title function_">logCrossOriginRequest</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> origin = req.<span class="property">headers</span>.<span class="property">origin</span>;</span><br><span class="line">        <span class="keyword">const</span> userAgent = req.<span class="property">headers</span>[<span class="string">&#x27;user-agent&#x27;</span>];</span><br><span class="line">        <span class="keyword">const</span> ip = req.<span class="property">ip</span> || req.<span class="property">connection</span>.<span class="property">remoteAddress</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> logEntry = &#123;</span><br><span class="line">            <span class="attr">timestamp</span>: <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toISOString</span>(),</span><br><span class="line">            origin,</span><br><span class="line">            <span class="attr">method</span>: req.<span class="property">method</span>,</span><br><span class="line">            <span class="attr">url</span>: req.<span class="property">url</span>,</span><br><span class="line">            userAgent,</span><br><span class="line">            ip,</span><br><span class="line">            <span class="attr">headers</span>: req.<span class="property">headers</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">requestLog</span>.<span class="title function_">push</span>(logEntry);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检测可疑请求</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">detectSuspiciousActivity</span>(logEntry);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 速率限制</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">checkRateLimit</span>(ip, origin)) &#123;</span><br><span class="line">            res.<span class="title function_">status</span>(<span class="number">429</span>).<span class="title function_">json</span>(&#123; <span class="attr">error</span>: <span class="string">&#x27;Too many requests&#x27;</span> &#125;);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title function_">next</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检测可疑活动</span></span><br><span class="line">    <span class="title function_">detectSuspiciousActivity</span>(<span class="params">logEntry</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; origin, ip, userAgent &#125; = logEntry;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检测未知Origin</span></span><br><span class="line">        <span class="keyword">if</span> (origin &amp;&amp; !<span class="variable language_">this</span>.<span class="title function_">isKnownOrigin</span>(origin)) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">suspiciousRequests</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">                ...logEntry,</span><br><span class="line">                <span class="attr">reason</span>: <span class="string">&#x27;Unknown origin&#x27;</span>,</span><br><span class="line">                <span class="attr">severity</span>: <span class="string">&#x27;medium&#x27;</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检测异常User-Agent</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isAbnormalUserAgent</span>(userAgent)) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">suspiciousRequests</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">                ...logEntry,</span><br><span class="line">                <span class="attr">reason</span>: <span class="string">&#x27;Abnormal user agent&#x27;</span>,</span><br><span class="line">                <span class="attr">severity</span>: <span class="string">&#x27;low&#x27;</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检测频繁请求</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isHighFrequencyRequest</span>(ip)) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">suspiciousRequests</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">                ...logEntry,</span><br><span class="line">                <span class="attr">reason</span>: <span class="string">&#x27;High frequency requests&#x27;</span>,</span><br><span class="line">                <span class="attr">severity</span>: <span class="string">&#x27;high&#x27;</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">isKnownOrigin</span>(<span class="params">origin</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> knownOrigins = [</span><br><span class="line">            <span class="string">&#x27;https://trusted-domain.com&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;https://partner-domain.com&#x27;</span>,</span><br><span class="line">            <span class="regexp">/^https:\/\/.*\.trusted-domain\.com$/</span></span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> knownOrigins.<span class="title function_">some</span>(<span class="function"><span class="params">known</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> known === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> known === origin;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (known <span class="keyword">instanceof</span> <span class="title class_">RegExp</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> known.<span class="title function_">test</span>(origin);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">isAbnormalUserAgent</span>(<span class="params">userAgent</span>) &#123;</span><br><span class="line">        <span class="comment">// 检测爬虫或自动化工具</span></span><br><span class="line">        <span class="keyword">const</span> suspiciousPatterns = [</span><br><span class="line">            <span class="regexp">/bot/i</span>,</span><br><span class="line">            <span class="regexp">/crawler/i</span>,</span><br><span class="line">            <span class="regexp">/spider/i</span>,</span><br><span class="line">            <span class="regexp">/curl/i</span>,</span><br><span class="line">            <span class="regexp">/wget/i</span></span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> suspiciousPatterns.<span class="title function_">some</span>(<span class="function"><span class="params">pattern</span> =&gt;</span> pattern.<span class="title function_">test</span>(userAgent));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">checkRateLimit</span>(<span class="params">ip, origin</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> key = <span class="string">`<span class="subst">$&#123;ip&#125;</span>:<span class="subst">$&#123;origin&#125;</span>`</span>;</span><br><span class="line">        <span class="keyword">const</span> now = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">        <span class="keyword">const</span> windowMs = <span class="number">60000</span>; <span class="comment">// 1分钟</span></span><br><span class="line">        <span class="keyword">const</span> maxRequests = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">rateLimiter</span>.<span class="title function_">has</span>(key)) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">rateLimiter</span>.<span class="title function_">set</span>(key, &#123; <span class="attr">count</span>: <span class="number">1</span>, <span class="attr">resetTime</span>: now + windowMs &#125;);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> limiter = <span class="variable language_">this</span>.<span class="property">rateLimiter</span>.<span class="title function_">get</span>(key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (now &gt; limiter.<span class="property">resetTime</span>) &#123;</span><br><span class="line">            limiter.<span class="property">count</span> = <span class="number">1</span>;</span><br><span class="line">            limiter.<span class="property">resetTime</span> = now + windowMs;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        limiter.<span class="property">count</span>++;</span><br><span class="line">        <span class="keyword">return</span> limiter.<span class="property">count</span> &gt; maxRequests;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">isHighFrequencyRequest</span>(<span class="params">ip</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> recentRequests = <span class="variable language_">this</span>.<span class="property">requestLog</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">log</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> timeDiff = <span class="title class_">Date</span>.<span class="title function_">now</span>() - <span class="keyword">new</span> <span class="title class_">Date</span>(log.<span class="property">timestamp</span>).<span class="title function_">getTime</span>();</span><br><span class="line">            <span class="keyword">return</span> log.<span class="property">ip</span> === ip &amp;&amp; timeDiff &lt; <span class="number">60000</span>; <span class="comment">// 最近1分钟</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> recentRequests.<span class="property">length</span> &gt; <span class="number">50</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成安全报告</span></span><br><span class="line">    <span class="title function_">generateSecurityReport</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="keyword">const</span> last24Hours = <span class="keyword">new</span> <span class="title class_">Date</span>(now.<span class="title function_">getTime</span>() - <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> recentRequests = <span class="variable language_">this</span>.<span class="property">requestLog</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">log</span> =&gt;</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Date</span>(log.<span class="property">timestamp</span>) &gt; last24Hours</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> recentSuspicious = <span class="variable language_">this</span>.<span class="property">suspiciousRequests</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">log</span> =&gt;</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Date</span>(log.<span class="property">timestamp</span>) &gt; last24Hours</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">period</span>: <span class="string">&#x27;24 hours&#x27;</span>,</span><br><span class="line">            <span class="attr">totalRequests</span>: recentRequests.<span class="property">length</span>,</span><br><span class="line">            <span class="attr">suspiciousRequests</span>: recentSuspicious.<span class="property">length</span>,</span><br><span class="line">            <span class="attr">topOrigins</span>: <span class="variable language_">this</span>.<span class="title function_">getTopOrigins</span>(recentRequests),</span><br><span class="line">            <span class="attr">suspiciousActivities</span>: recentSuspicious,</span><br><span class="line">            <span class="attr">recommendations</span>: <span class="variable language_">this</span>.<span class="title function_">generateRecommendations</span>(recentSuspicious)</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">getTopOrigins</span>(<span class="params">requests</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> originCounts = &#123;&#125;;</span><br><span class="line">        requests.<span class="title function_">forEach</span>(<span class="function"><span class="params">req</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (req.<span class="property">origin</span>) &#123;</span><br><span class="line">                originCounts[req.<span class="property">origin</span>] = (originCounts[req.<span class="property">origin</span>] || <span class="number">0</span>) + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">entries</span>(originCounts)</span><br><span class="line">            .<span class="title function_">sort</span>(<span class="function">(<span class="params">[,a], [,b]</span>) =&gt;</span> b - a)</span><br><span class="line">            .<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line">            .<span class="title function_">map</span>(<span class="function">(<span class="params">[origin, count]</span>) =&gt;</span> (&#123; origin, count &#125;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">generateRecommendations</span>(<span class="params">suspiciousRequests</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> recommendations = [];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> unknownOrigins = suspiciousRequests.<span class="title function_">filter</span>(<span class="function"><span class="params">req</span> =&gt;</span></span><br><span class="line">            req.<span class="property">reason</span> === <span class="string">&#x27;Unknown origin&#x27;</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (unknownOrigins.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            recommendations.<span class="title function_">push</span>(&#123;</span><br><span class="line">                <span class="attr">type</span>: <span class="string">&#x27;security&#x27;</span>,</span><br><span class="line">                <span class="attr">message</span>: <span class="string">`发现 <span class="subst">$&#123;unknownOrigins.length&#125;</span> 个未知来源的请求，建议审查Origin白名单`</span>,</span><br><span class="line">                <span class="attr">priority</span>: <span class="string">&#x27;medium&#x27;</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> highFrequencyRequests = suspiciousRequests.<span class="title function_">filter</span>(<span class="function"><span class="params">req</span> =&gt;</span></span><br><span class="line">            req.<span class="property">reason</span> === <span class="string">&#x27;High frequency requests&#x27;</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (highFrequencyRequests.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            recommendations.<span class="title function_">push</span>(&#123;</span><br><span class="line">                <span class="attr">type</span>: <span class="string">&#x27;performance&#x27;</span>,</span><br><span class="line">                <span class="attr">message</span>: <span class="string">`发现 <span class="subst">$&#123;highFrequencyRequests.length&#125;</span> 个高频请求，建议加强速率限制`</span>,</span><br><span class="line">                <span class="attr">priority</span>: <span class="string">&#x27;high&#x27;</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> recommendations;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">const</span> monitor = <span class="keyword">new</span> <span class="title class_">CrossOriginMonitor</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在Express中使用</span></span><br><span class="line">app.<span class="title function_">use</span>(monitor.<span class="property">logCrossOriginRequest</span>.<span class="title function_">bind</span>(monitor));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定期生成报告</span></span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> report = monitor.<span class="title function_">generateSecurityReport</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Security Report:&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(report, <span class="literal">null</span>, <span class="number">2</span>));</span><br><span class="line">&#125;, <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>); <span class="comment">// 每24小时</span></span><br></pre></td></tr></table></figure>

<h1 id="九、总结"><a href="#九、总结" class="headerlink" title="九、总结"></a>九、总结</h1><h2 id="（一）核心要点回顾"><a href="#（一）核心要点回顾" class="headerlink" title="（一）核心要点回顾"></a>（一）核心要点回顾</h2><ol>
<li><strong>同源策略是浏览器的重要安全机制</strong>，限制不同源之间的资源访问</li>
<li><strong>CORS是现代Web应用的标准跨域解决方案</strong>，提供了安全、灵活的跨域访问控制</li>
<li><strong>JSONP适用于简单的跨域数据获取</strong>，但存在安全风险和功能限制</li>
<li><strong>代理服务器是开发和生产环境的通用解决方案</strong>，对客户端透明</li>
<li><strong>PostMessage和WebSocket适用于特定的通信场景</strong></li>
</ol>
<h2 id="（二）选择建议-1"><a href="#（二）选择建议-1" class="headerlink" title="（二）选择建议"></a>（二）选择建议</h2><ul>
<li><strong>现代Web应用</strong>：优先选择CORS，配合适当的安全措施</li>
<li><strong>遗留系统支持</strong>：考虑JSONP，但要注意安全风险</li>
<li><strong>开发环境</strong>：使用构建工具的代理功能</li>
<li><strong>生产环境</strong>：使用Nginx等反向代理服务器</li>
<li><strong>实时通信</strong>：选择WebSocket或Server-Sent Events</li>
</ul>
<h2 id="（三）安全注意事项"><a href="#（三）安全注意事项" class="headerlink" title="（三）安全注意事项"></a>（三）安全注意事项</h2><ol>
<li><strong>严格验证Origin</strong>：不要使用通配符<code>*</code>在生产环境中</li>
<li><strong>最小权限原则</strong>：只允许必要的方法和头部</li>
<li><strong>监控和日志</strong>：记录跨域请求，及时发现异常</li>
<li><strong>定期审查</strong>：定期检查和更新跨域配置</li>
</ol>
<p>跨域问题虽然复杂，但通过理解其本质和掌握各种解决方案，我们可以在保证安全的前提下实现灵活的跨域访问。选择合适的解决方案，并遵循安全最佳实践，是构建现代Web应用的重要技能。</p>
<h1 id="十、参考资料"><a href="#十、参考资料" class="headerlink" title="十、参考资料"></a>十、参考资料</h1><h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy">MDN - 同源策略</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS">MDN - CORS</a></li>
<li><a href="https://www.w3.org/TR/cors/">W3C CORS规范</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage">MDN - PostMessage API</a></li>
</ul>
<h2 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h2><ul>
<li><a href="./%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91JavaScript%E4%B8%AD%E7%9A%84%E6%A0%B8%E5%BF%83%EF%BC%9A%E7%90%86%E8%A7%A3%E5%92%8C%E4%BD%BF%E7%94%A8Document%E5%AF%B9%E8%B1%A1.md">【前端】JavaScript中的核心：理解和使用Document对象</a></li>
<li><a href="./%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E6%A0%88%E6%A6%82%E8%A7%88.md">【前端】前端开发技术栈概览</a></li>
<li><a href="../%E5%AD%A6%E4%B9%A0/%E3%80%90%E5%AD%A6%E4%B9%A0%E3%80%91%E7%BD%91%E7%BB%9C%E4%BB%A3%E7%90%86%E8%AF%A6%E8%A7%A3%E4%B8%8E%E5%BA%94%E7%94%A8%E5%AE%9E%E8%B7%B5.md">【学习】网络代理详解与应用实践</a></li>
<li><a href="./%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91JavaScript%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E4%B8%8E%E8%BD%AE%E8%AF%A2%E6%9C%BA%E5%88%B6%E8%AF%A6%E8%A7%A3.md">【前端】JavaScript定时任务与轮询机制详解</a></li>
</ul>
<h2 id="技术资源"><a href="#技术资源" class="headerlink" title="技术资源"></a>技术资源</h2><ul>
<li><a href="https://cors-test.codehappy.dev/">CORS测试工具</a></li>
<li><a href="https://httpstatuses.com/">HTTP状态码参考</a></li>
<li><a href="https://caniuse.com/cors">浏览器兼容性查询</a></li>
<li><a href="https://enable-cors.org/server_nginx.html">Nginx CORS配置生成器</a></li>
</ul>
<h2 id="学习资源"><a href="#学习资源" class="headerlink" title="学习资源"></a>学习资源</h2><ul>
<li><a href="http://www.ruanyifeng.com/blog/2016/04/cors.html">阮一峰 - 跨域资源共享 CORS 详解</a></li>
<li><a href="https://book.douban.com/subject/10546125/">JavaScript高级程序设计</a></li>
<li><a href="https://book.douban.com/subject/10746113/">HTTP权威指南</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[深入解析跨域问题的本质、同源策略的作用机制，以及CORS、JSONP、代理服务器等多种跨域解决方案的原理与实践应用]]>
    
    </summary>
    
      <category term="前端" scheme="https://uwakeme.tech/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="https://uwakeme.tech/tags/JavaScript/"/>
    
      <category term="跨域" scheme="https://uwakeme.tech/tags/%E8%B7%A8%E5%9F%9F/"/>
    
      <category term="CORS" scheme="https://uwakeme.tech/tags/CORS/"/>
    
      <category term="同源策略" scheme="https://uwakeme.tech/tags/%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5/"/>
    
      <category term="网络安全" scheme="https://uwakeme.tech/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
      <category term="JSONP" scheme="https://uwakeme.tech/tags/JSONP/"/>
    
      <category term="代理服务器" scheme="https://uwakeme.tech/tags/%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="前端" scheme="https://uwakeme.tech/categories/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[【BUG】nvm无法安装低版本Node.js：The system cannot find the file specified解决方案]]></title>
    <link href="https://uwakeme.tech/2025/07/25/BUG/%E3%80%90BUG%E3%80%91nvm%E6%97%A0%E6%B3%95%E5%AE%89%E8%A3%85%E4%BD%8E%E7%89%88%E6%9C%ACNode.js%EF%BC%9AThe%20system%20cannot%20find%20the%20file%20specified%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>https://uwakeme.tech/2025/07/25/BUG/【BUG】nvm无法安装低版本Node.js：The system cannot find the file specified解决方案/</id>
    <published>2025-07-24T16:00:00.000Z</published>
    <updated>2025-07-31T06:02:12.802Z</updated>
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在使用nvm管理Node.js版本时，很多开发者会遇到一个常见问题：当尝试安装较低版本的Node.js（如Node.js 12.x、14.x等）时，会出现”The system cannot find the file specified”错误。这个问题在Windows系统上尤为常见，本文将详细分析问题原因并提供多种解决方案。</p>
<h1 id="一、问题现象"><a href="#一、问题现象" class="headerlink" title="一、问题现象"></a>一、问题现象</h1><h2 id="（一）错误描述"><a href="#（一）错误描述" class="headerlink" title="（一）错误描述"></a>（一）错误描述</h2><p>当使用nvm安装低版本Node.js时，会出现以下错误信息：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\wake\Desktop&gt; nvm install 12.22.12</span><br><span class="line">Downloading node.js version 12.22.12 (64-bit)...</span><br><span class="line">Complete</span><br><span class="line">Downloading npm...</span><br><span class="line">Creating C:\Users\wake\AppData\Local\Temp\nvm-install-3831866538\temp</span><br><span class="line"></span><br><span class="line">Downloading npm version 6.14.16... Complete</span><br><span class="line">Installing npm v6.14.16...</span><br><span class="line">error installing 12.22.12: open C:\Users\wake\AppData\Local\Temp\nvm-npm-329d497460\npm-v6.14.16.zip: The system cannot find the file specified.</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/uwakeme/personal-image-repository/images/nvmbug20250725-01.png" alt="错误截图"></p>
<h2 id="（二）解决后的效果"><a href="#（二）解决后的效果" class="headerlink" title="（二）解决后的效果"></a>（二）解决后的效果</h2><p>按照本文提供的解决方案（降级nvm版本）后，同样的安装命令可以成功执行：</p>
<p><img src="/2025/07/25/BUG/%E3%80%90BUG%E3%80%91nvm%E6%97%A0%E6%B3%95%E5%AE%89%E8%A3%85%E4%BD%8E%E7%89%88%E6%9C%ACNode/post/BUG/nvmbug3.png" alt="成功安装对比"></p>
<h2 id="（三）问题特征"><a href="#（三）问题特征" class="headerlink" title="（三）问题特征"></a>（三）问题特征</h2><ol>
<li><strong>版本特异性</strong>：主要影响Node.js 12.x、13.x、14.x等较低版本</li>
<li><strong>系统特异性</strong>：主要在Windows系统上出现</li>
<li><strong>npm相关</strong>：错误通常发生在下载或安装npm阶段</li>
<li><strong>临时文件问题</strong>：错误信息指向临时文件路径</li>
</ol>
<h1 id="二、问题原因分析"><a href="#二、问题原因分析" class="headerlink" title="二、问题原因分析"></a>二、问题原因分析</h1><h2 id="（一）根本原因"><a href="#（一）根本原因" class="headerlink" title="（一）根本原因"></a>（一）根本原因</h2><p>这个问题的根本原因是<strong>nvm版本与Node.js版本的兼容性问题</strong>：</p>
<ol>
<li><strong>nvm版本过高</strong>：较新版本的nvm-windows（如1.2.2）与老版本Node.js的npm下载机制不兼容</li>
<li><strong>下载链接变更</strong>：npm的下载链接在不同时期有所变化，新版nvm可能无法正确处理老版本的下载链接</li>
<li><strong>临时文件处理</strong>：新版nvm在处理临时文件时的逻辑与老版本Node.js不匹配</li>
</ol>
<h2 id="（二）技术细节"><a href="#（二）技术细节" class="headerlink" title="（二）技术细节"></a>（二）技术细节</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 问题发生的技术流程</span></span><br><span class="line">1. nvm下载Node.js二进制文件 ✓ (成功)</span><br><span class="line">2. nvm尝试下载对应的npm版本 ✓ (成功)</span><br><span class="line">3. nvm尝试解压npm文件到临时目录 ✗ (失败)</span><br><span class="line">4. 系统报告找不到指定文件</span><br></pre></td></tr></table></figure>

<h1 id="三、解决方案"><a href="#三、解决方案" class="headerlink" title="三、解决方案"></a>三、解决方案</h1><h2 id="（一）方案一：降级nvm版本（推荐）"><a href="#（一）方案一：降级nvm版本（推荐）" class="headerlink" title="（一）方案一：降级nvm版本（推荐）"></a>（一）方案一：降级nvm版本（推荐）</h2><h3 id="1-卸载当前nvm"><a href="#1-卸载当前nvm" class="headerlink" title="1. 卸载当前nvm"></a>1. 卸载当前nvm</h3><h4 id="第一步：通过控制面板卸载nvm-windows"><a href="#第一步：通过控制面板卸载nvm-windows" class="headerlink" title="第一步：通过控制面板卸载nvm-windows"></a>第一步：通过控制面板卸载nvm-windows</h4><ol>
<li>打开<strong>控制面板</strong> → <strong>程序和功能</strong></li>
<li>找到<strong>NVM for Windows</strong></li>
<li>点击<strong>卸载</strong>并确认</li>
</ol>
<h4 id="第二步：删除环境变量中的NVM相关配置"><a href="#第二步：删除环境变量中的NVM相关配置" class="headerlink" title="第二步：删除环境变量中的NVM相关配置"></a>第二步：删除环境变量中的NVM相关配置</h4><ol>
<li>右键<strong>此电脑</strong> → <strong>属性</strong> → <strong>高级系统设置</strong></li>
<li>点击<strong>环境变量</strong>按钮</li>
<li>在系统变量中删除以下变量（如果存在）：<ul>
<li><code>NVM_HOME</code></li>
<li><code>NVM_SYMLINK</code></li>
</ul>
</li>
<li>在PATH变量中删除nvm相关的路径</li>
</ol>
<h4 id="第三步：删除nvm安装目录"><a href="#第三步：删除nvm安装目录" class="headerlink" title="第三步：删除nvm安装目录"></a>第三步：删除nvm安装目录</h4><ol>
<li>删除nvm安装目录（通常在<code>C:\Users\&#123;用户名&#125;\AppData\Roaming\nvm</code>）</li>
<li>删除Node.js符号链接目录（通常在<code>C:\Program Files\nodejs</code>）</li>
</ol>
<h3 id="2-安装兼容版本nvm"><a href="#2-安装兼容版本nvm" class="headerlink" title="2. 安装兼容版本nvm"></a>2. 安装兼容版本nvm</h3><h4 id="第一步：下载nvm-windows-1-1-12版本"><a href="#第一步：下载nvm-windows-1-1-12版本" class="headerlink" title="第一步：下载nvm-windows 1.1.12版本"></a>第一步：下载nvm-windows 1.1.12版本</h4><ol>
<li>访问GitHub发布页面：<a href="https://github.com/coreybutler/nvm-windows/releases/tag/1.1.12">https://github.com/coreybutler/nvm-windows/releases/tag/1.1.12</a></li>
<li>下载<strong>nvm-setup.zip</strong>文件</li>
<li>解压下载的压缩包</li>
</ol>
<h4 id="第二步：安装nvm-1-1-12"><a href="#第二步：安装nvm-1-1-12" class="headerlink" title="第二步：安装nvm 1.1.12"></a>第二步：安装nvm 1.1.12</h4><ol>
<li><strong>以管理员身份</strong>运行<code>nvm-setup.exe</code></li>
<li>选择安装路径（建议使用默认路径）</li>
<li>选择Node.js符号链接路径</li>
<li>完成安装向导</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/uwakeme/personal-image-repository/images/nvmbug20250725-02.png" alt="解决方案截图"></p>
<h3 id="3-验证安装"><a href="#3-验证安装" class="headerlink" title="3. 验证安装"></a>3. 验证安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查nvm版本</span></span><br><span class="line">nvm version</span><br><span class="line"><span class="comment"># 应该显示：1.1.12</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新安装Node.js 12</span></span><br><span class="line">nvm install 12.22.12</span><br><span class="line">nvm use 12.22.12</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证安装结果</span></span><br><span class="line">node --version</span><br><span class="line">npm --version</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/uwakeme/personal-image-repository/images/nvmbug20250725-03.png" alt="成功安装截图"></p>
<p>如上图所示，降级nvm版本后，Node.js 12.22.12安装成功，没有再出现”The system cannot find the file specified”错误。</p>
<h2 id="（二）方案二：手动安装npm"><a href="#（二）方案二：手动安装npm" class="headerlink" title="（二）方案二：手动安装npm"></a>（二）方案二：手动安装npm</h2><h3 id="1-先安装Node-js（忽略npm错误）"><a href="#1-先安装Node-js（忽略npm错误）" class="headerlink" title="1. 先安装Node.js（忽略npm错误）"></a>1. 先安装Node.js（忽略npm错误）</h3><h4 id="执行安装命令："><a href="#执行安装命令：" class="headerlink" title="执行安装命令："></a>执行安装命令：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 强制安装Node.js（即使npm安装失败）</span></span><br><span class="line">nvm install 12.22.12</span><br><span class="line">nvm use 12.22.12</span><br></pre></td></tr></table></figure>

<h3 id="2-手动下载并安装npm"><a href="#2-手动下载并安装npm" class="headerlink" title="2. 手动下载并安装npm"></a>2. 手动下载并安装npm</h3><h4 id="第一步：下载对应版本的npm"><a href="#第一步：下载对应版本的npm" class="headerlink" title="第一步：下载对应版本的npm"></a>第一步：下载对应版本的npm</h4><ol>
<li>访问npm注册表：<a href="https://registry.npmjs.org/npm/-/npm-6.14.16.tgz">https://registry.npmjs.org/npm/-/npm-6.14.16.tgz</a></li>
<li>下载npm-6.14.16.tgz文件</li>
<li>解压下载的压缩包</li>
</ol>
<h4 id="第二步：安装npm到Node-js目录"><a href="#第二步：安装npm到Node-js目录" class="headerlink" title="第二步：安装npm到Node.js目录"></a>第二步：安装npm到Node.js目录</h4><ol>
<li>找到Node.js安装目录（通常在<code>C:\Users\&#123;用户名&#125;\AppData\Roaming\nvm\v12.22.12\</code>）</li>
<li>将解压的npm文件夹复制到<code>node_modules</code>目录下</li>
<li>确保npm文件夹路径为：<code>C:\Users\&#123;用户名&#125;\AppData\Roaming\nvm\v12.22.12\node_modules\npm</code></li>
</ol>
<h3 id="3-配置npm"><a href="#3-配置npm" class="headerlink" title="3. 配置npm"></a>3. 配置npm</h3><h4 id="第一步：创建npm命令文件"><a href="#第一步：创建npm命令文件" class="headerlink" title="第一步：创建npm命令文件"></a>第一步：创建npm命令文件</h4><p>在Node.js安装目录下创建<code>npm.cmd</code>文件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> @IF EXIST <span class="string">&quot;%~dp0\node.exe&quot;</span> ( <span class="string">&quot;%~dp0\node.exe&quot;</span> <span class="string">&quot;%~dp0\node_modules\npm\bin\npm-cli.js&quot;</span> %* ) ELSE ( @SETLOCAL &amp; @SET PATHEXT=%PATHEXT:;.JS;=;% &amp; node <span class="string">&quot;%~dp0\node_modules\npm\bin\npm-cli.js&quot;</span> %* ) &gt; npm.cmd</span><br></pre></td></tr></table></figure>

<h4 id="第二步：验证npm安装"><a href="#第二步：验证npm安装" class="headerlink" title="第二步：验证npm安装"></a>第二步：验证npm安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm --version</span><br></pre></td></tr></table></figure>

<p>如果显示版本号，说明npm配置成功。</p>
<h2 id="（三）方案三：使用替代版本管理工具"><a href="#（三）方案三：使用替代版本管理工具" class="headerlink" title="（三）方案三：使用替代版本管理工具"></a>（三）方案三：使用替代版本管理工具</h2><h3 id="1-使用fnm"><a href="#1-使用fnm" class="headerlink" title="1. 使用fnm"></a>1. 使用fnm</h3><h4 id="第一步：安装fnm"><a href="#第一步：安装fnm" class="headerlink" title="第一步：安装fnm"></a>第一步：安装fnm</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">winget install Schniz.fnm</span><br></pre></td></tr></table></figure>

<h4 id="第二步：使用fnm安装Node-js"><a href="#第二步：使用fnm安装Node-js" class="headerlink" title="第二步：使用fnm安装Node.js"></a>第二步：使用fnm安装Node.js</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fnm install 12.22.12</span><br><span class="line">fnm use 12.22.12</span><br></pre></td></tr></table></figure>

<h3 id="2-使用volta"><a href="#2-使用volta" class="headerlink" title="2. 使用volta"></a>2. 使用volta</h3><h4 id="第一步：安装volta"><a href="#第一步：安装volta" class="headerlink" title="第一步：安装volta"></a>第一步：安装volta</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">winget install Volta.Volta</span><br></pre></td></tr></table></figure>

<h4 id="第二步：使用volta安装Node-js"><a href="#第二步：使用volta安装Node-js" class="headerlink" title="第二步：使用volta安装Node.js"></a>第二步：使用volta安装Node.js</h4><p>volta install <a href="mailto:&#110;&#x6f;&#100;&#101;&#x40;&#49;&#x32;&#x2e;&#50;&#x32;&#46;&#49;&#x32;">&#110;&#x6f;&#100;&#101;&#x40;&#49;&#x32;&#x2e;&#50;&#x32;&#46;&#49;&#x32;</a></p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## （四）方案四：修改nvm配置</span><br><span class="line"></span><br><span class="line">### 1. 修改nvm设置</span><br><span class="line"></span><br><span class="line">#### 第一步：编辑nvm配置文件</span><br><span class="line">1. 找到nvm的`settings.txt`文件（路径：`C:\Users\&#123;用户名&#125;\AppData\Roaming\nvm\settings.txt`）</span><br><span class="line">2. 使用文本编辑器打开该文件</span><br><span class="line">3. 添加或修改以下配置：</span><br><span class="line"></span><br><span class="line">```text</span><br><span class="line">node_mirror: https://npmmirror.com/mirrors/node/</span><br><span class="line">npm_mirror: https://npmmirror.com/mirrors/npm/</span><br></pre></td></tr></table></figure>

<h3 id="2-清理缓存重试"><a href="#2-清理缓存重试" class="headerlink" title="2. 清理缓存重试"></a>2. 清理缓存重试</h3><h4 id="第一步：清理nvm缓存"><a href="#第一步：清理nvm缓存" class="headerlink" title="第一步：清理nvm缓存"></a>第一步：清理nvm缓存</h4><ol>
<li>打开文件资源管理器</li>
<li>导航到<code>C:\Users\&#123;用户名&#125;\AppData\Local\Temp\</code></li>
<li>删除所有以<code>nvm-</code>开头的临时文件夹</li>
</ol>
<h4 id="第二步：重新尝试安装"><a href="#第二步：重新尝试安装" class="headerlink" title="第二步：重新尝试安装"></a>第二步：重新尝试安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install 12.22.12</span><br></pre></td></tr></table></figure>

<h1 id="四、预防措施"><a href="#四、预防措施" class="headerlink" title="四、预防措施"></a>四、预防措施</h1><h2 id="（一）版本兼容性检查"><a href="#（一）版本兼容性检查" class="headerlink" title="（一）版本兼容性检查"></a>（一）版本兼容性检查</h2><h3 id="1-创建兼容性对照表"><a href="#1-创建兼容性对照表" class="headerlink" title="1. 创建兼容性对照表"></a>1. 创建兼容性对照表</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| nvm版本 | 支持的Node.js版本范围 | 推荐使用场景 |</span><br><span class="line">|---------|---------------------|-------------|</span><br><span class="line">| 1.1.12  | 8.x - 18.x         | 需要老版本Node.js |</span><br><span class="line">| 1.2.x   | 16.x - 最新        | 只使用新版本Node.js |</span><br></pre></td></tr></table></figure>

<h3 id="2-安装前检查"><a href="#2-安装前检查" class="headerlink" title="2. 安装前检查"></a>2. 安装前检查</h3><h4 id="第一步：检查要安装的Node-js版本"><a href="#第一步：检查要安装的Node-js版本" class="headerlink" title="第一步：检查要安装的Node.js版本"></a>第一步：检查要安装的Node.js版本</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm list available</span><br></pre></td></tr></table></figure>

<h4 id="第二步：查看当前nvm版本"><a href="#第二步：查看当前nvm版本" class="headerlink" title="第二步：查看当前nvm版本"></a>第二步：查看当前nvm版本</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm version</span><br></pre></td></tr></table></figure>

<h4 id="第三步：版本兼容性判断"><a href="#第三步：版本兼容性判断" class="headerlink" title="第三步：版本兼容性判断"></a>第三步：版本兼容性判断</h4><p>根据上述兼容性对照表，选择合适的nvm版本。如果需要安装Node.js 12.x等低版本，建议使用nvm 1.1.12。</p>
<h2 id="（二）环境配置最佳实践"><a href="#（二）环境配置最佳实践" class="headerlink" title="（二）环境配置最佳实践"></a>（二）环境配置最佳实践</h2><h3 id="1-备份配置"><a href="#1-备份配置" class="headerlink" title="1. 备份配置"></a>1. 备份配置</h3><h4 id="第一步：备份nvm配置文件"><a href="#第一步：备份nvm配置文件" class="headerlink" title="第一步：备份nvm配置文件"></a>第一步：备份nvm配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">copy <span class="string">&quot;%APPDATA%\nvm\settings.txt&quot;</span> <span class="string">&quot;%APPDATA%\nvm\settings.txt.backup&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="第二步：备份环境变量"><a href="#第二步：备份环境变量" class="headerlink" title="第二步：备份环境变量"></a>第二步：备份环境变量</h4><ol>
<li>打开<strong>系统属性</strong> → <strong>高级</strong> → <strong>环境变量</strong></li>
<li>记录或截图保存以下环境变量的值：<ul>
<li><code>NVM_HOME</code></li>
<li><code>NVM_SYMLINK</code></li>
<li>PATH中的nvm相关路径</li>
</ul>
</li>
</ol>
<h3 id="2-分离环境"><a href="#2-分离环境" class="headerlink" title="2. 分离环境"></a>2. 分离环境</h3><h4 id="为不同项目创建独立的Node-js环境："><a href="#为不同项目创建独立的Node-js环境：" class="headerlink" title="为不同项目创建独立的Node.js环境："></a>为不同项目创建独立的Node.js环境：</h4><h4 id="第一步：创建-nvmrc文件"><a href="#第一步：创建-nvmrc文件" class="headerlink" title="第一步：创建.nvmrc文件"></a>第一步：创建.nvmrc文件</h4><p>在项目根目录创建<code>.nvmrc</code>文件，指定项目所需的Node.js版本：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;12.22.12&quot;</span> &gt; .nvmrc</span><br></pre></td></tr></table></figure>

<h4 id="第二步：使用指定版本"><a href="#第二步：使用指定版本" class="headerlink" title="第二步：使用指定版本"></a>第二步：使用指定版本</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm use</span><br></pre></td></tr></table></figure>

<p>这样可以确保每个项目使用正确的Node.js版本，避免版本冲突。</p>
<h1 id="五、故障排除"><a href="#五、故障排除" class="headerlink" title="五、故障排除"></a>五、故障排除</h1><h2 id="（一）常见错误及解决方法"><a href="#（一）常见错误及解决方法" class="headerlink" title="（一）常见错误及解决方法"></a>（一）常见错误及解决方法</h2><h3 id="1-权限错误"><a href="#1-权限错误" class="headerlink" title="1. 权限错误"></a>1. 权限错误</h3><h4 id="错误现象："><a href="#错误现象：" class="headerlink" title="错误现象："></a>错误现象：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Access denied</span><br></pre></td></tr></table></figure>

<h4 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h4><ol>
<li>右键点击<strong>PowerShell</strong>或<strong>命令提示符</strong></li>
<li>选择<strong>以管理员身份运行</strong></li>
<li>重新执行nvm命令</li>
</ol>
<h3 id="2-网络错误"><a href="#2-网络错误" class="headerlink" title="2. 网络错误"></a>2. 网络错误</h3><h4 id="错误现象：-1"><a href="#错误现象：-1" class="headerlink" title="错误现象："></a>错误现象：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Download failed</span><br></pre></td></tr></table></figure>

<h4 id="解决方法：-1"><a href="#解决方法：-1" class="headerlink" title="解决方法："></a>解决方法：</h4><p>配置国内镜像源加速下载：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nvm node_mirror https://npmmirror.com/mirrors/node/</span><br><span class="line">nvm npm_mirror https://npmmirror.com/mirrors/npm/</span><br></pre></td></tr></table></figure>

<h3 id="3-路径错误"><a href="#3-路径错误" class="headerlink" title="3. 路径错误"></a>3. 路径错误</h3><h4 id="错误现象：-2"><a href="#错误现象：-2" class="headerlink" title="错误现象："></a>错误现象：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Path too long</span><br></pre></td></tr></table></figure>

<h4 id="解决方法：-2"><a href="#解决方法：-2" class="headerlink" title="解决方法："></a>解决方法：</h4><ol>
<li>卸载当前nvm</li>
<li>重新安装nvm到较短的路径，如<code>C:\nvm</code></li>
<li>避免使用包含空格或特殊字符的路径</li>
</ol>
<h2 id="（二）验证安装"><a href="#（二）验证安装" class="headerlink" title="（二）验证安装"></a>（二）验证安装</h2><h3 id="1-完整性检查"><a href="#1-完整性检查" class="headerlink" title="1. 完整性检查"></a>1. 完整性检查</h3><h4 id="第一步：检查Node-js"><a href="#第一步：检查Node-js" class="headerlink" title="第一步：检查Node.js"></a>第一步：检查Node.js</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node --version</span><br><span class="line">node -e <span class="string">&quot;console.log(&#x27;Node.js is working!&#x27;)&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="第二步：检查npm"><a href="#第二步：检查npm" class="headerlink" title="第二步：检查npm"></a>第二步：检查npm</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm --version</span><br><span class="line">npm list -g --depth=0</span><br></pre></td></tr></table></figure>

<h4 id="第三步：检查nvm"><a href="#第三步：检查nvm" class="headerlink" title="第三步：检查nvm"></a>第三步：检查nvm</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nvm list</span><br><span class="line">nvm current</span><br></pre></td></tr></table></figure>

<h3 id="2-功能测试"><a href="#2-功能测试" class="headerlink" title="2. 功能测试"></a>2. 功能测试</h3><h4 id="第一步：创建测试项目"><a href="#第一步：创建测试项目" class="headerlink" title="第一步：创建测试项目"></a>第一步：创建测试项目</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> nvm-test</span><br><span class="line"><span class="built_in">cd</span> nvm-test</span><br><span class="line">npm init -y</span><br></pre></td></tr></table></figure>

<h4 id="第二步：安装测试包"><a href="#第二步：安装测试包" class="headerlink" title="第二步：安装测试包"></a>第二步：安装测试包</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install lodash</span><br></pre></td></tr></table></figure>

<h4 id="第三步：运行测试"><a href="#第三步：运行测试" class="headerlink" title="第三步：运行测试"></a>第三步：运行测试</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -e <span class="string">&quot;console.log(require(&#x27;lodash&#x27;).VERSION)&quot;</span></span><br></pre></td></tr></table></figure>

<p>如果所有命令都能正常执行并返回预期结果，说明nvm和Node.js安装成功。</p>
<h1 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h1><p>nvm安装低版本Node.js的”The system cannot find the file specified”错误主要是由于nvm版本兼容性问题导致的。解决这个问题的最佳方案是：</p>
<h2 id="（一）推荐解决流程"><a href="#（一）推荐解决流程" class="headerlink" title="（一）推荐解决流程"></a>（一）推荐解决流程</h2><ol>
<li><strong>降级nvm</strong>：安装nvm-windows 1.1.12版本</li>
<li><strong>验证兼容性</strong>：确认目标Node.js版本与nvm版本兼容</li>
<li><strong>配置镜像源</strong>：使用国内镜像提高下载成功率</li>
<li><strong>测试安装</strong>：完整验证Node.js和npm功能</li>
</ol>
<p><strong>实际验证结果</strong>：按照本文推荐的方案一（降级nvm版本），已成功解决Node.js 12.22.12的安装问题，验证了解决方案的有效性。</p>
<h2 id="（二）长期建议"><a href="#（二）长期建议" class="headerlink" title="（二）长期建议"></a>（二）长期建议</h2><ol>
<li><strong>版本规划</strong>：根据项目需求选择合适的nvm版本</li>
<li><strong>定期更新</strong>：关注nvm和Node.js的兼容性更新</li>
<li><strong>备份配置</strong>：保存工作环境的配置信息</li>
<li><strong>团队统一</strong>：确保团队使用相同的版本管理策略</li>
</ol>
<p>通过本文的解决方案，您应该能够成功安装所需的Node.js版本，并避免类似问题的再次发生。记住，版本管理工具的选择和配置对开发效率有重要影响，值得投入时间进行合理规划。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://github.com/coreybutler/nvm-windows">nvm-windows官方文档</a></li>
<li><a href="https://nodejs.org/en/download/">Node.js官方下载页面</a></li>
<li><a href="https://docs.npmjs.com/">npm官方文档</a></li>
<li><a href="https://github.com/coreybutler/nvm-windows/issues">nvm-windows问题追踪</a></li>
<li><a href="https://nvm.uihtm.com/doc/nvm-old.html">nvm常见问题</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[详细解决nvm在Windows系统下安装低版本Node.js时出现"The system cannot find the file specified"错误的问题，提供多种解决方案和预防措施]]>
    
    </summary>
    
      <category term="BUG" scheme="https://uwakeme.tech/tags/BUG/"/>
    
      <category term="Node.js" scheme="https://uwakeme.tech/tags/Node-js/"/>
    
      <category term="nvm" scheme="https://uwakeme.tech/tags/nvm/"/>
    
      <category term="版本管理" scheme="https://uwakeme.tech/tags/%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/"/>
    
      <category term="Windows" scheme="https://uwakeme.tech/tags/Windows/"/>
    
      <category term="环境配置" scheme="https://uwakeme.tech/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
      <category term="BUG" scheme="https://uwakeme.tech/categories/BUG/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[【Node.js】Node.js多版本管理：一台电脑安装多个Node.js版本的完整指南]]></title>
    <link href="https://uwakeme.tech/2025/07/25/Node.js/%E3%80%90Node.js%E3%80%91Node.js%E5%A4%9A%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%EF%BC%9A%E4%B8%80%E5%8F%B0%E7%94%B5%E8%84%91%E5%AE%89%E8%A3%85%E5%A4%9A%E4%B8%AANode.js%E7%89%88%E6%9C%AC%E7%9A%84%E5%AE%8C%E6%95%B4%E6%8C%87%E5%8D%97/"/>
    <id>https://uwakeme.tech/2025/07/25/Node.js/【Node.js】Node.js多版本管理：一台电脑安装多个Node.js版本的完整指南/</id>
    <published>2025-07-24T16:00:00.000Z</published>
    <updated>2025-07-28T11:11:55.507Z</updated>
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在现代前端和后端开发中，不同的项目往往需要不同版本的Node.js。有些老项目可能依赖较旧的Node.js版本，而新项目则需要最新的特性。在一台电脑上管理多个Node.js版本是开发者的常见需求。本文将详细介绍如何在同一台电脑上安装和管理多个Node.js版本。</p>
<h1 id="一、为什么需要多版本Node-js"><a href="#一、为什么需要多版本Node-js" class="headerlink" title="一、为什么需要多版本Node.js"></a>一、为什么需要多版本Node.js</h1><h2 id="（一）常见场景"><a href="#（一）常见场景" class="headerlink" title="（一）常见场景"></a>（一）常见场景</h2><h3 id="1-项目兼容性需求"><a href="#1-项目兼容性需求" class="headerlink" title="1. 项目兼容性需求"></a>1. 项目兼容性需求</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 老项目可能需要Node.js 14.x</span></span><br><span class="line">项目A: Node.js 14.21.3 + npm 6.x</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新项目需要最新的Node.js 20.x</span></span><br><span class="line">项目B: Node.js 20.11.0 + npm 10.x</span><br></pre></td></tr></table></figure>

<h3 id="2-依赖包版本限制"><a href="#2-依赖包版本限制" class="headerlink" title="2. 依赖包版本限制"></a>2. 依赖包版本限制</h3><p>某些npm包可能对Node.js版本有严格要求：</p>
<ul>
<li>老版本的包可能不支持新版本Node.js</li>
<li>新版本的包可能需要最新的Node.js特性</li>
</ul>
<h3 id="3-团队开发统一"><a href="#3-团队开发统一" class="headerlink" title="3. 团队开发统一"></a>3. 团队开发统一</h3><p>确保团队成员使用相同的Node.js版本，避免”在我机器上能跑”的问题。</p>
<h2 id="（二）版本管理的优势"><a href="#（二）版本管理的优势" class="headerlink" title="（二）版本管理的优势"></a>（二）版本管理的优势</h2><ol>
<li><strong>项目隔离</strong>：不同项目使用独立的Node.js环境</li>
<li><strong>快速切换</strong>：一条命令即可切换Node.js版本</li>
<li><strong>避免冲突</strong>：防止全局包版本冲突</li>
<li><strong>测试兼容性</strong>：轻松测试应用在不同Node.js版本下的表现</li>
</ol>
<h1 id="二、Node-js版本管理工具对比"><a href="#二、Node-js版本管理工具对比" class="headerlink" title="二、Node.js版本管理工具对比"></a>二、Node.js版本管理工具对比</h1><h2 id="（一）主流版本管理工具"><a href="#（一）主流版本管理工具" class="headerlink" title="（一）主流版本管理工具"></a>（一）主流版本管理工具</h2><table>
<thead>
<tr>
<th>工具</th>
<th>平台支持</th>
<th>特点</th>
<th>推荐度</th>
</tr>
</thead>
<tbody><tr>
<td>nvm</td>
<td>Windows&#x2F;macOS&#x2F;Linux</td>
<td>功能全面，社区活跃</td>
<td>⭐⭐⭐⭐⭐</td>
</tr>
<tr>
<td>n</td>
<td>macOS&#x2F;Linux</td>
<td>简单易用，轻量级</td>
<td>⭐⭐⭐⭐</td>
</tr>
<tr>
<td>fnm</td>
<td>Windows&#x2F;macOS&#x2F;Linux</td>
<td>速度快，Rust编写</td>
<td>⭐⭐⭐⭐</td>
</tr>
<tr>
<td>volta</td>
<td>Windows&#x2F;macOS&#x2F;Linux</td>
<td>项目级版本管理</td>
<td>⭐⭐⭐</td>
</tr>
</tbody></table>
<h2 id="（二）工具选择建议"><a href="#（二）工具选择建议" class="headerlink" title="（二）工具选择建议"></a>（二）工具选择建议</h2><ul>
<li><strong>Windows用户</strong>：推荐使用nvm-windows</li>
<li><strong>macOS&#x2F;Linux用户</strong>：推荐使用nvm或fnm</li>
<li><strong>追求速度</strong>：选择fnm</li>
<li><strong>项目级管理</strong>：选择volta</li>
</ul>
<h1 id="三、Windows系统安装多版本Node-js"><a href="#三、Windows系统安装多版本Node-js" class="headerlink" title="三、Windows系统安装多版本Node.js"></a>三、Windows系统安装多版本Node.js</h1><h2 id="（一）使用nvm-windows"><a href="#（一）使用nvm-windows" class="headerlink" title="（一）使用nvm-windows"></a>（一）使用nvm-windows</h2><h3 id="1-卸载现有Node-js"><a href="#1-卸载现有Node-js" class="headerlink" title="1. 卸载现有Node.js"></a>1. 卸载现有Node.js</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 通过控制面板卸载Node.js</span></span><br><span class="line"><span class="comment"># 2. 删除残留文件夹</span></span><br><span class="line"><span class="built_in">Remove-Item</span> <span class="literal">-Recurse</span> <span class="literal">-Force</span> <span class="string">&quot;C:\Program Files\nodejs&quot;</span></span><br><span class="line"><span class="built_in">Remove-Item</span> <span class="literal">-Recurse</span> <span class="literal">-Force</span> <span class="string">&quot;C:\Users\&#123;用户名&#125;\AppData\Roaming\npm&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-下载安装nvm-windows"><a href="#2-下载安装nvm-windows" class="headerlink" title="2. 下载安装nvm-windows"></a>2. 下载安装nvm-windows</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 访问GitHub下载最新版本</span></span><br><span class="line">https://github.com/coreybutler/nvm-windows/releases</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载nvm-setup.zip并安装</span></span><br></pre></td></tr></table></figure>

<h3 id="3-配置nvm"><a href="#3-配置nvm" class="headerlink" title="3. 配置nvm"></a>3. 配置nvm</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看nvm版本</span></span><br><span class="line">nvm version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置镜像源（可选，提高下载速度）</span></span><br><span class="line">nvm node_mirror https://npmmirror.com/mirrors/node/</span><br><span class="line">nvm npm_mirror https://npmmirror.com/mirrors/npm/</span><br></pre></td></tr></table></figure>

<h3 id="4-安装和管理Node-js版本"><a href="#4-安装和管理Node-js版本" class="headerlink" title="4. 安装和管理Node.js版本"></a>4. 安装和管理Node.js版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看可安装的Node.js版本</span></span><br><span class="line">nvm list available</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装指定版本</span></span><br><span class="line">nvm install 18.19.0</span><br><span class="line">nvm install 20.11.0</span><br><span class="line">nvm install latest  <span class="comment"># 安装最新版本</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看已安装版本</span></span><br><span class="line">nvm list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换版本</span></span><br><span class="line">nvm use 18.19.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置默认版本</span></span><br><span class="line">nvm <span class="built_in">alias</span> default 18.19.0</span><br></pre></td></tr></table></figure>

<h2 id="（二）验证安装"><a href="#（二）验证安装" class="headerlink" title="（二）验证安装"></a>（二）验证安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查当前Node.js版本</span></span><br><span class="line">node --version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查npm版本</span></span><br><span class="line">npm --version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看安装路径</span></span><br><span class="line"><span class="built_in">where</span> node</span><br><span class="line"><span class="built_in">where</span> npm</span><br></pre></td></tr></table></figure>

<h1 id="四、macOS-Linux系统安装多版本Node-js"><a href="#四、macOS-Linux系统安装多版本Node-js" class="headerlink" title="四、macOS&#x2F;Linux系统安装多版本Node.js"></a>四、macOS&#x2F;Linux系统安装多版本Node.js</h1><h2 id="（一）使用nvm"><a href="#（一）使用nvm" class="headerlink" title="（一）使用nvm"></a>（一）使用nvm</h2><h3 id="1-安装nvm"><a href="#1-安装nvm" class="headerlink" title="1. 安装nvm"></a>1. 安装nvm</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用curl安装</span></span><br><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或使用wget安装</span></span><br><span class="line">wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新加载shell配置</span></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>

<h3 id="2-验证nvm安装"><a href="#2-验证nvm安装" class="headerlink" title="2. 验证nvm安装"></a>2. 验证nvm安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查nvm版本</span></span><br><span class="line">nvm --version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果提示command not found，手动添加到PATH</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export NVM_DIR=&quot;$HOME/.nvm&quot;&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \. &quot;$NVM_DIR/nvm.sh&quot;&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;[ -s &quot;$NVM_DIR/bash_completion&quot; ] &amp;&amp; \. &quot;$NVM_DIR/bash_completion&quot;&#x27;</span> &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure>

<h3 id="3-安装和管理Node-js"><a href="#3-安装和管理Node-js" class="headerlink" title="3. 安装和管理Node.js"></a>3. 安装和管理Node.js</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装最新LTS版本</span></span><br><span class="line">nvm install --lts</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装指定版本</span></span><br><span class="line">nvm install 18.19.0</span><br><span class="line">nvm install 20.11.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看已安装版本</span></span><br><span class="line">nvm <span class="built_in">ls</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看远程可用版本</span></span><br><span class="line">nvm ls-remote</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换版本</span></span><br><span class="line">nvm use 18.19.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置默认版本</span></span><br><span class="line">nvm <span class="built_in">alias</span> default 18.19.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在当前shell中使用指定版本</span></span><br><span class="line">nvm <span class="built_in">exec</span> 20.11.0 node --version</span><br></pre></td></tr></table></figure>

<h2 id="（二）使用fnm（更快的替代方案）"><a href="#（二）使用fnm（更快的替代方案）" class="headerlink" title="（二）使用fnm（更快的替代方案）"></a>（二）使用fnm（更快的替代方案）</h2><h3 id="1-安装fnm"><a href="#1-安装fnm" class="headerlink" title="1. 安装fnm"></a>1. 安装fnm</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># macOS使用Homebrew</span></span><br><span class="line">brew install fnm</span><br><span class="line"></span><br><span class="line"><span class="comment"># Linux使用curl</span></span><br><span class="line">curl -fsSL https://fnm.vercel.app/install | bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加到shell配置</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;eval &quot;$(fnm env --use-on-cd)&quot;&#x27;</span> &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure>

<h3 id="2-使用fnm管理版本"><a href="#2-使用fnm管理版本" class="headerlink" title="2. 使用fnm管理版本"></a>2. 使用fnm管理版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装Node.js版本</span></span><br><span class="line">fnm install 18.19.0</span><br><span class="line">fnm install 20.11.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出已安装版本</span></span><br><span class="line">fnm list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换版本</span></span><br><span class="line">fnm use 18.19.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置默认版本</span></span><br><span class="line">fnm default 18.19.0</span><br></pre></td></tr></table></figure>

<h1 id="五、项目级版本管理"><a href="#五、项目级版本管理" class="headerlink" title="五、项目级版本管理"></a>五、项目级版本管理</h1><h2 id="（一）使用-nvmrc文件"><a href="#（一）使用-nvmrc文件" class="headerlink" title="（一）使用.nvmrc文件"></a>（一）使用.nvmrc文件</h2><h3 id="1-创建-nvmrc文件"><a href="#1-创建-nvmrc文件" class="headerlink" title="1. 创建.nvmrc文件"></a>1. 创建.nvmrc文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在项目根目录创建.nvmrc文件</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;18.19.0&quot;</span> &gt; .nvmrc</span><br></pre></td></tr></table></figure>

<h3 id="2-自动切换版本"><a href="#2-自动切换版本" class="headerlink" title="2. 自动切换版本"></a>2. 自动切换版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入项目目录时自动切换</span></span><br><span class="line">nvm use</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果版本未安装，先安装再使用</span></span><br><span class="line">nvm install</span><br></pre></td></tr></table></figure>

<h3 id="3-shell自动切换配置"><a href="#3-shell自动切换配置" class="headerlink" title="3. shell自动切换配置"></a>3. shell自动切换配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加到~/.bashrc或~/.zshrc</span></span><br><span class="line"><span class="function"><span class="title">cdnvm</span></span>() &#123;</span><br><span class="line">    <span class="built_in">command</span> <span class="built_in">cd</span> <span class="string">&quot;<span class="variable">$@</span>&quot;</span>;</span><br><span class="line">    nvm_path=$(nvm_find_up .nvmrc | <span class="built_in">tr</span> -d <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [[ ! <span class="variable">$nvm_path</span> = *[^[:space:]]* ]]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">declare</span> default_version;</span><br><span class="line">        default_version=$(nvm version default);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> [[ <span class="variable">$default_version</span> == <span class="string">&quot;N/A&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">            nvm install node;</span><br><span class="line">            default_version=$(nvm version default);</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> [[ $(nvm current) != <span class="string">&quot;<span class="variable">$default_version</span>&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">            nvm use default;</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> [[ -s <span class="variable">$nvm_path</span>/.nvmrc &amp;&amp; -r <span class="variable">$nvm_path</span>/.nvmrc ]]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">declare</span> nvm_version</span><br><span class="line">        nvm_version=$(&lt;<span class="string">&quot;<span class="variable">$nvm_path</span>&quot;</span>/.nvmrc)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">declare</span> locally_resolved_nvm_version</span><br><span class="line">        locally_resolved_nvm_version=$(nvm <span class="built_in">ls</span> --no-colors <span class="string">&quot;<span class="variable">$nvm_version</span>&quot;</span> | <span class="built_in">tail</span> -1 | <span class="built_in">tr</span> -d <span class="string">&#x27;\-&gt;*&#x27;</span> | <span class="built_in">tr</span> -d <span class="string">&#x27;[:space:]&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$locally_resolved_nvm_version</span>&quot;</span> == <span class="string">&quot;N/A&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">            nvm install <span class="string">&quot;<span class="variable">$nvm_version</span>&quot;</span>;</span><br><span class="line">        <span class="keyword">elif</span> [[ $(nvm current) != <span class="string">&quot;<span class="variable">$locally_resolved_nvm_version</span>&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">            nvm use <span class="string">&quot;<span class="variable">$nvm_version</span>&quot;</span>;</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">alias</span> <span class="built_in">cd</span>=<span class="string">&#x27;cdnvm&#x27;</span></span><br><span class="line"><span class="built_in">cd</span> <span class="string">&quot;<span class="variable">$PWD</span>&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="（二）使用package-json指定版本"><a href="#（二）使用package-json指定版本" class="headerlink" title="（二）使用package.json指定版本"></a>（二）使用package.json指定版本</h2><h3 id="1-在package-json中指定引擎版本"><a href="#1-在package-json中指定引擎版本" class="headerlink" title="1. 在package.json中指定引擎版本"></a>1. 在package.json中指定引擎版本</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;my-project&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;engines&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;node&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&gt;=18.19.0 &lt;19.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;npm&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&gt;=9.0.0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-强制版本检查"><a href="#2-强制版本检查" class="headerlink" title="2. 强制版本检查"></a>2. 强制版本检查</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;preinstall&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node -e \&quot;if(process.version.slice(1).split(&#x27;.&#x27;)[0] &lt; 18) throw new Error(&#x27;Node.js version must be &gt;= 18&#x27;)\&quot;&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h1 id="六、常见问题与解决方案"><a href="#六、常见问题与解决方案" class="headerlink" title="六、常见问题与解决方案"></a>六、常见问题与解决方案</h1><h2 id="（一）权限问题"><a href="#（一）权限问题" class="headerlink" title="（一）权限问题"></a>（一）权限问题</h2><h3 id="1-Windows权限问题"><a href="#1-Windows权限问题" class="headerlink" title="1. Windows权限问题"></a>1. Windows权限问题</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以管理员身份运行PowerShell</span></span><br><span class="line"><span class="comment"># 设置执行策略</span></span><br><span class="line"><span class="built_in">Set-ExecutionPolicy</span> <span class="literal">-ExecutionPolicy</span> RemoteSigned <span class="literal">-Scope</span> CurrentUser</span><br></pre></td></tr></table></figure>

<h3 id="2-macOS-Linux权限问题"><a href="#2-macOS-Linux权限问题" class="headerlink" title="2. macOS&#x2F;Linux权限问题"></a>2. macOS&#x2F;Linux权限问题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 避免使用sudo安装全局包</span></span><br><span class="line"><span class="comment"># 配置npm全局目录</span></span><br><span class="line"><span class="built_in">mkdir</span> ~/.npm-global</span><br><span class="line">npm config <span class="built_in">set</span> prefix <span class="string">&#x27;~/.npm-global&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=~/.npm-global/bin:$PATH&#x27;</span> &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure>

<h2 id="（二）版本切换失效"><a href="#（二）版本切换失效" class="headerlink" title="（二）版本切换失效"></a>（二）版本切换失效</h2><h3 id="1-检查PATH环境变量"><a href="#1-检查PATH环境变量" class="headerlink" title="1. 检查PATH环境变量"></a>1. 检查PATH环境变量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看当前PATH</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 确保nvm路径在最前面</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;<span class="variable">$NVM_DIR</span>/versions/node/<span class="subst">$(nvm version)</span>/bin:<span class="variable">$PATH</span>&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-重新加载配置"><a href="#2-重新加载配置" class="headerlink" title="2. 重新加载配置"></a>2. 重新加载配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重新加载shell配置</span></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或重启终端</span></span><br></pre></td></tr></table></figure>

<h2 id="（三）npm全局包问题"><a href="#（三）npm全局包问题" class="headerlink" title="（三）npm全局包问题"></a>（三）npm全局包问题</h2><h3 id="1-版本切换后全局包丢失"><a href="#1-版本切换后全局包丢失" class="headerlink" title="1. 版本切换后全局包丢失"></a>1. 版本切换后全局包丢失</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 每个Node.js版本都有独立的全局包</span></span><br><span class="line"><span class="comment"># 切换版本后需要重新安装全局包</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前全局包</span></span><br><span class="line">npm list -g --depth=0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 常用全局包安装脚本</span></span><br><span class="line">npm install -g yarn pnpm nodemon pm2 typescript</span><br></pre></td></tr></table></figure>

<h3 id="2-全局包迁移"><a href="#2-全局包迁移" class="headerlink" title="2. 全局包迁移"></a>2. 全局包迁移</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从一个版本迁移全局包到另一个版本</span></span><br><span class="line">nvm reinstall-packages &lt;version&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 例如：从18.19.0迁移到20.11.0</span></span><br><span class="line">nvm use 20.11.0</span><br><span class="line">nvm reinstall-packages 18.19.0</span><br></pre></td></tr></table></figure>

<h1 id="七、最佳实践"><a href="#七、最佳实践" class="headerlink" title="七、最佳实践"></a>七、最佳实践</h1><h2 id="（一）版本选择策略"><a href="#（一）版本选择策略" class="headerlink" title="（一）版本选择策略"></a>（一）版本选择策略</h2><h3 id="1-项目版本选择"><a href="#1-项目版本选择" class="headerlink" title="1. 项目版本选择"></a>1. 项目版本选择</h3><ul>
<li><strong>新项目</strong>：使用最新LTS版本</li>
<li><strong>维护项目</strong>：保持原有版本，除非有升级需求</li>
<li><strong>企业项目</strong>：统一使用团队约定的版本</li>
</ul>
<h3 id="2-版本升级策略"><a href="#2-版本升级策略" class="headerlink" title="2. 版本升级策略"></a>2. 版本升级策略</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 渐进式升级</span></span><br><span class="line">1. 在开发环境测试新版本</span><br><span class="line">2. 更新CI/CD配置</span><br><span class="line">3. 团队成员统一升级</span><br><span class="line">4. 生产环境最后升级</span><br></pre></td></tr></table></figure>

<h2 id="（二）团队协作"><a href="#（二）团队协作" class="headerlink" title="（二）团队协作"></a>（二）团队协作</h2><h3 id="1-版本文档化"><a href="#1-版本文档化" class="headerlink" title="1. 版本文档化"></a>1. 版本文档化</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 项目README.md</span></span><br><span class="line"><span class="section">## 环境要求</span></span><br><span class="line"><span class="bullet">-</span> Node.js: 18.19.0</span><br><span class="line"><span class="bullet">-</span> npm: 9.6.0</span><br><span class="line"></span><br><span class="line"><span class="section">## 快速开始</span></span><br><span class="line"><span class="code">```bash</span></span><br><span class="line"><span class="code"># 安装指定Node.js版本</span></span><br><span class="line"><span class="code">nvm install 18.19.0</span></span><br><span class="line"><span class="code">nvm use 18.19.0</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 安装依赖</span></span><br><span class="line"><span class="code">npm install</span></span><br></pre></td></tr></table></figure>

<h3 id="2-CI-CD配置"><a href="#2-CI-CD配置" class="headerlink" title="2. CI&#x2F;CD配置"></a>2. CI&#x2F;CD配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .github/workflows/ci.yml</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">CI</span></span><br><span class="line"><span class="attr">on:</span> [<span class="string">push</span>, <span class="string">pull_request</span>]</span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">test:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">strategy:</span></span><br><span class="line">      <span class="attr">matrix:</span></span><br><span class="line">        <span class="attr">node-version:</span> [<span class="number">18.19</span><span class="number">.0</span>, <span class="number">20.11</span><span class="number">.0</span>]</span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Use</span> <span class="string">Node.js</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node-version</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/setup-node@v3</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">node-version:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node-version</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">npm</span> <span class="string">ci</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">npm</span> <span class="string">test</span></span><br></pre></td></tr></table></figure>

<h1 id="八、总结"><a href="#八、总结" class="headerlink" title="八、总结"></a>八、总结</h1><p>在一台电脑上安装多个Node.js版本不仅是可能的，而且是现代开发的标准做法。通过使用版本管理工具如nvm、fnm等，我们可以：</p>
<ol>
<li><strong>灵活切换</strong>：根据项目需求快速切换Node.js版本</li>
<li><strong>环境隔离</strong>：避免不同项目间的版本冲突</li>
<li><strong>团队协作</strong>：确保团队成员使用统一的开发环境</li>
<li><strong>兼容性测试</strong>：轻松测试应用在不同版本下的表现</li>
</ol>
<p>选择合适的版本管理工具，建立规范的版本管理流程，将大大提高开发效率和项目稳定性。记住，版本管理不仅仅是技术问题，更是团队协作和项目管理的重要组成部分。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://github.com/nvm-sh/nvm">nvm官方文档</a></li>
<li><a href="https://github.com/coreybutler/nvm-windows">nvm-windows官方文档</a></li>
<li><a href="https://github.com/Schniz/fnm">fnm官方文档</a></li>
<li><a href="https://nodejs.org/en/about/releases/">Node.js官方版本发布计划</a></li>
<li><a href="https://docs.npmjs.com/">npm官方文档</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[详细介绍如何在一台电脑上安装和管理多个Node.js版本，包括nvm、n、fnm等版本管理工具的使用方法，以及不同项目间Node.js版本切换的最佳实践]]>
    
    </summary>
    
      <category term="后端" scheme="https://uwakeme.tech/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="Node.js" scheme="https://uwakeme.tech/tags/Node-js/"/>
    
      <category term="nvm" scheme="https://uwakeme.tech/tags/nvm/"/>
    
      <category term="版本管理" scheme="https://uwakeme.tech/tags/%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/"/>
    
      <category term="开发环境" scheme="https://uwakeme.tech/tags/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    
      <category term="工具" scheme="https://uwakeme.tech/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="Node.js" scheme="https://uwakeme.tech/categories/Node-js/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[【后端】函数自动执行模式详解：Java Spring与Node.js实现指南]]></title>
    <link href="https://uwakeme.tech/2025/07/25/%E5%90%8E%E7%AB%AF/%E3%80%90%E5%90%8E%E7%AB%AF%E3%80%91%E5%87%BD%E6%95%B0%E8%87%AA%E5%8A%A8%E6%89%A7%E8%A1%8C%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3%EF%BC%9AJava%20Spring%E4%B8%8ENode.js%E5%AE%9E%E7%8E%B0%E6%8C%87%E5%8D%97/"/>
    <id>https://uwakeme.tech/2025/07/25/后端/【后端】函数自动执行模式详解：Java Spring与Node.js实现指南/</id>
    <published>2025-07-24T16:00:00.000Z</published>
    <updated>2025-07-25T07:34:36.556Z</updated>
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在现代后端开发中，经常需要在某个函数执行时自动触发其他相关函数，比如日志记录、缓存更新、消息通知等。这种需求在Java Spring和Node.js开发中都很常见。本文将详细介绍在这两个技术栈中实现函数自动执行的多种模式和最佳实践。</p>
<h1 id="一、Java-Spring实现方案"><a href="#一、Java-Spring实现方案" class="headerlink" title="一、Java Spring实现方案"></a>一、Java Spring实现方案</h1><h2 id="（一）AOP切面编程（推荐）"><a href="#（一）AOP切面编程（推荐）" class="headerlink" title="（一）AOP切面编程（推荐）"></a>（一）AOP切面编程（推荐）</h2><h3 id="1-基础AOP实现"><a href="#1-基础AOP实现" class="headerlink" title="1. 基础AOP实现"></a>1. 基础AOP实现</h3><h4 id="第一步：添加依赖"><a href="#第一步：添加依赖" class="headerlink" title="第一步：添加依赖"></a>第一步：添加依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- pom.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="第二步：启用AOP"><a href="#第二步：启用AOP" class="headerlink" title="第二步：启用AOP"></a>第二步：启用AOP</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="第三步：创建自定义注解"><a href="#第三步：创建自定义注解" class="headerlink" title="第三步：创建自定义注解"></a>第三步：创建自定义注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AutoExecute &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自动执行的类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否异步执行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">async</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行顺序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">order</span><span class="params">()</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="第四步：实现切面类"><a href="#第四步：实现切面类" class="headerlink" title="第四步：实现切面类"></a>第四步：实现切面类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AutoExecuteAspect</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ApplicationEventPublisher eventPublisher;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TaskExecutor taskExecutor;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法执行前自动执行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Before(&quot;@annotation(autoExecute)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeExecute</span><span class="params">(JoinPoint joinPoint, AutoExecute autoExecute)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">        Object[] args = joinPoint.getArgs();</span><br><span class="line">        </span><br><span class="line">        log.info(<span class="string">&quot;方法执行前：&#123;&#125;, 参数：&#123;&#125;&quot;</span>, methodName, Arrays.toString(args));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 执行前置逻辑</span></span><br><span class="line">        executeAutoFunctions(<span class="string">&quot;before&quot;</span>, methodName, args, autoExecute);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法执行后自动执行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AfterReturning(value = &quot;@annotation(autoExecute)&quot;, returning = &quot;result&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterExecute</span><span class="params">(JoinPoint joinPoint, Object result, AutoExecute autoExecute)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">        </span><br><span class="line">        log.info(<span class="string">&quot;方法执行后：&#123;&#125;, 结果：&#123;&#125;&quot;</span>, methodName, result);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 执行后置逻辑</span></span><br><span class="line">        executeAutoFunctions(<span class="string">&quot;after&quot;</span>, methodName, result, autoExecute);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法执行异常时自动执行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AfterThrowing(value = &quot;@annotation(autoExecute)&quot;, throwing = &quot;exception&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">(JoinPoint joinPoint, Exception exception, AutoExecute autoExecute)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">        </span><br><span class="line">        log.error(<span class="string">&quot;方法执行异常：&#123;&#125;, 异常：&#123;&#125;&quot;</span>, methodName, exception.getMessage());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 执行异常处理逻辑</span></span><br><span class="line">        executeAutoFunctions(<span class="string">&quot;error&quot;</span>, methodName, exception, autoExecute);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 环绕通知 - 完全控制方法执行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Around(&quot;@annotation(autoExecute)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">aroundExecute</span><span class="params">(ProceedingJoinPoint joinPoint, AutoExecute autoExecute)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 执行前置逻辑</span></span><br><span class="line">            executeAutoFunctions(<span class="string">&quot;before&quot;</span>, methodName, joinPoint.getArgs(), autoExecute);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 执行原方法</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> joinPoint.proceed();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 执行后置逻辑</span></span><br><span class="line">            executeAutoFunctions(<span class="string">&quot;after&quot;</span>, methodName, result, autoExecute);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// 执行异常逻辑</span></span><br><span class="line">            executeAutoFunctions(<span class="string">&quot;error&quot;</span>, methodName, e, autoExecute);</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 执行清理逻辑</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">            log.info(<span class="string">&quot;方法执行耗时：&#123;&#125;ms&quot;</span>, endTime - startTime);</span><br><span class="line">            executeAutoFunctions(<span class="string">&quot;finally&quot;</span>, methodName, endTime - startTime, autoExecute);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行自动函数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">executeAutoFunctions</span><span class="params">(String phase, String methodName, Object data, AutoExecute autoExecute)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (String type : autoExecute.value()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (autoExecute.async()) &#123;</span><br><span class="line">                <span class="comment">// 异步执行</span></span><br><span class="line">                taskExecutor.execute(() -&gt; &#123;</span><br><span class="line">                    executeByType(phase, type, methodName, data);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 同步执行</span></span><br><span class="line">                executeByType(phase, type, methodName, data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据类型执行对应的自动函数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">executeByType</span><span class="params">(String phase, String type, String methodName, Object data)</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;log&quot;</span>:</span><br><span class="line">                logFunction(phase, methodName, data);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;cache&quot;</span>:</span><br><span class="line">                cacheFunction(phase, methodName, data);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;notification&quot;</span>:</span><br><span class="line">                notificationFunction(phase, methodName, data);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;audit&quot;</span>:</span><br><span class="line">                auditFunction(phase, methodName, data);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                log.warn(<span class="string">&quot;未知的自动执行类型：&#123;&#125;&quot;</span>, type);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">logFunction</span><span class="params">(String phase, String methodName, Object data)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;自动日志记录 - 阶段：&#123;&#125;, 方法：&#123;&#125;, 数据：&#123;&#125;&quot;</span>, phase, methodName, data);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">cacheFunction</span><span class="params">(String phase, String methodName, Object data)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;自动缓存操作 - 阶段：&#123;&#125;, 方法：&#123;&#125;, 数据：&#123;&#125;&quot;</span>, phase, methodName, data);</span><br><span class="line">        <span class="comment">// 实际的缓存操作逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">notificationFunction</span><span class="params">(String phase, String methodName, Object data)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;自动通知发送 - 阶段：&#123;&#125;, 方法：&#123;&#125;, 数据：&#123;&#125;&quot;</span>, phase, methodName, data);</span><br><span class="line">        <span class="comment">// 发送通知的逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">auditFunction</span><span class="params">(String phase, String methodName, Object data)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;自动审计记录 - 阶段：&#123;&#125;, 方法：&#123;&#125;, 数据：&#123;&#125;&quot;</span>, phase, methodName, data);</span><br><span class="line">        <span class="comment">// 审计日志记录逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-业务服务使用示例"><a href="#2-业务服务使用示例" class="headerlink" title="2. 业务服务使用示例"></a>2. 业务服务使用示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderRepository orderRepository;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建订单 - 自动执行日志、缓存、通知</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AutoExecute(value = &#123;&quot;log&quot;, &quot;cache&quot;, &quot;notification&quot;&#125;, async = true)</span></span><br><span class="line">    <span class="keyword">public</span> Order <span class="title function_">createOrder</span><span class="params">(CreateOrderRequest request)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;开始创建订单：&#123;&#125;&quot;</span>, request);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 业务逻辑</span></span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Order</span>();</span><br><span class="line">        order.setUserId(request.getUserId());</span><br><span class="line">        order.setProductId(request.getProductId());</span><br><span class="line">        order.setQuantity(request.getQuantity());</span><br><span class="line">        order.setStatus(OrderStatus.PENDING);</span><br><span class="line">        order.setCreateTime(LocalDateTime.now());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 保存订单</span></span><br><span class="line">        <span class="type">Order</span> <span class="variable">savedOrder</span> <span class="operator">=</span> orderRepository.save(order);</span><br><span class="line">        </span><br><span class="line">        log.info(<span class="string">&quot;订单创建成功：&#123;&#125;&quot;</span>, savedOrder.getId());</span><br><span class="line">        <span class="keyword">return</span> savedOrder;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新订单状态 - 自动执行审计和通知</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AutoExecute(value = &#123;&quot;audit&quot;, &quot;notification&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> Order <span class="title function_">updateOrderStatus</span><span class="params">(Long orderId, OrderStatus newStatus)</span> &#123;</span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderRepository.findById(orderId)</span><br><span class="line">            .orElseThrow(() -&gt; <span class="keyword">new</span> <span class="title class_">OrderNotFoundException</span>(<span class="string">&quot;订单不存在：&quot;</span> + orderId));</span><br><span class="line">        </span><br><span class="line">        <span class="type">OrderStatus</span> <span class="variable">oldStatus</span> <span class="operator">=</span> order.getStatus();</span><br><span class="line">        order.setStatus(newStatus);</span><br><span class="line">        order.setUpdateTime(LocalDateTime.now());</span><br><span class="line">        </span><br><span class="line">        <span class="type">Order</span> <span class="variable">updatedOrder</span> <span class="operator">=</span> orderRepository.save(order);</span><br><span class="line">        </span><br><span class="line">        log.info(<span class="string">&quot;订单状态更新：&#123;&#125; &#123;&#125; -&gt; &#123;&#125;&quot;</span>, orderId, oldStatus, newStatus);</span><br><span class="line">        <span class="keyword">return</span> updatedOrder;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除订单 - 自动执行缓存清理和审计</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AutoExecute(value = &#123;&quot;cache&quot;, &quot;audit&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteOrder</span><span class="params">(Long orderId)</span> &#123;</span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderRepository.findById(orderId)</span><br><span class="line">            .orElseThrow(() -&gt; <span class="keyword">new</span> <span class="title class_">OrderNotFoundException</span>(<span class="string">&quot;订单不存在：&quot;</span> + orderId));</span><br><span class="line">        </span><br><span class="line">        orderRepository.delete(order);</span><br><span class="line">        log.info(<span class="string">&quot;订单删除成功：&#123;&#125;&quot;</span>, orderId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="（二）Spring事件机制"><a href="#（二）Spring事件机制" class="headerlink" title="（二）Spring事件机制"></a>（二）Spring事件机制</h2><h3 id="1-自定义事件类"><a href="#1-自定义事件类" class="headerlink" title="1. 自定义事件类"></a>1. 自定义事件类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基础业务事件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">BusinessEvent</span> <span class="keyword">extends</span> <span class="title class_">ApplicationEvent</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String eventType;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object data;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> LocalDateTime timestamp;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BusinessEvent</span><span class="params">(Object source, String eventType, Object data)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(source);</span><br><span class="line">        <span class="built_in">this</span>.eventType = eventType;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">        <span class="built_in">this</span>.timestamp = LocalDateTime.now();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// getters...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 订单事件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderEvent</span> <span class="keyword">extends</span> <span class="title class_">BusinessEvent</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OrderEvent</span><span class="params">(Object source, String eventType, Order order)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(source, eventType, order);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Order <span class="title function_">getOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (Order) getData();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户事件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserEvent</span> <span class="keyword">extends</span> <span class="title class_">BusinessEvent</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserEvent</span><span class="params">(Object source, String eventType, User user)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(source, eventType, user);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (User) getData();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-事件监听器"><a href="#2-事件监听器" class="headerlink" title="2. 事件监听器"></a>2. 事件监听器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BusinessEventListener</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> NotificationService notificationService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CacheService cacheService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuditService auditService;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 监听订单创建事件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleOrderCreated</span><span class="params">(OrderEvent event)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;ORDER_CREATED&quot;</span>.equals(event.getEventType())) &#123;</span><br><span class="line">            <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> event.getOrder();</span><br><span class="line">            log.info(<span class="string">&quot;处理订单创建事件：&#123;&#125;&quot;</span>, order.getId());</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 自动执行相关操作</span></span><br><span class="line">            notificationService.sendOrderCreatedNotification(order);</span><br><span class="line">            cacheService.updateOrderCache(order);</span><br><span class="line">            auditService.recordOrderCreation(order);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 监听订单状态更新事件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleOrderStatusUpdated</span><span class="params">(OrderEvent event)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;ORDER_STATUS_UPDATED&quot;</span>.equals(event.getEventType())) &#123;</span><br><span class="line">            <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> event.getOrder();</span><br><span class="line">            log.info(<span class="string">&quot;处理订单状态更新事件：&#123;&#125;&quot;</span>, order.getId());</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 根据不同状态执行不同操作</span></span><br><span class="line">            <span class="keyword">switch</span> (order.getStatus()) &#123;</span><br><span class="line">                <span class="keyword">case</span> PAID:</span><br><span class="line">                    notificationService.sendPaymentConfirmation(order);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> SHIPPED:</span><br><span class="line">                    notificationService.sendShippingNotification(order);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> COMPLETED:</span><br><span class="line">                    notificationService.sendOrderCompletedNotification(order);</span><br><span class="line">                    auditService.recordOrderCompletion(order);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 监听用户注册事件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleUserRegistered</span><span class="params">(UserEvent event)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;USER_REGISTERED&quot;</span>.equals(event.getEventType())) &#123;</span><br><span class="line">            <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> event.getUser();</span><br><span class="line">            log.info(<span class="string">&quot;处理用户注册事件：&#123;&#125;&quot;</span>, user.getId());</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 自动执行欢迎流程</span></span><br><span class="line">            notificationService.sendWelcomeEmail(user);</span><br><span class="line">            notificationService.sendWelcomeSMS(user);</span><br><span class="line">            auditService.recordUserRegistration(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通用事件处理器 - 处理所有业务事件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleAllBusinessEvents</span><span class="params">(BusinessEvent event)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;记录业务事件：类型=&#123;&#125;, 时间=&#123;&#125;&quot;</span>, event.getEventType(), event.getTimestamp());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 通用的事件记录逻辑</span></span><br><span class="line">        auditService.recordBusinessEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-在业务服务中发布事件"><a href="#3-在业务服务中发布事件" class="headerlink" title="3. 在业务服务中发布事件"></a>3. 在业务服务中发布事件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ApplicationEventPublisher eventPublisher;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderRepository orderRepository;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Order <span class="title function_">createOrder</span><span class="params">(CreateOrderRequest request)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建订单的业务逻辑</span></span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Order</span>();</span><br><span class="line">        order.setUserId(request.getUserId());</span><br><span class="line">        order.setProductId(request.getProductId());</span><br><span class="line">        order.setQuantity(request.getQuantity());</span><br><span class="line">        order.setStatus(OrderStatus.PENDING);</span><br><span class="line">        order.setCreateTime(LocalDateTime.now());</span><br><span class="line">        </span><br><span class="line">        <span class="type">Order</span> <span class="variable">savedOrder</span> <span class="operator">=</span> orderRepository.save(order);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 发布事件，自动触发相关操作</span></span><br><span class="line">        eventPublisher.publishEvent(<span class="keyword">new</span> <span class="title class_">OrderEvent</span>(<span class="built_in">this</span>, <span class="string">&quot;ORDER_CREATED&quot;</span>, savedOrder));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> savedOrder;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Order <span class="title function_">updateOrderStatus</span><span class="params">(Long orderId, OrderStatus newStatus)</span> &#123;</span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderRepository.findById(orderId)</span><br><span class="line">            .orElseThrow(() -&gt; <span class="keyword">new</span> <span class="title class_">OrderNotFoundException</span>(<span class="string">&quot;订单不存在：&quot;</span> + orderId));</span><br><span class="line">        </span><br><span class="line">        order.setStatus(newStatus);</span><br><span class="line">        order.setUpdateTime(LocalDateTime.now());</span><br><span class="line">        </span><br><span class="line">        <span class="type">Order</span> <span class="variable">updatedOrder</span> <span class="operator">=</span> orderRepository.save(order);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 发布状态更新事件</span></span><br><span class="line">        eventPublisher.publishEvent(<span class="keyword">new</span> <span class="title class_">OrderEvent</span>(<span class="built_in">this</span>, <span class="string">&quot;ORDER_STATUS_UPDATED&quot;</span>, updatedOrder));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> updatedOrder;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="（三）Spring-Boot自动配置"><a href="#（三）Spring-Boot自动配置" class="headerlink" title="（三）Spring Boot自动配置"></a>（三）Spring Boot自动配置</h2><h3 id="1-自动执行配置类"><a href="#1-自动执行配置类" class="headerlink" title="1. 自动执行配置类"></a>1. 自动执行配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AutoExecuteConfiguration</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异步任务执行器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean(&quot;autoExecuteTaskExecutor&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> TaskExecutor <span class="title function_">autoExecuteTaskExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ThreadPoolTaskExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolTaskExecutor</span>();</span><br><span class="line">        executor.setCorePoolSize(<span class="number">5</span>);</span><br><span class="line">        executor.setMaxPoolSize(<span class="number">20</span>);</span><br><span class="line">        executor.setQueueCapacity(<span class="number">100</span>);</span><br><span class="line">        executor.setThreadNamePrefix(<span class="string">&quot;auto-execute-&quot;</span>);</span><br><span class="line">        executor.setRejectedExecutionHandler(<span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.CallerRunsPolicy());</span><br><span class="line">        executor.initialize();</span><br><span class="line">        <span class="keyword">return</span> executor;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自动执行管理器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> AutoExecuteManager <span class="title function_">autoExecuteManager</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AutoExecuteManager</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-自动执行管理器"><a href="#2-自动执行管理器" class="headerlink" title="2. 自动执行管理器"></a>2. 自动执行管理器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AutoExecuteManager</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, List&lt;AutoExecuteHandler&gt;&gt; handlers = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TaskExecutor autoExecuteTaskExecutor;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册自动执行处理器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerHandler</span><span class="params">(String type, AutoExecuteHandler handler)</span> &#123;</span><br><span class="line">        handlers.computeIfAbsent(type, k -&gt; <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;()).add(handler);</span><br><span class="line">        log.info(<span class="string">&quot;注册自动执行处理器：类型=&#123;&#125;, 处理器=&#123;&#125;&quot;</span>, type, handler.getClass().getSimpleName());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行自动函数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(String type, Object data, <span class="type">boolean</span> async)</span> &#123;</span><br><span class="line">        List&lt;AutoExecuteHandler&gt; typeHandlers = handlers.get(type);</span><br><span class="line">        <span class="keyword">if</span> (typeHandlers == <span class="literal">null</span> || typeHandlers.isEmpty()) &#123;</span><br><span class="line">            log.warn(<span class="string">&quot;未找到类型为 &#123;&#125; 的自动执行处理器&quot;</span>, type);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (AutoExecuteHandler handler : typeHandlers) &#123;</span><br><span class="line">            <span class="keyword">if</span> (async) &#123;</span><br><span class="line">                autoExecuteTaskExecutor.execute(() -&gt; &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        handler.handle(data);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        log.error(<span class="string">&quot;异步执行自动函数失败：&#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    handler.handle(data);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    log.error(<span class="string">&quot;同步执行自动函数失败：&#123;&#125;&quot;</span>, e.getMessage(), e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自动执行处理器接口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AutoExecuteHandler</span> &#123;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(Object data)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="二、Node-js实现方案"><a href="#二、Node-js实现方案" class="headerlink" title="二、Node.js实现方案"></a>二、Node.js实现方案</h1><h2 id="（一）EventEmitter事件驱动模式"><a href="#（一）EventEmitter事件驱动模式" class="headerlink" title="（一）EventEmitter事件驱动模式"></a>（一）EventEmitter事件驱动模式</h2><h3 id="1-基础EventEmitter实现"><a href="#1-基础EventEmitter实现" class="headerlink" title="1. 基础EventEmitter实现"></a>1. 基础EventEmitter实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">EventEmitter</span> = <span class="built_in">require</span>(<span class="string">&#x27;events&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> util = <span class="built_in">require</span>(<span class="string">&#x27;util&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 业务事件发射器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BusinessEventEmitter</span> <span class="keyword">extends</span> <span class="title class_ inherited__">EventEmitter</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setMaxListeners</span>(<span class="number">50</span>); <span class="comment">// 设置最大监听器数量</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行函数并自动触发事件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">executeWithEvents</span>(<span class="params">eventName, mainFunction, ...args</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 触发执行前事件</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">emit</span>(<span class="string">`<span class="subst">$&#123;eventName&#125;</span>:before`</span>, &#123; args, <span class="attr">timestamp</span>: <span class="keyword">new</span> <span class="title class_">Date</span>() &#125;);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 执行主函数</span></span><br><span class="line">            <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">mainFunction</span>(...args);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 触发执行后事件</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">emit</span>(<span class="string">`<span class="subst">$&#123;eventName&#125;</span>:after`</span>, &#123; result, args, <span class="attr">timestamp</span>: <span class="keyword">new</span> <span class="title class_">Date</span>() &#125;);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="comment">// 触发错误事件</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">emit</span>(<span class="string">`<span class="subst">$&#123;eventName&#125;</span>:error`</span>, &#123; error, args, <span class="attr">timestamp</span>: <span class="keyword">new</span> <span class="title class_">Date</span>() &#125;);</span><br><span class="line">            <span class="keyword">throw</span> error;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量注册事件监听器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">registerAutoExecuteListeners</span>(<span class="params">eventName, listeners</span>) &#123;</span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">keys</span>(listeners).<span class="title function_">forEach</span>(<span class="function"><span class="params">phase</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> phaseListeners = listeners[phase];</span><br><span class="line">            <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(phaseListeners)) &#123;</span><br><span class="line">                phaseListeners.<span class="title function_">forEach</span>(<span class="function"><span class="params">listener</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="title function_">on</span>(<span class="string">`<span class="subst">$&#123;eventName&#125;</span>:<span class="subst">$&#123;phase&#125;</span>`</span>, listener);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> phaseListeners === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">on</span>(<span class="string">`<span class="subst">$&#123;eventName&#125;</span>:<span class="subst">$&#123;phase&#125;</span>`</span>, phaseListeners);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建全局事件发射器实例</span></span><br><span class="line"><span class="keyword">const</span> businessEvents = <span class="keyword">new</span> <span class="title class_">BusinessEventEmitter</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123; <span class="title class_">BusinessEventEmitter</span>, businessEvents &#125;;</span><br></pre></td></tr></table></figure>

<h3 id="2-自动执行装饰器"><a href="#2-自动执行装饰器" class="headerlink" title="2. 自动执行装饰器"></a>2. 自动执行装饰器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自动执行装饰器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">autoExecute</span>(<span class="params">options = &#123;&#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;</span><br><span class="line">        eventName,</span><br><span class="line">        <span class="attr">async</span>: isAsync = <span class="literal">false</span>,</span><br><span class="line">        beforeHandlers = [],</span><br><span class="line">        afterHandlers = [],</span><br><span class="line">        errorHandlers = []</span><br><span class="line">    &#125; = options;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">target, propertyKey, descriptor</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> originalMethod = descriptor.<span class="property">value</span>;</span><br><span class="line">        </span><br><span class="line">        descriptor.<span class="property">value</span> = <span class="keyword">async</span> <span class="keyword">function</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> context = &#123;</span><br><span class="line">                <span class="attr">target</span>: <span class="variable language_">this</span>,</span><br><span class="line">                <span class="attr">methodName</span>: propertyKey,</span><br><span class="line">                args,</span><br><span class="line">                <span class="attr">timestamp</span>: <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line">            &#125;;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 执行前置处理器</span></span><br><span class="line">                <span class="keyword">if</span> (isAsync) &#123;</span><br><span class="line">                    <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(beforeHandlers.<span class="title function_">map</span>(<span class="function"><span class="params">handler</span> =&gt;</span> <span class="title function_">handler</span>(context)));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    beforeHandlers.<span class="title function_">forEach</span>(<span class="function"><span class="params">handler</span> =&gt;</span> <span class="title function_">handler</span>(context));</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 执行原方法</span></span><br><span class="line">                <span class="keyword">const</span> result = <span class="keyword">await</span> originalMethod.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 更新上下文</span></span><br><span class="line">                context.<span class="property">result</span> = result;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 执行后置处理器</span></span><br><span class="line">                <span class="keyword">if</span> (isAsync) &#123;</span><br><span class="line">                    <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(afterHandlers.<span class="title function_">map</span>(<span class="function"><span class="params">handler</span> =&gt;</span> <span class="title function_">handler</span>(context)));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    afterHandlers.<span class="title function_">forEach</span>(<span class="function"><span class="params">handler</span> =&gt;</span> <span class="title function_">handler</span>(context));</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                context.<span class="property">error</span> = error;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 执行错误处理器</span></span><br><span class="line">                <span class="keyword">if</span> (isAsync) &#123;</span><br><span class="line">                    <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(errorHandlers.<span class="title function_">map</span>(<span class="function"><span class="params">handler</span> =&gt;</span> <span class="title function_">handler</span>(context)));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    errorHandlers.<span class="title function_">forEach</span>(<span class="function"><span class="params">handler</span> =&gt;</span> <span class="title function_">handler</span>(context));</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">throw</span> error;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> descriptor;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123; autoExecute &#125;;</span><br></pre></td></tr></table></figure>

<h3 id="3-业务服务实现"><a href="#3-业务服务实现" class="headerlink" title="3. 业务服务实现"></a>3. 业务服务实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; businessEvents &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./BusinessEventEmitter&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; autoExecute &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./AutoExecuteDecorator&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 订单服务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">orders</span> = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setupEventListeners</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置事件监听器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">setupEventListeners</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 订单创建事件监听器</span></span><br><span class="line">        businessEvents.<span class="title function_">on</span>(<span class="string">&#x27;order:created&#x27;</span>, <span class="variable language_">this</span>.<span class="property">handleOrderCreated</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>));</span><br><span class="line">        businessEvents.<span class="title function_">on</span>(<span class="string">&#x27;order:updated&#x27;</span>, <span class="variable language_">this</span>.<span class="property">handleOrderUpdated</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>));</span><br><span class="line">        businessEvents.<span class="title function_">on</span>(<span class="string">&#x27;order:deleted&#x27;</span>, <span class="variable language_">this</span>.<span class="property">handleOrderDeleted</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 通用事件监听器</span></span><br><span class="line">        businessEvents.<span class="title function_">on</span>(<span class="string">&#x27;order:before&#x27;</span>, <span class="variable language_">this</span>.<span class="property">logBefore</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>));</span><br><span class="line">        businessEvents.<span class="title function_">on</span>(<span class="string">&#x27;order:after&#x27;</span>, <span class="variable language_">this</span>.<span class="property">logAfter</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>));</span><br><span class="line">        businessEvents.<span class="title function_">on</span>(<span class="string">&#x27;order:error&#x27;</span>, <span class="variable language_">this</span>.<span class="property">logError</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建订单 - 使用装饰器自动执行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    @<span class="title function_">autoExecute</span>(&#123;</span><br><span class="line">        <span class="attr">eventName</span>: <span class="string">&#x27;order&#x27;</span>,</span><br><span class="line">        <span class="attr">async</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">beforeHandlers</span>: [</span><br><span class="line">            <span class="function">(<span class="params">context</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;准备创建订单:&#x27;</span>, context.<span class="property">args</span>),</span><br><span class="line">            <span class="function">(<span class="params">context</span>) =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">validateOrderData</span>(context.<span class="property">args</span>[<span class="number">0</span>])</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">afterHandlers</span>: [</span><br><span class="line">            <span class="function">(<span class="params">context</span>) =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">sendOrderCreatedNotification</span>(context.<span class="property">result</span>),</span><br><span class="line">            <span class="function">(<span class="params">context</span>) =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">updateOrderCache</span>(context.<span class="property">result</span>),</span><br><span class="line">            <span class="function">(<span class="params">context</span>) =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">recordOrderAudit</span>(context.<span class="property">result</span>)</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">errorHandlers</span>: [</span><br><span class="line">            <span class="function">(<span class="params">context</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;创建订单失败:&#x27;</span>, context.<span class="property">error</span>.<span class="property">message</span>),</span><br><span class="line">            <span class="function">(<span class="params">context</span>) =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">sendErrorNotification</span>(context.<span class="property">error</span>)</span><br><span class="line">        ]</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">createOrder</span>(<span class="params">orderData</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> order = &#123;</span><br><span class="line">            <span class="attr">id</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>().<span class="title function_">toString</span>(),</span><br><span class="line">            ...orderData,</span><br><span class="line">            <span class="attr">status</span>: <span class="string">&#x27;pending&#x27;</span>,</span><br><span class="line">            <span class="attr">createdAt</span>: <span class="keyword">new</span> <span class="title class_">Date</span>(),</span><br><span class="line">            <span class="attr">updatedAt</span>: <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">orders</span>.<span class="title function_">set</span>(order.<span class="property">id</span>, order);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 发布订单创建事件</span></span><br><span class="line">        businessEvents.<span class="title function_">emit</span>(<span class="string">&#x27;order:created&#x27;</span>, order);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> order;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新订单状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">updateOrderStatus</span>(<span class="params">orderId, newStatus</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> order = <span class="variable language_">this</span>.<span class="property">orders</span>.<span class="title function_">get</span>(orderId);</span><br><span class="line">        <span class="keyword">if</span> (!order) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`订单不存在: <span class="subst">$&#123;orderId&#125;</span>`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">const</span> oldStatus = order.<span class="property">status</span>;</span><br><span class="line">        order.<span class="property">status</span> = newStatus;</span><br><span class="line">        order.<span class="property">updatedAt</span> = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 使用事件发射器自动执行相关操作</span></span><br><span class="line">        <span class="keyword">await</span> businessEvents.<span class="title function_">executeWithEvents</span>(<span class="string">&#x27;orderStatusUpdate&#x27;</span>, </span><br><span class="line">            <span class="title function_">async</span> (id, status) =&gt; &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">orders</span>.<span class="title function_">set</span>(id, order);</span><br><span class="line">                <span class="keyword">return</span> order;</span><br><span class="line">            &#125;, </span><br><span class="line">            orderId, newStatus</span><br><span class="line">        );</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 发布订单更新事件</span></span><br><span class="line">        businessEvents.<span class="title function_">emit</span>(<span class="string">&#x27;order:updated&#x27;</span>, &#123; order, oldStatus, newStatus &#125;);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> order;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除订单</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">deleteOrder</span>(<span class="params">orderId</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> order = <span class="variable language_">this</span>.<span class="property">orders</span>.<span class="title function_">get</span>(orderId);</span><br><span class="line">        <span class="keyword">if</span> (!order) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`订单不存在: <span class="subst">$&#123;orderId&#125;</span>`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">orders</span>.<span class="title function_">delete</span>(orderId);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 发布订单删除事件</span></span><br><span class="line">        businessEvents.<span class="title function_">emit</span>(<span class="string">&#x27;order:deleted&#x27;</span>, order);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 事件处理方法</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">handleOrderCreated</span>(<span class="params">order</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;自动处理订单创建:&#x27;</span>, order.<span class="property">id</span>);</span><br><span class="line">        <span class="comment">// 自动执行的业务逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">handleOrderUpdated</span>(<span class="params">&#123; order, oldStatus, newStatus &#125;</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`自动处理订单状态更新: <span class="subst">$&#123;order.id&#125;</span> <span class="subst">$&#123;oldStatus&#125;</span> -&gt; <span class="subst">$&#123;newStatus&#125;</span>`</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 根据状态变化执行不同操作</span></span><br><span class="line">        <span class="keyword">switch</span> (newStatus) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;paid&#x27;</span>:</span><br><span class="line">                <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">handleOrderPaid</span>(order);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;shipped&#x27;</span>:</span><br><span class="line">                <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">handleOrderShipped</span>(order);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;completed&#x27;</span>:</span><br><span class="line">                <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">handleOrderCompleted</span>(order);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">handleOrderDeleted</span>(<span class="params">order</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;自动处理订单删除:&#x27;</span>, order.<span class="property">id</span>);</span><br><span class="line">        <span class="comment">// 清理相关数据</span></span><br><span class="line">        <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">clearOrderCache</span>(order.<span class="property">id</span>);</span><br><span class="line">        <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">recordOrderDeletion</span>(order);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 辅助方法</span></span><br><span class="line">    <span class="title function_">validateOrderData</span>(<span class="params">orderData</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!orderData.<span class="property">userId</span> || !orderData.<span class="property">productId</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;订单数据不完整&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">sendOrderCreatedNotification</span>(<span class="params">order</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;发送订单创建通知:&#x27;</span>, order.<span class="property">id</span>);</span><br><span class="line">        <span class="comment">// 实际的通知发送逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">updateOrderCache</span>(<span class="params">order</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;更新订单缓存:&#x27;</span>, order.<span class="property">id</span>);</span><br><span class="line">        <span class="comment">// 实际的缓存更新逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">recordOrderAudit</span>(<span class="params">order</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;记录订单审计:&#x27;</span>, order.<span class="property">id</span>);</span><br><span class="line">        <span class="comment">// 实际的审计记录逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">logBefore</span>(<span class="params">context</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;方法执行前:&#x27;</span>, context);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">logAfter</span>(<span class="params">context</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;方法执行后:&#x27;</span>, context);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">logError</span>(<span class="params">context</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;方法执行错误:&#x27;</span>, context);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">OrderService</span>;</span><br></pre></td></tr></table></figure>

<h2 id="（二）Express中间件模式"><a href="#（二）Express中间件模式" class="headerlink" title="（二）Express中间件模式"></a>（二）Express中间件模式</h2><h3 id="1-自动执行中间件"><a href="#1-自动执行中间件" class="headerlink" title="1. 自动执行中间件"></a>1. 自动执行中间件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自动执行中间件工厂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createAutoExecuteMiddleware</span>(<span class="params">options = &#123;&#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;</span><br><span class="line">        beforeHandlers = [],</span><br><span class="line">        afterHandlers = [],</span><br><span class="line">        errorHandlers = [],</span><br><span class="line">        <span class="attr">async</span>: isAsync = <span class="literal">false</span></span><br><span class="line">    &#125; = options;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">autoExecuteMiddleware</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> originalSend = res.<span class="property">send</span>;</span><br><span class="line">        <span class="keyword">const</span> originalJson = res.<span class="property">json</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 执行前置处理器</span></span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">executeHandlers</span> = <span class="keyword">async</span> (<span class="params">handlers, context</span>) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (isAsync) &#123;</span><br><span class="line">                <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(handlers.<span class="title function_">map</span>(<span class="function"><span class="params">handler</span> =&gt;</span> <span class="title function_">handler</span>(context)));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                handlers.<span class="title function_">forEach</span>(<span class="function"><span class="params">handler</span> =&gt;</span> <span class="title function_">handler</span>(context));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建上下文</span></span><br><span class="line">        <span class="keyword">const</span> context = &#123;</span><br><span class="line">            req,</span><br><span class="line">            res,</span><br><span class="line">            <span class="attr">startTime</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>(),</span><br><span class="line">            <span class="attr">method</span>: req.<span class="property">method</span>,</span><br><span class="line">            <span class="attr">url</span>: req.<span class="property">url</span>,</span><br><span class="line">            <span class="attr">ip</span>: req.<span class="property">ip</span></span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 执行前置处理器</span></span><br><span class="line">        <span class="title function_">executeHandlers</span>(beforeHandlers, context).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 重写响应方法以捕获响应数据</span></span><br><span class="line">            res.<span class="property">send</span> = <span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">                context.<span class="property">responseData</span> = data;</span><br><span class="line">                context.<span class="property">endTime</span> = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">                context.<span class="property">duration</span> = context.<span class="property">endTime</span> - context.<span class="property">startTime</span>;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 执行后置处理器</span></span><br><span class="line">                <span class="title function_">executeHandlers</span>(afterHandlers, context).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    originalSend.<span class="title function_">call</span>(<span class="variable language_">this</span>, data);</span><br><span class="line">                &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;后置处理器执行失败:&#x27;</span>, error);</span><br><span class="line">                    originalSend.<span class="title function_">call</span>(<span class="variable language_">this</span>, data);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;;</span><br><span class="line">            </span><br><span class="line">            res.<span class="property">json</span> = <span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">                context.<span class="property">responseData</span> = data;</span><br><span class="line">                context.<span class="property">endTime</span> = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">                context.<span class="property">duration</span> = context.<span class="property">endTime</span> - context.<span class="property">startTime</span>;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 执行后置处理器</span></span><br><span class="line">                <span class="title function_">executeHandlers</span>(afterHandlers, context).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    originalJson.<span class="title function_">call</span>(<span class="variable language_">this</span>, data);</span><br><span class="line">                &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;后置处理器执行失败:&#x27;</span>, error);</span><br><span class="line">                    originalJson.<span class="title function_">call</span>(<span class="variable language_">this</span>, data);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;;</span><br><span class="line">            </span><br><span class="line">            <span class="title function_">next</span>();</span><br><span class="line">        &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">            context.<span class="property">error</span> = error;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 执行错误处理器</span></span><br><span class="line">            <span class="title function_">executeHandlers</span>(errorHandlers, context).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="title function_">next</span>(error);</span><br><span class="line">            &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">handlerError</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;错误处理器执行失败:&#x27;</span>, handlerError);</span><br><span class="line">                <span class="title function_">next</span>(error);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123; createAutoExecuteMiddleware &#125;;</span><br></pre></td></tr></table></figure>

<h3 id="2-Express路由中使用"><a href="#2-Express路由中使用" class="headerlink" title="2. Express路由中使用"></a>2. Express路由中使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; createAutoExecuteMiddleware &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./AutoExecuteMiddleware&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">const</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自动执行处理器</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">logHandler</span> = (<span class="params">context</span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`请求日志: <span class="subst">$&#123;context.method&#125;</span> <span class="subst">$&#123;context.url&#125;</span> - <span class="subst">$&#123;context.ip&#125;</span>`</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">auditHandler</span> = (<span class="params">context</span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`审计记录: <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(&#123;</span></span></span><br><span class="line"><span class="subst"><span class="string">        method: context.method,</span></span></span><br><span class="line"><span class="subst"><span class="string">        url: context.url,</span></span></span><br><span class="line"><span class="subst"><span class="string">        ip: context.ip,</span></span></span><br><span class="line"><span class="subst"><span class="string">        timestamp: <span class="keyword">new</span> <span class="built_in">Date</span>(),</span></span></span><br><span class="line"><span class="subst"><span class="string">        duration: context.duration</span></span></span><br><span class="line"><span class="subst"><span class="string">    &#125;)&#125;</span>`</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">cacheHandler</span> = (<span class="params">context</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (context.<span class="property">method</span> === <span class="string">&#x27;GET&#x27;</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`缓存操作: <span class="subst">$&#123;context.url&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">notificationHandler</span> = (<span class="params">context</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (context.<span class="property">responseData</span> &amp;&amp; context.<span class="property">responseData</span>.<span class="property">success</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;发送成功通知&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 应用自动执行中间件</span></span><br><span class="line">router.<span class="title function_">use</span>(<span class="title function_">createAutoExecuteMiddleware</span>(&#123;</span><br><span class="line">    <span class="attr">beforeHandlers</span>: [logHandler],</span><br><span class="line">    <span class="attr">afterHandlers</span>: [auditHandler, cacheHandler, notificationHandler],</span><br><span class="line">    <span class="attr">errorHandlers</span>: [<span class="function">(<span class="params">context</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;请求处理失败:&#x27;</span>, context.<span class="property">error</span>)],</span><br><span class="line">    <span class="attr">async</span>: <span class="literal">true</span></span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 订单相关路由</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/orders&#x27;</span>, <span class="title function_">async</span> (req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> orderData = req.<span class="property">body</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建订单的业务逻辑</span></span><br><span class="line">        <span class="keyword">const</span> order = &#123;</span><br><span class="line">            <span class="attr">id</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>().<span class="title function_">toString</span>(),</span><br><span class="line">            ...orderData,</span><br><span class="line">            <span class="attr">status</span>: <span class="string">&#x27;pending&#x27;</span>,</span><br><span class="line">            <span class="attr">createdAt</span>: <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        res.<span class="title function_">json</span>(&#123;</span><br><span class="line">            <span class="attr">success</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">data</span>: order,</span><br><span class="line">            <span class="attr">message</span>: <span class="string">&#x27;订单创建成功&#x27;</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line">            <span class="attr">success</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">message</span>: error.<span class="property">message</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">put</span>(<span class="string">&#x27;/orders/:id/status&#x27;</span>, <span class="title function_">async</span> (req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; id &#125; = req.<span class="property">params</span>;</span><br><span class="line">        <span class="keyword">const</span> &#123; status &#125; = req.<span class="property">body</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 更新订单状态的业务逻辑</span></span><br><span class="line">        <span class="keyword">const</span> updatedOrder = &#123;</span><br><span class="line">            id,</span><br><span class="line">            status,</span><br><span class="line">            <span class="attr">updatedAt</span>: <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        res.<span class="title function_">json</span>(&#123;</span><br><span class="line">            <span class="attr">success</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">data</span>: updatedOrder,</span><br><span class="line">            <span class="attr">message</span>: <span class="string">&#x27;订单状态更新成功&#x27;</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line">            <span class="attr">success</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">message</span>: error.<span class="property">message</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/api&#x27;</span>, router);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = app;</span><br></pre></td></tr></table></figure>

<h2 id="（三）Promise链式自动执行"><a href="#（三）Promise链式自动执行" class="headerlink" title="（三）Promise链式自动执行"></a>（三）Promise链式自动执行</h2><h3 id="1-Promise链管理器"><a href="#1-Promise链管理器" class="headerlink" title="1. Promise链管理器"></a>1. Promise链管理器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Promise链自动执行管理器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PromiseChainManager</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">chains</span> = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册执行链</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">registerChain</span>(<span class="params">name, chain</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">chains</span>.<span class="title function_">set</span>(name, chain);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行指定的链</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">executeChain</span>(<span class="params">name, initialData</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> chain = <span class="variable language_">this</span>.<span class="property">chains</span>.<span class="title function_">get</span>(name);</span><br><span class="line">        <span class="keyword">if</span> (!chain) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`未找到名为 <span class="subst">$&#123;name&#125;</span> 的执行链`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> result = initialData;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> step <span class="keyword">of</span> chain) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">typeof</span> step === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">                    result = <span class="keyword">await</span> <span class="title function_">step</span>(result);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (step.<span class="property">handler</span> &amp;&amp; <span class="keyword">typeof</span> step.<span class="property">handler</span> === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">                    <span class="keyword">const</span> stepResult = <span class="keyword">await</span> step.<span class="title function_">handler</span>(result);</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">// 如果步骤配置了后续处理器，则执行</span></span><br><span class="line">                    <span class="keyword">if</span> (step.<span class="property">afterHandlers</span>) &#123;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">const</span> afterHandler <span class="keyword">of</span> step.<span class="property">afterHandlers</span>) &#123;</span><br><span class="line">                            <span class="keyword">await</span> <span class="title function_">afterHandler</span>(stepResult, result);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">                    result = stepResult;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                <span class="comment">// 如果步骤配置了错误处理器，则执行</span></span><br><span class="line">                <span class="keyword">if</span> (step.<span class="property">errorHandlers</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">const</span> errorHandler <span class="keyword">of</span> step.<span class="property">errorHandlers</span>) &#123;</span><br><span class="line">                        <span class="keyword">await</span> <span class="title function_">errorHandler</span>(error, result);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">throw</span> error;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建自动执行的Promise链</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">createAutoExecuteChain</span>(<span class="params">mainFunction, autoFunctions = []</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">async</span> (data) =&gt; &#123;</span><br><span class="line">            <span class="comment">// 执行主函数</span></span><br><span class="line">            <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">mainFunction</span>(data);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 自动执行其他函数</span></span><br><span class="line">            <span class="keyword">const</span> autoResults = <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(</span><br><span class="line">                autoFunctions.<span class="title function_">map</span>(<span class="function"><span class="params">func</span> =&gt;</span> <span class="title function_">func</span>(result, data))</span><br><span class="line">            );</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="attr">mainResult</span>: result,</span><br><span class="line">                autoResults</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">const</span> chainManager = <span class="keyword">new</span> <span class="title class_">PromiseChainManager</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册订单处理链</span></span><br><span class="line">chainManager.<span class="title function_">registerChain</span>(<span class="string">&#x27;orderProcessing&#x27;</span>, [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">handler</span>: <span class="title function_">async</span> (orderData) =&gt; &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;步骤1: 验证订单数据&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span> (!orderData.<span class="property">userId</span> || !orderData.<span class="property">productId</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;订单数据不完整&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> orderData;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">afterHandlers</span>: [</span><br><span class="line">            <span class="title function_">async</span> (result) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;验证完成:&#x27;</span>, result)</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">errorHandlers</span>: [</span><br><span class="line">            <span class="title function_">async</span> (error) =&gt; <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;验证失败:&#x27;</span>, error.<span class="property">message</span>)</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">handler</span>: <span class="title function_">async</span> (orderData) =&gt; &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;步骤2: 创建订单&#x27;</span>);</span><br><span class="line">            <span class="keyword">const</span> order = &#123;</span><br><span class="line">                <span class="attr">id</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>().<span class="title function_">toString</span>(),</span><br><span class="line">                ...orderData,</span><br><span class="line">                <span class="attr">status</span>: <span class="string">&#x27;pending&#x27;</span>,</span><br><span class="line">                <span class="attr">createdAt</span>: <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">return</span> order;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">afterHandlers</span>: [</span><br><span class="line">            <span class="title function_">async</span> (order) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;订单创建成功:&#x27;</span>, order.<span class="property">id</span>),</span><br><span class="line">            <span class="title function_">async</span> (order) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;发送创建通知&#x27;</span>),</span><br><span class="line">            <span class="title function_">async</span> (order) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;更新缓存&#x27;</span>)</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">handler</span>: <span class="title function_">async</span> (order) =&gt; &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;步骤3: 处理支付&#x27;</span>);</span><br><span class="line">            <span class="comment">// 模拟支付处理</span></span><br><span class="line">            <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(resolve, <span class="number">1000</span>));</span><br><span class="line">            order.<span class="property">status</span> = <span class="string">&#x27;paid&#x27;</span>;</span><br><span class="line">            order.<span class="property">paidAt</span> = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">            <span class="keyword">return</span> order;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">afterHandlers</span>: [</span><br><span class="line">            <span class="title function_">async</span> (order) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;支付完成:&#x27;</span>, order.<span class="property">id</span>),</span><br><span class="line">            <span class="title function_">async</span> (order) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;发送支付通知&#x27;</span>),</span><br><span class="line">            <span class="title function_">async</span> (order) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;更新订单状态&#x27;</span>)</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123; <span class="title class_">PromiseChainManager</span>, chainManager &#125;;</span><br></pre></td></tr></table></figure>

<h3 id="2-业务服务中使用Promise链"><a href="#2-业务服务中使用Promise链" class="headerlink" title="2. 业务服务中使用Promise链"></a>2. 业务服务中使用Promise链</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; chainManager &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./PromiseChainManager&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setupAutoExecuteChains</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置自动执行链</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">setupAutoExecuteChains</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 创建订单自动执行链</span></span><br><span class="line">        <span class="keyword">const</span> createOrderChain = chainManager.<span class="title function_">createAutoExecuteChain</span>(</span><br><span class="line">            <span class="comment">// 主函数：创建订单</span></span><br><span class="line">            <span class="title function_">async</span> (orderData) =&gt; &#123;</span><br><span class="line">                <span class="keyword">const</span> order = &#123;</span><br><span class="line">                    <span class="attr">id</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>().<span class="title function_">toString</span>(),</span><br><span class="line">                    ...orderData,</span><br><span class="line">                    <span class="attr">status</span>: <span class="string">&#x27;pending&#x27;</span>,</span><br><span class="line">                    <span class="attr">createdAt</span>: <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;主函数：订单创建完成&#x27;</span>, order.<span class="property">id</span>);</span><br><span class="line">                <span class="keyword">return</span> order;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 自动执行的函数数组</span></span><br><span class="line">            [</span><br><span class="line">                <span class="title function_">async</span> (order) =&gt; &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;自动执行：发送邮件通知&#x27;</span>, order.<span class="property">id</span>);</span><br><span class="line">                    <span class="keyword">return</span> &#123; <span class="attr">type</span>: <span class="string">&#x27;email&#x27;</span>, <span class="attr">sent</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="title function_">async</span> (order) =&gt; &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;自动执行：更新缓存&#x27;</span>, order.<span class="property">id</span>);</span><br><span class="line">                    <span class="keyword">return</span> &#123; <span class="attr">type</span>: <span class="string">&#x27;cache&#x27;</span>, <span class="attr">updated</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="title function_">async</span> (order) =&gt; &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;自动执行：记录审计日志&#x27;</span>, order.<span class="property">id</span>);</span><br><span class="line">                    <span class="keyword">return</span> &#123; <span class="attr">type</span>: <span class="string">&#x27;audit&#x27;</span>, <span class="attr">recorded</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="title function_">async</span> (order) =&gt; &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;自动执行：发送短信通知&#x27;</span>, order.<span class="property">id</span>);</span><br><span class="line">                    <span class="keyword">return</span> &#123; <span class="attr">type</span>: <span class="string">&#x27;sms&#x27;</span>, <span class="attr">sent</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        );</span><br><span class="line">        </span><br><span class="line">        chainManager.<span class="title function_">registerChain</span>(<span class="string">&#x27;createOrder&#x27;</span>, [createOrderChain]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建订单</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">createOrder</span>(<span class="params">orderData</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> result = <span class="keyword">await</span> chainManager.<span class="title function_">executeChain</span>(<span class="string">&#x27;createOrder&#x27;</span>, orderData);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;订单创建流程完成:&#x27;</span>, result);</span><br><span class="line">            <span class="keyword">return</span> result.<span class="property">mainResult</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;订单创建失败:&#x27;</span>, error.<span class="property">message</span>);</span><br><span class="line">            <span class="keyword">throw</span> error;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理订单（使用预定义的处理链）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">processOrder</span>(<span class="params">orderData</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> result = <span class="keyword">await</span> chainManager.<span class="title function_">executeChain</span>(<span class="string">&#x27;orderProcessing&#x27;</span>, orderData);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;订单处理完成:&#x27;</span>, result);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;订单处理失败:&#x27;</span>, error.<span class="property">message</span>);</span><br><span class="line">            <span class="keyword">throw</span> error;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">OrderService</span>;</span><br></pre></td></tr></table></figure>

<h1 id="三、最佳实践与性能优化"><a href="#三、最佳实践与性能优化" class="headerlink" title="三、最佳实践与性能优化"></a>三、最佳实践与性能优化</h1><h2 id="（一）性能优化策略"><a href="#（一）性能优化策略" class="headerlink" title="（一）性能优化策略"></a>（一）性能优化策略</h2><h3 id="1-Java-Spring优化"><a href="#1-Java-Spring优化" class="headerlink" title="1. Java Spring优化"></a>1. Java Spring优化</h3><h4 id="异步执行配置"><a href="#异步执行配置" class="headerlink" title="异步执行配置"></a>异步执行配置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsyncConfiguration</span> <span class="keyword">implements</span> <span class="title class_">AsyncConfigurer</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;autoExecuteTaskExecutor&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Executor <span class="title function_">getAsyncExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ThreadPoolTaskExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolTaskExecutor</span>();</span><br><span class="line">        executor.setCorePoolSize(<span class="number">10</span>);</span><br><span class="line">        executor.setMaxPoolSize(<span class="number">50</span>);</span><br><span class="line">        executor.setQueueCapacity(<span class="number">200</span>);</span><br><span class="line">        executor.setThreadNamePrefix(<span class="string">&quot;auto-execute-&quot;</span>);</span><br><span class="line">        executor.setKeepAliveSeconds(<span class="number">60</span>);</span><br><span class="line">        executor.setRejectedExecutionHandler(<span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.CallerRunsPolicy());</span><br><span class="line">        executor.setWaitForTasksToCompleteOnShutdown(<span class="literal">true</span>);</span><br><span class="line">        executor.setAwaitTerminationSeconds(<span class="number">30</span>);</span><br><span class="line">        executor.initialize();</span><br><span class="line">        <span class="keyword">return</span> executor;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> AsyncUncaughtExceptionHandler <span class="title function_">getAsyncUncaughtExceptionHandler</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleAsyncUncaughtExceptionHandler</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="条件化自动执行"><a href="#条件化自动执行" class="headerlink" title="条件化自动执行"></a>条件化自动执行</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConditionalAutoExecuteAspect</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Around(&quot;@annotation(autoExecute)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">conditionalExecute</span><span class="params">(ProceedingJoinPoint joinPoint, AutoExecute autoExecute)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">// 根据条件决定是否执行自动函数</span></span><br><span class="line">        <span class="keyword">if</span> (shouldExecuteAutoFunctions(joinPoint, autoExecute)) &#123;</span><br><span class="line">            <span class="keyword">return</span> executeWithAutoFunctions(joinPoint, autoExecute);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> joinPoint.proceed();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">shouldExecuteAutoFunctions</span><span class="params">(ProceedingJoinPoint joinPoint, AutoExecute autoExecute)</span> &#123;</span><br><span class="line">        <span class="comment">// 实现条件判断逻辑</span></span><br><span class="line">        <span class="comment">// 例如：根据环境、用户权限、系统负载等条件</span></span><br><span class="line">        <span class="keyword">return</span> !isHighLoadPeriod() &amp;&amp; isFeatureEnabled(<span class="string">&quot;auto-execute&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-Node-js优化"><a href="#2-Node-js优化" class="headerlink" title="2. Node.js优化"></a>2. Node.js优化</h3><h4 id="事件监听器优化"><a href="#事件监听器优化" class="headerlink" title="事件监听器优化"></a>事件监听器优化</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">OptimizedEventEmitter</span> <span class="keyword">extends</span> <span class="title class_ inherited__">EventEmitter</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">executionQueue</span> = [];</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">isProcessing</span> = <span class="literal">false</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">maxConcurrency</span> = <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量处理事件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">processBatch</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">isProcessing</span> || <span class="variable language_">this</span>.<span class="property">executionQueue</span>.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">isProcessing</span> = <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> batch = <span class="variable language_">this</span>.<span class="property">executionQueue</span>.<span class="title function_">splice</span>(<span class="number">0</span>, <span class="variable language_">this</span>.<span class="property">maxConcurrency</span>);</span><br><span class="line">            <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(batch.<span class="title function_">map</span>(<span class="function"><span class="params">task</span> =&gt;</span> <span class="title function_">task</span>()));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;批量处理失败:&#x27;</span>, error);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">isProcessing</span> = <span class="literal">false</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 如果还有待处理的任务，继续处理</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">executionQueue</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="title function_">setImmediate</span>(<span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">processBatch</span>());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加到执行队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">queueExecution</span>(<span class="params">task</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">executionQueue</span>.<span class="title function_">push</span>(task);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果当前没有在处理，立即开始处理</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">isProcessing</span>) &#123;</span><br><span class="line">            <span class="title function_">setImmediate</span>(<span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">processBatch</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="（二）错误处理与监控"><a href="#（二）错误处理与监控" class="headerlink" title="（二）错误处理与监控"></a>（二）错误处理与监控</h2><h3 id="1-Java-Spring错误处理"><a href="#1-Java-Spring错误处理" class="headerlink" title="1. Java Spring错误处理"></a>1. Java Spring错误处理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AutoExecuteErrorHandler</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MeterRegistry meterRegistry;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleAutoExecuteError</span><span class="params">(AutoExecuteErrorEvent event)</span> &#123;</span><br><span class="line">        <span class="comment">// 记录错误指标</span></span><br><span class="line">        Counter.builder(<span class="string">&quot;auto.execute.error&quot;</span>)</span><br><span class="line">            .tag(<span class="string">&quot;method&quot;</span>, event.getMethodName())</span><br><span class="line">            .tag(<span class="string">&quot;type&quot;</span>, event.getExecuteType())</span><br><span class="line">            .register(meterRegistry)</span><br><span class="line">            .increment();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 记录详细错误日志</span></span><br><span class="line">        log.error(<span class="string">&quot;自动执行失败: method=&#123;&#125;, type=&#123;&#125;, error=&#123;&#125;&quot;</span>, </span><br><span class="line">            event.getMethodName(), </span><br><span class="line">            event.getExecuteType(), </span><br><span class="line">            event.getError().getMessage(), </span><br><span class="line">            event.getError());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 发送告警</span></span><br><span class="line">        sendAlert(event);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">sendAlert</span><span class="params">(AutoExecuteErrorEvent event)</span> &#123;</span><br><span class="line">        <span class="comment">// 实现告警逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-Node-js错误处理"><a href="#2-Node-js错误处理" class="headerlink" title="2. Node.js错误处理"></a>2. Node.js错误处理</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ErrorHandlingEventEmitter</span> <span class="keyword">extends</span> <span class="title class_ inherited__">EventEmitter</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">errorCount</span> = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">maxErrors</span> = <span class="number">5</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">errorWindow</span> = <span class="number">60000</span>; <span class="comment">// 1分钟</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 监听未捕获的错误</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="variable language_">this</span>.<span class="property">handleError</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">handleError</span>(<span class="params">error, context = &#123;&#125;</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> errorKey = <span class="string">`<span class="subst">$&#123;context.method || <span class="string">&#x27;unknown&#x27;</span>&#125;</span>:<span class="subst">$&#123;error.message&#125;</span>`</span>;</span><br><span class="line">        <span class="keyword">const</span> now = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 错误计数</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">errorCount</span>.<span class="title function_">has</span>(errorKey)) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">errorCount</span>.<span class="title function_">set</span>(errorKey, []);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">const</span> errors = <span class="variable language_">this</span>.<span class="property">errorCount</span>.<span class="title function_">get</span>(errorKey);</span><br><span class="line">        errors.<span class="title function_">push</span>(now);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 清理过期的错误记录</span></span><br><span class="line">        <span class="keyword">const</span> validErrors = errors.<span class="title function_">filter</span>(<span class="function"><span class="params">time</span> =&gt;</span> now - time &lt; <span class="variable language_">this</span>.<span class="property">errorWindow</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">errorCount</span>.<span class="title function_">set</span>(errorKey, validErrors);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果错误频率过高，触发熔断</span></span><br><span class="line">        <span class="keyword">if</span> (validErrors.<span class="property">length</span> &gt;= <span class="variable language_">this</span>.<span class="property">maxErrors</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">emit</span>(<span class="string">&#x27;circuit-breaker&#x27;</span>, &#123; errorKey, <span class="attr">count</span>: validErrors.<span class="property">length</span> &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 记录错误日志</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;自动执行错误:&#x27;</span>, &#123;</span><br><span class="line">            <span class="attr">error</span>: error.<span class="property">message</span>,</span><br><span class="line">            context,</span><br><span class="line">            <span class="attr">count</span>: validErrors.<span class="property">length</span>,</span><br><span class="line">            <span class="attr">timestamp</span>: <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="（三）监控与指标"><a href="#（三）监控与指标" class="headerlink" title="（三）监控与指标"></a>（三）监控与指标</h2><h3 id="1-Java-Spring监控"><a href="#1-Java-Spring监控" class="headerlink" title="1. Java Spring监控"></a>1. Java Spring监控</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AutoExecuteMetrics</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Timer executionTimer;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Counter successCounter;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Counter errorCounter;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AutoExecuteMetrics</span><span class="params">(MeterRegistry meterRegistry)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.executionTimer = Timer.builder(<span class="string">&quot;auto.execute.duration&quot;</span>)</span><br><span class="line">            .description(<span class="string">&quot;自动执行耗时&quot;</span>)</span><br><span class="line">            .register(meterRegistry);</span><br><span class="line">            </span><br><span class="line">        <span class="built_in">this</span>.successCounter = Counter.builder(<span class="string">&quot;auto.execute.success&quot;</span>)</span><br><span class="line">            .description(<span class="string">&quot;自动执行成功次数&quot;</span>)</span><br><span class="line">            .register(meterRegistry);</span><br><span class="line">            </span><br><span class="line">        <span class="built_in">this</span>.errorCounter = Counter.builder(<span class="string">&quot;auto.execute.error&quot;</span>)</span><br><span class="line">            .description(<span class="string">&quot;自动执行失败次数&quot;</span>)</span><br><span class="line">            .register(meterRegistry);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">recordExecution</span><span class="params">(String type, <span class="type">long</span> duration, <span class="type">boolean</span> success)</span> &#123;</span><br><span class="line">        executionTimer.record(duration, TimeUnit.MILLISECONDS);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (success) &#123;</span><br><span class="line">            successCounter.increment(Tags.of(<span class="string">&quot;type&quot;</span>, type));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            errorCounter.increment(Tags.of(<span class="string">&quot;type&quot;</span>, type));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-Node-js监控"><a href="#2-Node-js监控" class="headerlink" title="2. Node.js监控"></a>2. Node.js监控</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promClient = <span class="built_in">require</span>(<span class="string">&#x27;prom-client&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建指标</span></span><br><span class="line"><span class="keyword">const</span> executionDuration = <span class="keyword">new</span> promClient.<span class="title class_">Histogram</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;auto_execute_duration_seconds&#x27;</span>,</span><br><span class="line">    <span class="attr">help</span>: <span class="string">&#x27;自动执行耗时&#x27;</span>,</span><br><span class="line">    <span class="attr">labelNames</span>: [<span class="string">&#x27;method&#x27;</span>, <span class="string">&#x27;type&#x27;</span>, <span class="string">&#x27;status&#x27;</span>]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> executionCounter = <span class="keyword">new</span> promClient.<span class="title class_">Counter</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;auto_execute_total&#x27;</span>,</span><br><span class="line">    <span class="attr">help</span>: <span class="string">&#x27;自动执行总次数&#x27;</span>,</span><br><span class="line">    <span class="attr">labelNames</span>: [<span class="string">&#x27;method&#x27;</span>, <span class="string">&#x27;type&#x27;</span>, <span class="string">&#x27;status&#x27;</span>]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MonitoringEventEmitter</span> <span class="keyword">extends</span> <span class="title class_ inherited__">EventEmitter</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setupMonitoring</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">setupMonitoring</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">on</span>(<span class="string">&#x27;execution:start&#x27;</span>, <span class="variable language_">this</span>.<span class="property">recordStart</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>));</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">on</span>(<span class="string">&#x27;execution:end&#x27;</span>, <span class="variable language_">this</span>.<span class="property">recordEnd</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>));</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">on</span>(<span class="string">&#x27;execution:error&#x27;</span>, <span class="variable language_">this</span>.<span class="property">recordError</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">recordStart</span>(<span class="params">context</span>) &#123;</span><br><span class="line">        context.<span class="property">startTime</span> = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">recordEnd</span>(<span class="params">context</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> duration = (<span class="title class_">Date</span>.<span class="title function_">now</span>() - context.<span class="property">startTime</span>) / <span class="number">1000</span>;</span><br><span class="line">        </span><br><span class="line">        executionDuration</span><br><span class="line">            .<span class="title function_">labels</span>(context.<span class="property">method</span>, context.<span class="property">type</span>, <span class="string">&#x27;success&#x27;</span>)</span><br><span class="line">            .<span class="title function_">observe</span>(duration);</span><br><span class="line">            </span><br><span class="line">        executionCounter</span><br><span class="line">            .<span class="title function_">labels</span>(context.<span class="property">method</span>, context.<span class="property">type</span>, <span class="string">&#x27;success&#x27;</span>)</span><br><span class="line">            .<span class="title function_">inc</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">recordError</span>(<span class="params">context</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> duration = (<span class="title class_">Date</span>.<span class="title function_">now</span>() - context.<span class="property">startTime</span>) / <span class="number">1000</span>;</span><br><span class="line">        </span><br><span class="line">        executionDuration</span><br><span class="line">            .<span class="title function_">labels</span>(context.<span class="property">method</span>, context.<span class="property">type</span>, <span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">            .<span class="title function_">observe</span>(duration);</span><br><span class="line">            </span><br><span class="line">        executionCounter</span><br><span class="line">            .<span class="title function_">labels</span>(context.<span class="property">method</span>, context.<span class="property">type</span>, <span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">            .<span class="title function_">inc</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h1><p>函数自动执行是现代后端开发中的重要模式，通过合理的设计和实现，可以大大提高代码的可维护性和系统的可扩展性。</p>
<h2 id="（一）技术选择建议"><a href="#（一）技术选择建议" class="headerlink" title="（一）技术选择建议"></a>（一）技术选择建议</h2><h3 id="Java-Spring项目"><a href="#Java-Spring项目" class="headerlink" title="Java Spring项目"></a>Java Spring项目</h3><ol>
<li><strong>简单场景</strong>：使用AOP切面编程</li>
<li><strong>复杂业务</strong>：结合Spring事件机制</li>
<li><strong>高性能要求</strong>：使用异步执行和条件化执行</li>
<li><strong>企业级应用</strong>：完整的监控和错误处理机制</li>
</ol>
<h3 id="Node-js项目"><a href="#Node-js项目" class="headerlink" title="Node.js项目"></a>Node.js项目</h3><ol>
<li><strong>事件驱动</strong>：使用EventEmitter模式</li>
<li><strong>Web应用</strong>：结合Express中间件</li>
<li><strong>复杂流程</strong>：使用Promise链管理器</li>
<li><strong>高并发</strong>：优化事件处理和批量执行</li>
</ol>
<h2 id="（二）最佳实践总结"><a href="#（二）最佳实践总结" class="headerlink" title="（二）最佳实践总结"></a>（二）最佳实践总结</h2><ol>
<li><strong>性能优先</strong>：合理使用异步执行，避免阻塞主流程</li>
<li><strong>错误隔离</strong>：自动执行的失败不应影响主业务逻辑</li>
<li><strong>监控完善</strong>：建立完整的指标监控和告警机制</li>
<li><strong>可配置化</strong>：支持动态开关和条件执行</li>
<li><strong>文档清晰</strong>：明确标注自动执行的副作用和依赖关系</li>
</ol>
<p>通过这些模式和实践，可以构建出既高效又可维护的自动执行系统，为业务开发提供强有力的技术支撑。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#aop">Spring AOP官方文档</a></li>
<li><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#context-functionality-events">Spring Events官方文档</a></li>
<li><a href="https://nodejs.org/api/events.html">Node.js EventEmitter文档</a></li>
<li><a href="https://expressjs.com/en/guide/using-middleware.html">Express中间件指南</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[详细介绍在Java Spring和Node.js中实现函数自动执行的多种模式，包括AOP切面编程、事件监听、装饰器模式、中间件等实用技术方案]]>
    
    </summary>
    
      <category term="后端" scheme="https://uwakeme.tech/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="Java" scheme="https://uwakeme.tech/tags/Java/"/>
    
      <category term="Node.js" scheme="https://uwakeme.tech/tags/Node-js/"/>
    
      <category term="设计模式" scheme="https://uwakeme.tech/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="异步编程" scheme="https://uwakeme.tech/tags/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/"/>
    
      <category term="Spring" scheme="https://uwakeme.tech/tags/Spring/"/>
    
      <category term="AOP" scheme="https://uwakeme.tech/tags/AOP/"/>
    
      <category term="后端" scheme="https://uwakeme.tech/categories/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
</feed>
